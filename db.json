{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":0},{"_id":"source/img/qq.jpg","path":"img/qq.jpg","modified":1,"renderable":0},{"_id":"source/img/night.jpg","path":"img/night.jpg","modified":1,"renderable":0},{"_id":"source/img/computer.png","path":"img/computer.png","modified":1,"renderable":0},{"_id":"source/post_img/1.png","path":"post_img/1.png","modified":1,"renderable":0},{"_id":"source/post_img/3.png","path":"post_img/3.png","modified":1,"renderable":0},{"_id":"source/post_img/4.png","path":"post_img/4.png","modified":1,"renderable":0},{"_id":"source/post_img/5.png","path":"post_img/5.png","modified":1,"renderable":0},{"_id":"source/post_img/2.png","path":"post_img/2.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/css/mycss.css","path":"css/mycss.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/cat.js","path":"js/cat.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/rightmenu.js","path":"js/rightmenu.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/sun_moon.js","path":"js/sun_moon.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"82cfcde3bbf056782898cea15936b530d1161009","modified":1692355772220},{"_id":"source/_posts/C++知识点回顾.md","hash":"c767e099bfa2b2e018e2a2e36fd34b0afe286ad7","modified":1710168532473},{"_id":"source/_data/widget.yml","hash":"6ff0b9f4c59568fcaba7cc11e2797f95115c602e","modified":1692548692212},{"_id":"source/_posts/go网络编程.md","hash":"386310231b17d5cb7cf3a4c31b955e6f19678dfd","modified":1721801703896},{"_id":"source/_posts/redis.md","hash":"3378b690fec6713b342323f386e468cad6d388fc","modified":1711349156780},{"_id":"source/_posts/raft.md","hash":"d11cdda590be959353231603ce7be8f4ae34e805","modified":1709824670447},{"_id":"source/_posts/array.md","hash":"e6aae356f881935ad3a89c3fe05148a7ff35a230","modified":1692926200197},{"_id":"source/_posts/binary-tree.md","hash":"94b4c6d3057e0dc4475f572ed9e67df591409513","modified":1692579481378},{"_id":"source/_posts/golang知识点回顾.md","hash":"7d9225b8de70ae8065460da5cf2bcbe24a67bce4","modified":1711295799619},{"_id":"source/_posts/操作系统1.md","hash":"d59e7e2be2c68be920129771969834b27250f028","modified":1692983425516},{"_id":"source/about/index.md","hash":"33b2dab8831cf476e71e6d9cf574739dd01d3a14","modified":1692595002531},{"_id":"source/_posts/东软云his技术栈总结.md","hash":"6377a0112e8d7c63343084ebda9fd5a13cda2013","modified":1702225291349},{"_id":"source/categories/index.md","hash":"507f57c9fd719c6f5f19cb478a4b71ee36f93235","modified":1692439415507},{"_id":"source/_posts/linux常用命令.md","hash":"1b87275c841d204505340a0e9acd63a0a1728613","modified":1704472373779},{"_id":"source/css/readPercent.css","hash":"e121a59aa2a85b0cfde7a0f55ebd9db551f63c2a","modified":1692576353517},{"_id":"source/css/custom.css","hash":"e392071b11682569132509f9ec741ab1a41e6522","modified":1692579243360},{"_id":"source/_posts/计算机网络知识点回顾.md","hash":"49dc70627dcfc39bcc1e7fb6d9034bb4aefce31d","modified":1710326201252},{"_id":"source/css/universe.css","hash":"e0fc94d45e3147970c9f30663f7bec21cdd9ec92","modified":1692499659684},{"_id":"source/css/rightmenu.css","hash":"5d545e8230daea47559c707d26a2b44000dbe1b3","modified":1692516970543},{"_id":"source/css/runtime.css","hash":"cbdff1345beca86553923ba6e5e9d8ff41232165","modified":1692511390158},{"_id":"source/js/readPercent.js","hash":"0ca0cd7d17777752d554df24e9337be9f6030df6","modified":1692576824164},{"_id":"source/js/cursor.js","hash":"3089efdaaed7b0c6916813fb98ea0381ccfa9bbb","modified":1692462162263},{"_id":"source/img/computer.png","hash":"0e4a681c48a234b47c139caa93e4e504a08ea4ba","modified":1692535920984},{"_id":"source/js/title.js","hash":"87c2348a4636e653a00b1ba31147f13e56aeac98","modified":1692515921102},{"_id":"source/js/fps.js","hash":"1cb7e8c3a1086b74b7125b350cb20656d2d856e9","modified":1692550121499},{"_id":"source/js/runtime.js","hash":"bd273e2b137413f00ed4bf51491cd1f9f94895f6","modified":1692511369239},{"_id":"source/js/newYear.js","hash":"059a1fc7aab3392d5818df933e4e96293ec867b4","modified":1692549013945},{"_id":"source/js/snow.js","hash":"bc7a5ad33051a21cda052118d945e8224507f06b","modified":1692548516153},{"_id":"source/link/index.md","hash":"9d3d3254f3088e07ee484b8c095443dd79b8c4d5","modified":1692455600248},{"_id":"source/movie/index.md","hash":"1549718a28b9519bab74c4e586e425d321cf5e02","modified":1692357093132},{"_id":"source/js/universe.js","hash":"ea22ec4b15698ad46493cf57cb3809cfae4bbf3d","modified":1692499649987},{"_id":"source/music/index.md","hash":"607cd2ac017fdff8cde017397cdcf0da3c1a8e4d","modified":1692357035493},{"_id":"source/tags/index.md","hash":"b67f8ea078a3a9f137d19ef4b7771a80615d2f92","modified":1692439220374},{"_id":"source/post_img/3.png","hash":"33a2d0035e58caa9f991b1eef721d06f58046ea4","modified":1692930548959},{"_id":"source/img/weixin.jpg","hash":"31775ce622941d1ece75319e56dc7898f352542a","modified":1692454175928},{"_id":"source/img/avatar.jpg","hash":"95cb9e7c7d8cae30f758f13ad88d86904255cdf1","modified":1692358667669},{"_id":"source/img/qq.jpg","hash":"6255466c5f251d75bf17f778908a6a3f5f2325ed","modified":1692454547584},{"_id":"source/post_img/4.png","hash":"ed4460fe32be67587fef41a1e94d24b28411c4c8","modified":1692981922582},{"_id":"source/post_img/5.png","hash":"35fc31f5e806bf655de01e92337f147ae03872bc","modified":1692982953074},{"_id":"source/post_img/1.png","hash":"fbdd445cad04d67ba9d0eb37ed45c31ceadaf563","modified":1692927475450},{"_id":"source/post_img/2.png","hash":"ff8b0fc560f4bd0a6b531f615f39702f2c1ef9ae","modified":1692930341992},{"_id":"source/img/night.jpg","hash":"6d485fe84361f66711d689bcace1e2c264435ae1","modified":1692541817675},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1692352835018},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1692352835024},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"656d8b548940d7d214459cd8853007af38e6c465","modified":1692352835015},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1692352834723},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1692352835527},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1692352835533},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1692352835535},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1692352835540},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1692352835059},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"abeb4126310169c8ef92d225f01fff1a4a0566bb","modified":1692536992353},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1692352835114},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1692352835297},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1692352835232},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1692352835547},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1692352835351},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1692352835531},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1692352835323},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1692352835542},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1692352835536},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1692352835029},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1692352835530},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1692352835544},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1692352835159},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"67deb9155e0cfea6dc9bdbdf133500f999658185","modified":1692540929109},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1692352835040},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"eb80bf853b4aada6ebe8dab10b7f54146592bf34","modified":1692541532941},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1692352835345},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1692352834978},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1692352834980},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1692352835300},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightmenu.pug","hash":"9e5358e7d946d13e5821307f9d8f5c29371f3826","modified":1692516793387},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1692352834896},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1692352834891},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"473f2bc52139dc6e1efa5febf0d3815e7389e9ba","modified":1692577018652},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1692352834927},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1692352834949},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1692352834974},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1692352834982},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1692352834904},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1692352834929},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1692352834942},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1692352834936},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1692352834957},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1692352834951},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1692352834970},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1692352834984},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1692352834993},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1692352834967},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1692352834857},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1692352834995},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1692352834914},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1692352834917},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1692352834945},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1692352834991},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1692352835010},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1692352835476},{"_id":"node_modules/hexo-theme-butterfly/source/css/mycss.css","hash":"77c47c76007f2dd11c2512a3bfaf34cc46a380c9","modified":1692579250668},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"68e72fc348bd59d055c543e8b0479601cedb2695","modified":1692544299952},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692352835026},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692352834842},{"_id":"node_modules/hexo-theme-butterfly/source/js/cat.js","hash":"938c541251a15ce50d2f53fbdc078d006e9612af","modified":1692540958584},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692352834822},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"7a669ea93f6de90763deed94269149ebc637ed6c","modified":1692577694669},{"_id":"node_modules/hexo-theme-butterfly/source/js/sun_moon.js","hash":"4359f7063f483f45a34c7a2d8e3b3d8f2509c331","modified":1692514822708},{"_id":"node_modules/hexo-theme-butterfly/source/js/rightmenu.js","hash":"2fd2824a608fbd30173d9c1f8c121cc97f7181c1","modified":1692517051130},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1692352834998},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/custom/sun_moon.pug","hash":"8924013bd2e1ae1bdfb33c4730a69a49107ebc39","modified":1692514667482},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1692352835003},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1692352835174},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1692352835290},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1692352835294},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1692352835123},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1692352835050},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1692352835127},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1692352835346},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1692352835329},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1692352835326},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1692352835182},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"bdc16979ba5493de60ae12f4b9cc2b2b068eaca1","modified":1692534358659},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1692551131637},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1692352835180},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1692352835348},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1692352835315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1692352835134},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1692352835161},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1692352835110},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1692352835295},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1692352835318},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1692352835338},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1692352835356},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1692352835312},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1692352835074},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1692352835057},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1692352835327},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1692352835155},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1692352835349},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1692352835147},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1692352835302},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1692352835077},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1692352835089},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"fc68300c927579c2094173f058d39caae0cb847b","modified":1692536458781},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1692352835084},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1692352835081},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1692352835305},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1a3132687898d0f753615fcb89f41dcdbd7c4818","modified":1692550045564},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1692352835091},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1692352835098},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1692352835093},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"18d395d6275d4118456f06ab4c4b4414e5e4ef09","modified":1692536604400},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1692352835100},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1692546975428},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1692352835096},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1692546819598},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1692352835227},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"901e25d98513881c4ed07658626152f62acae7b0","modified":1692547095500},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1692352835459},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1692352835517},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1692352835412},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1692352835500},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1692352835400},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"6010229df8902b9d7bf2eaff5fbd930c96732753","modified":1692547803661},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"d657b616e1d86e91b3e55a3b05211006e72ecb95","modified":1692546657093},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1692352835414},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1692352835483},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1692352835498},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1692352835507},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1692352835496},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1692352835503},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1692352835510},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1692352835512},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1692352835522},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sun_moon.styl","hash":"6d7b2f48e04dca561eaec6d8f5b02140106d0377","modified":1692514759047},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/web-bg.styl","hash":"f1c666a5e4b4151403e75a7ac53315c686013051","modified":1692547369296},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1692352835390},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1692352835396},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1692352835410},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1692352835516},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1692352835394},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1692352835416},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1692352835433},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1692352835461},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1692352835443},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1692352835467},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1692352835408},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1692352835484},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1692352835448},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1692352835478},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1692352835479},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1692352835450},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1692352835494},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1692352835514},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1692352835524},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1692352834756},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1692352834878},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1692352835033},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1692352835184},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1692352834960},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1692352835132},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1692352835358},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1692352835118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1692352835139},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1692352835195},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1692352835130},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1692352835192},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1692352835151},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1692352835331},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1692352835367},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1692352835379},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1692352835061},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1692352835362},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1692352835263},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1692352835149},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1692352835144},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1692352835141},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1692352835163},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1692352835165},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1692352835237},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1692352835364},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1692352835198},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1692352835246},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1692352835365},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1692352835065},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1692352835369},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1692352835333},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1692352835068},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1692352835381},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1692352835336},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1692352835209},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1692352835360},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1692352835375},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1692352835136},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1692352835167},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1692352835200},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1692352835241},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1692352835383},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1692352835045},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1692352835257},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1692352835251},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1692352835037},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1692352835146},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1692352835213},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1692352835248},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1692352835344},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1692352835042},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1692352835215},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1692352835427},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1692352835466},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1692352835464},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1692352835431},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1692352835481},{"_id":"public/css/custom.css","hash":"452723da5087984ebce7702a76c47e0f981a333e","modified":1721801784512},{"_id":"public/css/readPercent.css","hash":"e2fe2922d35c7391e6c878f8c9b0645e19bcfa29","modified":1721801784512},{"_id":"public/css/rightmenu.css","hash":"44ba0529110a25c66c904e9ead5b039d6d028ec1","modified":1721801784512},{"_id":"public/css/runtime.css","hash":"583cfcfeeeb0b96c1254cce8fff9cf8a9ac7d8b3","modified":1721801784512},{"_id":"public/css/universe.css","hash":"5da771baf876582c40d3334c3d3e50bcc95f725a","modified":1721801784512},{"_id":"public/js/cursor.js","hash":"6316a982d9eda75e43233530cb5d3ca66989b2e1","modified":1721801784512},{"_id":"public/js/readPercent.js","hash":"fe71a3426b6650058c0660925fcddfff8bc21a16","modified":1721801784512},{"_id":"public/js/fps.js","hash":"cd922033dac84ac1de4f1e2ec8b712ec4e830be5","modified":1721801784512},{"_id":"public/js/runtime.js","hash":"1820f3b1b7b9e86ac85dc91e9d40d1ba17eabdc2","modified":1721801784512},{"_id":"public/js/title.js","hash":"ab6500e90f775e3cd677cd16cbc2f6f5c6b6c936","modified":1721801784512},{"_id":"public/js/universe.js","hash":"fb0de0b3d7842d41b46dd113723dc77f82a4d530","modified":1721801784512},{"_id":"public/js/newYear.js","hash":"6841882fcce8498ba000bdc245ea13a580b2cd41","modified":1721801784512},{"_id":"public/js/snow.js","hash":"f4e3e0d3f0690f04a9645547eebd0d23b3821017","modified":1721801784512},{"_id":"public/search.xml","hash":"7600d6010ca3abca907020c677a1606be872e2f9","modified":1721801784512},{"_id":"public/about/index.html","hash":"99eb7e51d530965ce4cc3ac9c461b8fcd70e92e9","modified":1721801784512},{"_id":"public/categories/index.html","hash":"33e198361e9fb33e015df668ccc6b9fccf5b82a1","modified":1721801784512},{"_id":"public/link/index.html","hash":"4553bb9775301125e0af6e2b4f9ee39bf8cc49bd","modified":1721801784512},{"_id":"public/movie/index.html","hash":"1f584322fc5111edea93fd9f51436cbfd2df1505","modified":1721801784512},{"_id":"public/music/index.html","hash":"2c8f2f3bb3d91d5a9e5ad95994d88f46d85d62fe","modified":1721801784512},{"_id":"public/tags/index.html","hash":"572bdbfd17d757e55b2461f335eab9022a0dcb96","modified":1721801784512},{"_id":"public/2024/07/24/go网络编程/index.html","hash":"cef5c83ae08609dab6627fb5e6ccd619ade890ea","modified":1721801784512},{"_id":"public/2024/02/01/C++知识点回顾/index.html","hash":"9726d8d78314ce78ae61cd723025f59e9567ce81","modified":1721801784512},{"_id":"public/2024/02/01/golang知识点回顾/index.html","hash":"e3471f3650dd566c5b05fdf6fbaf6fda6d004043","modified":1721801784512},{"_id":"public/2024/02/01/redis/index.html","hash":"33ded4a817a757ce111987afd50077ff6c7962d5","modified":1721801784512},{"_id":"public/2024/02/01/raft/index.html","hash":"693de023e06f1162623d64c8dd011fb60c67fa7c","modified":1721801784512},{"_id":"public/2024/02/01/计算机网络知识点回顾/index.html","hash":"38ad83d286dfa45d450f1776d3811e5088a52731","modified":1721801784512},{"_id":"public/2024/01/05/linux常用命令/index.html","hash":"c6477c48379aae091a9858e4a6bb40875925b4c4","modified":1721801784512},{"_id":"public/2023/12/10/东软云his技术栈总结/index.html","hash":"4a1d145161284f3628d1e5cbd19d4319bebec508","modified":1721801784512},{"_id":"public/2023/08/25/操作系统1/index.html","hash":"b2d7910743016565179542f092dd8ac2cd0c7a65","modified":1721801784512},{"_id":"public/2023/08/19/array/index.html","hash":"4a5d0f75e3057e2a0424b7f17c0f1c8281849abb","modified":1721801784512},{"_id":"public/2023/08/18/binary-tree/index.html","hash":"fcda05c6688138de8e2e5823dabe4faea5ae8aaa","modified":1721801784512},{"_id":"public/comments/index.html","hash":"eaed8a41c62077880b394f636cf5d43e2c43f115","modified":1721801784512},{"_id":"public/archives/index.html","hash":"ef9c2f49de4d068b67b71d91c4ad1163786d76c5","modified":1721801784512},{"_id":"public/archives/page/2/index.html","hash":"2ed0c05ae19d9f235c1dd69814d18b7531f1c41c","modified":1721801784512},{"_id":"public/archives/2023/index.html","hash":"e31121911e8bfbf462247ea7f5afb644685256fe","modified":1721801784512},{"_id":"public/archives/2023/08/index.html","hash":"d56a9b0f525283a857dd3811f53ba495138b1a36","modified":1721801784512},{"_id":"public/archives/2023/12/index.html","hash":"3efa875718b08b4ed6904cd2d5a8a66575ecc523","modified":1721801784512},{"_id":"public/archives/2024/index.html","hash":"5b6aa009b2aebc3aad81340c7610bdbc2ecd1f40","modified":1721801784512},{"_id":"public/archives/2024/01/index.html","hash":"0943e7fc716c5b835902f25cfb8ccf247388e6b6","modified":1721801784512},{"_id":"public/index.html","hash":"ace31f9ee9940f0ebf89f64afcd84f93b03ba3fd","modified":1721801784512},{"_id":"public/archives/2024/02/index.html","hash":"168e6b7670a873f97e53f133dbb3593fac58b8df","modified":1721801784512},{"_id":"public/archives/2024/07/index.html","hash":"fc453ace44c226170bf0efdff25848746c2c75d0","modified":1721801784512},{"_id":"public/page/2/index.html","hash":"f030c75048582c962db8fb85bb2d764f9d32033f","modified":1721801784512},{"_id":"public/tags/C/index.html","hash":"f3a0fa6d4980586c8d581bdaf80273ada0e69869","modified":1721801784512},{"_id":"public/tags/数据结构/index.html","hash":"018ed614f68e28dd8f2fdc364f30bf8e2e908bf7","modified":1721801784512},{"_id":"public/tags/二叉树/index.html","hash":"ea5ee679ff07b285459cb0516422149e606bbdcb","modified":1721801784512},{"_id":"public/tags/redis/index.html","hash":"804fbc414cd30f0680257941d5e0801ddabac89b","modified":1721801784512},{"_id":"public/tags/分布式系统、一致性算法/index.html","hash":"4823fe16f60dc8005f90d69c583c31f8ce14fc8c","modified":1721801784512},{"_id":"public/tags/数组/index.html","hash":"500f798b60ebd002faa021148fade1c99d744340","modified":1721801784512},{"_id":"public/tags/操作系统/index.html","hash":"e608d6b1c444111066590686b97625b2431ac315","modified":1721801784512},{"_id":"public/tags/java-vue-springboot-mybatis-mysql/index.html","hash":"de28e62409840db14f9ceb18d23565c36d8ab49f","modified":1721801784512},{"_id":"public/tags/linux/index.html","hash":"d652eb62d0e8c78c59eb442599183f0eb287dd89","modified":1721801784512},{"_id":"public/tags/计算机网络/index.html","hash":"f28292c1c738e1b7df03f77c4a426a47266dee42","modified":1721801784512},{"_id":"public/img/computer.png","hash":"0e4a681c48a234b47c139caa93e4e504a08ea4ba","modified":1721801784512},{"_id":"public/post_img/3.png","hash":"33a2d0035e58caa9f991b1eef721d06f58046ea4","modified":1721801784512},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1721801784512},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1721801784512},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1721801784512},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1721801784512},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1721801784512},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1721801784512},{"_id":"public/img/weixin.jpg","hash":"31775ce622941d1ece75319e56dc7898f352542a","modified":1721801784512},{"_id":"public/img/qq.jpg","hash":"6255466c5f251d75bf17f778908a6a3f5f2325ed","modified":1721801784512},{"_id":"public/img/avatar.jpg","hash":"95cb9e7c7d8cae30f758f13ad88d86904255cdf1","modified":1721801784512},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1721801784512},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1721801784512},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1721801784512},{"_id":"public/css/mycss.css","hash":"9bfb6a43bccac3d55cf6d169a73d2e8eb99c13ad","modified":1721801784512},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721801784512},{"_id":"public/js/rightmenu.js","hash":"b7bd28179a5bbd56a35accb25fc6e8ffb2cded8b","modified":1721801784512},{"_id":"public/js/sun_moon.js","hash":"5ec88838d58c0eaf61bcabcb1714d467e1e8c62e","modified":1721801784512},{"_id":"public/js/cat.js","hash":"a5d6a26ab14df38adac10d1dae0ad2747eb127cc","modified":1721801784512},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1721801784512},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1721801784512},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1721801784512},{"_id":"public/js/main.js","hash":"7a669ea93f6de90763deed94269149ebc637ed6c","modified":1721801784512},{"_id":"public/css/index.css","hash":"8d824d45359db67031aa1ecff2f4f27ec6eed0fb","modified":1721801784512},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1721801784512},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1721801784512},{"_id":"public/post_img/4.png","hash":"ed4460fe32be67587fef41a1e94d24b28411c4c8","modified":1721801784512},{"_id":"public/post_img/5.png","hash":"35fc31f5e806bf655de01e92337f147ae03872bc","modified":1721801784512},{"_id":"public/post_img/1.png","hash":"fbdd445cad04d67ba9d0eb37ed45c31ceadaf563","modified":1721801784512},{"_id":"public/post_img/2.png","hash":"ff8b0fc560f4bd0a6b531f615f39702f2c1ef9ae","modified":1721801784512},{"_id":"public/img/night.jpg","hash":"6d485fe84361f66711d689bcace1e2c264435ae1","modified":1721801784512},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1721801784512}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}]},{"_id":"widget","data":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}],"Page":[{"title":"关于","date":"2023-08-18T11:10:00.000Z","_content":"\n### 一、个人简介\n性别男，03在读大学生,爱好打篮球、乒乓球，有一点点追星（kpop）\n目前主攻C++技术栈\n梦想成为高性能算法工程师（虽然很遥远😂） 希望了解一些计算机底层的技术\n\n### 二、建站目的\n记录一下日常生活和学习过程\n保存生活的点点滴滴，日子才更有盼头嘛😁\n\n![pika](https://images5.alphacoders.com/613/thumbbig-613927.webp)","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-8-18 19:10:00\n---\n\n### 一、个人简介\n性别男，03在读大学生,爱好打篮球、乒乓球，有一点点追星（kpop）\n目前主攻C++技术栈\n梦想成为高性能算法工程师（虽然很遥远😂） 希望了解一些计算机底层的技术\n\n### 二、建站目的\n记录一下日常生活和学习过程\n保存生活的点点滴滴，日子才更有盼头嘛😁\n\n![pika](https://images5.alphacoders.com/613/thumbbig-613927.webp)","updated":"2023-08-21T05:16:42.531Z","path":"about/index.html","comments":1,"layout":"page","_id":"clyzgbsod0000y0vmhfgm87yj","content":"<h3 id=\"一、个人简介\"><a href=\"#一、个人简介\" class=\"headerlink\" title=\"一、个人简介\"></a>一、个人简介</h3><p>性别男，03在读大学生,爱好打篮球、乒乓球，有一点点追星（kpop）<br>目前主攻C++技术栈<br>梦想成为高性能算法工程师（虽然很遥远😂） 希望了解一些计算机底层的技术</p>\n<h3 id=\"二、建站目的\"><a href=\"#二、建站目的\" class=\"headerlink\" title=\"二、建站目的\"></a>二、建站目的</h3><p>记录一下日常生活和学习过程<br>保存生活的点点滴滴，日子才更有盼头嘛😁</p>\n<p><img src=\"https://images5.alphacoders.com/613/thumbbig-613927.webp\" alt=\"pika\"></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"<h3 id=\"一、个人简介\"><a href=\"#一、个人简介\" class=\"headerlink\" title=\"一、个人简介\"></a>一、个人简介</h3><p>性别男，03在读大学生,爱好打篮球、乒乓球，有一点点追星（kpop）<br>目前主攻C++技术栈<br>梦想成为高性能算法工程师（虽然很遥远😂） 希望了解一些计算机底层的技术</p>\n<h3 id=\"二、建站目的\"><a href=\"#二、建站目的\" class=\"headerlink\" title=\"二、建站目的\"></a>二、建站目的</h3><p>记录一下日常生活和学习过程<br>保存生活的点点滴滴，日子才更有盼头嘛😁</p>\n<p><img src=\"https://images5.alphacoders.com/613/thumbbig-613927.webp\" alt=\"pika\"></p>\n"},{"title":"分类","date":"2023-08-19T10:03:00.000Z","type":"categories","top-img":"https://images6.alphacoders.com/128/thumbbig-1288241.webp","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-8-19 18:03:00\ntype: \"categories\"\ntop-img: https://images6.alphacoders.com/128/thumbbig-1288241.webp\n---","updated":"2023-08-19T10:03:35.507Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clyzgbsok0002y0vmfomjejmg","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":""},{"_content":"/* 鼠标样式 */\n#cursor {\n    position: fixed;\n    width: 16px;\n    height: 16px;\n    /* 这里改变跟随的底色 */\n    background: rgb(57, 197, 187);\n    border-radius: 8px;\n    opacity: 0.25;\n    z-index: 10086;\n    pointer-events: none;\n    transition: 0.2s ease-in-out;\n    transition-property: background, opacity, transform;\n  }\n  \n  #cursor.hidden {\n    opacity: 0;\n  }\n  \n  #cursor.hover {\n    opacity: 0.1;\n    transform: scale(2.5);\n    -webkit-transform: scale(2.5);\n    -moz-transform: scale(2.5);\n    -ms-transform: scale(2.5);\n    -o-transform: scale(2.5);\n  }\n  \n  #cursor.active {\n    opacity: 0.5;\n    transform: scale(0.5);\n    -webkit-transform: scale(0.5);\n    -moz-transform: scale(0.5);\n    -ms-transform: scale(0.5);\n    -o-transform: scale(0.5);\n  }\n\n  :root {\n    --trans-light: rgba(255, 255, 255, 0.88);\n    --trans-dark: rgba(25, 25, 25, 0.88);\n    --border-style: 1px solid rgb(169, 169, 169);\n    /*--backdrop-filter: blur(5px) saturate(150%);*/\n  }\n  \n  /* 首页文章卡片 */\n  #recent-posts > .recent-post-item {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 25px;\n    border: var(--border-style);\n  }\n  \n  /* 首页侧栏卡片 */\n  #aside-content .card-widget {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 18px;\n    border: var(--border-style);\n  }\n  \n  /* 文章页、归档页、普通页面 */\n  div#post,\n  div#page,\n  div#archive {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border: var(--border-style);\n    border-radius: 20px;\n  }\n  \n  /* 导航栏 */\n  #page-header.nav-fixed #nav {\n    background: rgba(255, 255, 255, 0.75);\n    backdrop-filter: var(--backdrop-filter);\n  }\n  \n  [data-theme=\"dark\"] #page-header.nav-fixed #nav {\n    background: rgba(0, 0, 0, 0.7) !important;\n  }\n  \n  /* 夜间模式遮罩 */\n  [data-theme=\"dark\"] #recent-posts > .recent-post-item,\n  [data-theme=\"dark\"] #aside-content .card-widget,\n  [data-theme=\"dark\"] div#post,\n  [data-theme=\"dark\"] div#archive,\n  [data-theme=\"dark\"] div#page {\n    background: var(--trans-dark);\n  }\n  \n  \n  /* 夜间模式页脚页头遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 阅读模式 */\n  .read-mode #aside-content .card-widget {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  .read-mode div#post {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  \n  /* 夜间模式下的阅读模式 */\n  [data-theme=\"dark\"] .read-mode #aside-content .card-widget {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n  [data-theme=\"dark\"] .read-mode div#post {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n\n  /* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 黑夜模式适配 */\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  background: #191919ee;\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n\n/* 页脚与头图透明 */\n#footer {\n  background: transparent !important;\n}\n#page-header {\n  background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n  background: transparent !important;\n}\n#page-header::before {\n  background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(5) .menus_item_child {\n  left: -38px;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n\n\n@font-face {\n  /* 为载入的字体取名字(随意) */\n  font-family: 'YSHST';\t\n  /* 字体文件地址(相对或者绝对路径都可以) */\n  src: url(/font/优设好身体.woff2);\n  /* 定义加粗样式(加粗多少) */\n  font-weight: normal;\n  /* 定义字体样式(斜体/非斜体) */\n  font-style: normal;\n  /* 定义显示样式 */\n  font-display: block;\n}\n\n/* 翻页按钮居中 */\n#pagination {\n  width: 100%;\n  margin: auto;\n}\n\n/* 引入Unicode Font-class的线上资源*/\n@import \"//at.alicdn.com/t/c/font_4217822_8n3z6c434px.css\";\n\n/* 图标大小 */\nsvg.icon {\n  width: 1.28em;\n  height: 1.28em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n\n/* 挂绳小猫咪 */\nbody::-webkit-scrollbar {\n  width: 0;\n}\n\n.neko {\n  width: 64px;\n  height: 64px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812db74be9.png\");\n  position: absolute;\n  right: 32px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  transform: translateX(50%);\n  cursor: pointer;\n  font-family: tzy;\n  font-weight: 600;\n  font-size: 16px;\n  color: #6f42c1;\n  display: none;\n}\n\n.neko::after {\n  display: none;\n  width: 100px;\n  height: 100px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812d95e6f5.png\");\n  background-size: contain;\n  z-index: 9999;\n  position: absolute;\n  right: 50%;\n  text-align: center;\n  line-height: 100px;\n  top: -115%;\n\n}\n\n.neko.showMsg::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko:hover::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko.fontColor::after {\n  color: #333;\n}\n\n/**\n* @description: 滚动条样式  跟猫二选一\n*/\n@media screen and (max-width:992px) {\n  ::-webkit-scrollbar {\n      width: 8px !important;\n      height: 8px !important\n  }\n\n  ::-webkit-scrollbar-track {\n      border-radius: 2em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n      background-color: rgb(255 255 255 / .3);\n      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);\n      border-radius: 2em\n  }\n\n  ::-webkit-scrollbar-corner {\n      background-color: transparent\n  }\n}\n\n\n/* 雪花特效 */\n[data-theme=\"light\"] #snow{\n  display: block;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -2;\n}\n\n/* 雪花黑夜模式不显示 */\n[data-theme=\"dark\"] #snow{\n  display: none;\n}\n\n\n/* 新年侧边栏 */\n\n#newYear {\n  color: white;\n  padding: 0 !important;\n}\n\n#newYear p,\n#newYear h3 {\n  font-weight: normal;\n  color: inherit;\n  margin: 0;\n}\n\n#newYear .item-headline {\n  display: none;\n}\n\n#newYear-main {\n  min-height: 160px;\n  padding: 1rem;\n  position: relative;\n  border-radius: 12px;\n  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);\n  background-size: cover;\n  background-position: center;\n}\n\n#newYear-main * {\n  position: relative;\n  line-height: 1.3;\n}\n\n#newYear-main .newYear-time {\n  font-weight: bold;\n  text-align: center;\n}\n\n#newYear-main .time,\n#newYear-main .happyNewYear {\n  font-size: 3.5rem;\n  margin: 1rem 0;\n  display: block;\n}\n\n#newYear-main .day {\n  font-size: 5rem;\n}\n\n#newYear-main .day .unit {\n  font-size: 1rem;\n}\n\n#newYear-main .mask {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, .1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--theme-color);\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-moz-selection {\n  color: #fff;\n  background-color: var(--theme-color);\n}\n\n/* 信息卡片彩带 */\n.author_top:hover {\n  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);\n  background-size: cover;\n}\n\n\n.card-info-avatar .author-status-box {\n  position: absolute;\n  bottom: 0;\n  left: calc(100% - 28px);\n  width: 28px;\n  height: 28px;\n  border: 1px solid #d0d7de;\n  border-radius: 2em;\n  background-color: #f8f8f8f8;\n  transition: 0.4s;\n  overflow: hidden;\n}\n\n[data-theme=\"dark\"] .card-info-avatar .author-status-box {\n  background-color: #222222f2;\n  border: 1px solid #5c6060;\n}\n\n.card-info-avatar .author-status-box .author-status {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  padding: 0 5px;\n}\n\n.card-info-avatar .author-status-box:hover {\n  width: 105px;\n}\n\n.card-info-avatar .author-status-box:hover .author-status span {\n  width: 105px;\n  margin-left: 4px;\n}\n\n.card-info-avatar .author-status-box .author-status span {\n  width: 0;\n  font-size: 12px;\n  height: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  transition: 0.4s;\n}\n\n.card-widget .card-info-avatar {\n  display: inline-block;\n  position: relative;\n}\n\n/* 头像呼吸灯 */\n[data-theme=\"light\"] .avatar-img {\n  animation: huxi_light 4s ease-in-out infinite;\n}\n[data-theme=\"dark\"] .avatar-img {\n  animation: huxi_dark 4s ease-in-out infinite;\n}\n@keyframes huxi_light {\n  0% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #e9f5fa;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n}\n@keyframes huxi_dark {\n  0% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #39c5bb;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n}\n\n/* 帧率检测 */\n#fps {\n  position: fixed;\n  /* 指定位置 */\n  left: 10px;\n  bottom: 10px;\n  z-index: 1919810;\n}\n[data-theme=\"light\"] #fps {\n  background-color: rgba(255, 255, 255, 0.85);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n[data-theme=\"dark\"] #fps {\n  background-color: rgba(0, 0, 0, 0.72);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n\n\n/* 顶部加载条 */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n\n","source":"css/custom.css","raw":"/* 鼠标样式 */\n#cursor {\n    position: fixed;\n    width: 16px;\n    height: 16px;\n    /* 这里改变跟随的底色 */\n    background: rgb(57, 197, 187);\n    border-radius: 8px;\n    opacity: 0.25;\n    z-index: 10086;\n    pointer-events: none;\n    transition: 0.2s ease-in-out;\n    transition-property: background, opacity, transform;\n  }\n  \n  #cursor.hidden {\n    opacity: 0;\n  }\n  \n  #cursor.hover {\n    opacity: 0.1;\n    transform: scale(2.5);\n    -webkit-transform: scale(2.5);\n    -moz-transform: scale(2.5);\n    -ms-transform: scale(2.5);\n    -o-transform: scale(2.5);\n  }\n  \n  #cursor.active {\n    opacity: 0.5;\n    transform: scale(0.5);\n    -webkit-transform: scale(0.5);\n    -moz-transform: scale(0.5);\n    -ms-transform: scale(0.5);\n    -o-transform: scale(0.5);\n  }\n\n  :root {\n    --trans-light: rgba(255, 255, 255, 0.88);\n    --trans-dark: rgba(25, 25, 25, 0.88);\n    --border-style: 1px solid rgb(169, 169, 169);\n    /*--backdrop-filter: blur(5px) saturate(150%);*/\n  }\n  \n  /* 首页文章卡片 */\n  #recent-posts > .recent-post-item {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 25px;\n    border: var(--border-style);\n  }\n  \n  /* 首页侧栏卡片 */\n  #aside-content .card-widget {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 18px;\n    border: var(--border-style);\n  }\n  \n  /* 文章页、归档页、普通页面 */\n  div#post,\n  div#page,\n  div#archive {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border: var(--border-style);\n    border-radius: 20px;\n  }\n  \n  /* 导航栏 */\n  #page-header.nav-fixed #nav {\n    background: rgba(255, 255, 255, 0.75);\n    backdrop-filter: var(--backdrop-filter);\n  }\n  \n  [data-theme=\"dark\"] #page-header.nav-fixed #nav {\n    background: rgba(0, 0, 0, 0.7) !important;\n  }\n  \n  /* 夜间模式遮罩 */\n  [data-theme=\"dark\"] #recent-posts > .recent-post-item,\n  [data-theme=\"dark\"] #aside-content .card-widget,\n  [data-theme=\"dark\"] div#post,\n  [data-theme=\"dark\"] div#archive,\n  [data-theme=\"dark\"] div#page {\n    background: var(--trans-dark);\n  }\n  \n  \n  /* 夜间模式页脚页头遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 阅读模式 */\n  .read-mode #aside-content .card-widget {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  .read-mode div#post {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  \n  /* 夜间模式下的阅读模式 */\n  [data-theme=\"dark\"] .read-mode #aside-content .card-widget {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n  [data-theme=\"dark\"] .read-mode div#post {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n\n  /* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 黑夜模式适配 */\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  background: #191919ee;\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n\n/* 页脚与头图透明 */\n#footer {\n  background: transparent !important;\n}\n#page-header {\n  background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n  background: transparent !important;\n}\n#page-header::before {\n  background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(5) .menus_item_child {\n  left: -38px;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n\n\n@font-face {\n  /* 为载入的字体取名字(随意) */\n  font-family: 'YSHST';\t\n  /* 字体文件地址(相对或者绝对路径都可以) */\n  src: url(/font/优设好身体.woff2);\n  /* 定义加粗样式(加粗多少) */\n  font-weight: normal;\n  /* 定义字体样式(斜体/非斜体) */\n  font-style: normal;\n  /* 定义显示样式 */\n  font-display: block;\n}\n\n/* 翻页按钮居中 */\n#pagination {\n  width: 100%;\n  margin: auto;\n}\n\n/* 引入Unicode Font-class的线上资源*/\n@import \"//at.alicdn.com/t/c/font_4217822_8n3z6c434px.css\";\n\n/* 图标大小 */\nsvg.icon {\n  width: 1.28em;\n  height: 1.28em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n\n/* 挂绳小猫咪 */\nbody::-webkit-scrollbar {\n  width: 0;\n}\n\n.neko {\n  width: 64px;\n  height: 64px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812db74be9.png\");\n  position: absolute;\n  right: 32px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  transform: translateX(50%);\n  cursor: pointer;\n  font-family: tzy;\n  font-weight: 600;\n  font-size: 16px;\n  color: #6f42c1;\n  display: none;\n}\n\n.neko::after {\n  display: none;\n  width: 100px;\n  height: 100px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812d95e6f5.png\");\n  background-size: contain;\n  z-index: 9999;\n  position: absolute;\n  right: 50%;\n  text-align: center;\n  line-height: 100px;\n  top: -115%;\n\n}\n\n.neko.showMsg::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko:hover::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko.fontColor::after {\n  color: #333;\n}\n\n/**\n* @description: 滚动条样式  跟猫二选一\n*/\n@media screen and (max-width:992px) {\n  ::-webkit-scrollbar {\n      width: 8px !important;\n      height: 8px !important\n  }\n\n  ::-webkit-scrollbar-track {\n      border-radius: 2em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n      background-color: rgb(255 255 255 / .3);\n      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);\n      border-radius: 2em\n  }\n\n  ::-webkit-scrollbar-corner {\n      background-color: transparent\n  }\n}\n\n\n/* 雪花特效 */\n[data-theme=\"light\"] #snow{\n  display: block;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -2;\n}\n\n/* 雪花黑夜模式不显示 */\n[data-theme=\"dark\"] #snow{\n  display: none;\n}\n\n\n/* 新年侧边栏 */\n\n#newYear {\n  color: white;\n  padding: 0 !important;\n}\n\n#newYear p,\n#newYear h3 {\n  font-weight: normal;\n  color: inherit;\n  margin: 0;\n}\n\n#newYear .item-headline {\n  display: none;\n}\n\n#newYear-main {\n  min-height: 160px;\n  padding: 1rem;\n  position: relative;\n  border-radius: 12px;\n  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);\n  background-size: cover;\n  background-position: center;\n}\n\n#newYear-main * {\n  position: relative;\n  line-height: 1.3;\n}\n\n#newYear-main .newYear-time {\n  font-weight: bold;\n  text-align: center;\n}\n\n#newYear-main .time,\n#newYear-main .happyNewYear {\n  font-size: 3.5rem;\n  margin: 1rem 0;\n  display: block;\n}\n\n#newYear-main .day {\n  font-size: 5rem;\n}\n\n#newYear-main .day .unit {\n  font-size: 1rem;\n}\n\n#newYear-main .mask {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, .1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--theme-color);\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-moz-selection {\n  color: #fff;\n  background-color: var(--theme-color);\n}\n\n/* 信息卡片彩带 */\n.author_top:hover {\n  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);\n  background-size: cover;\n}\n\n\n.card-info-avatar .author-status-box {\n  position: absolute;\n  bottom: 0;\n  left: calc(100% - 28px);\n  width: 28px;\n  height: 28px;\n  border: 1px solid #d0d7de;\n  border-radius: 2em;\n  background-color: #f8f8f8f8;\n  transition: 0.4s;\n  overflow: hidden;\n}\n\n[data-theme=\"dark\"] .card-info-avatar .author-status-box {\n  background-color: #222222f2;\n  border: 1px solid #5c6060;\n}\n\n.card-info-avatar .author-status-box .author-status {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  padding: 0 5px;\n}\n\n.card-info-avatar .author-status-box:hover {\n  width: 105px;\n}\n\n.card-info-avatar .author-status-box:hover .author-status span {\n  width: 105px;\n  margin-left: 4px;\n}\n\n.card-info-avatar .author-status-box .author-status span {\n  width: 0;\n  font-size: 12px;\n  height: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  transition: 0.4s;\n}\n\n.card-widget .card-info-avatar {\n  display: inline-block;\n  position: relative;\n}\n\n/* 头像呼吸灯 */\n[data-theme=\"light\"] .avatar-img {\n  animation: huxi_light 4s ease-in-out infinite;\n}\n[data-theme=\"dark\"] .avatar-img {\n  animation: huxi_dark 4s ease-in-out infinite;\n}\n@keyframes huxi_light {\n  0% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #e9f5fa;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n}\n@keyframes huxi_dark {\n  0% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #39c5bb;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n}\n\n/* 帧率检测 */\n#fps {\n  position: fixed;\n  /* 指定位置 */\n  left: 10px;\n  bottom: 10px;\n  z-index: 1919810;\n}\n[data-theme=\"light\"] #fps {\n  background-color: rgba(255, 255, 255, 0.85);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n[data-theme=\"dark\"] #fps {\n  background-color: rgba(0, 0, 0, 0.72);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n\n\n/* 顶部加载条 */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n\n","date":"2023-08-21T00:54:03.360Z","updated":"2023-08-21T00:54:03.360Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"clyzgbsoo0005y0vmb2b3bjra","content":"/* 鼠标样式 */\n#cursor {\n    position: fixed;\n    width: 16px;\n    height: 16px;\n    /* 这里改变跟随的底色 */\n    background: rgb(57, 197, 187);\n    border-radius: 8px;\n    opacity: 0.25;\n    z-index: 10086;\n    pointer-events: none;\n    transition: 0.2s ease-in-out;\n    transition-property: background, opacity, transform;\n  }\n  \n  #cursor.hidden {\n    opacity: 0;\n  }\n  \n  #cursor.hover {\n    opacity: 0.1;\n    transform: scale(2.5);\n    -webkit-transform: scale(2.5);\n    -moz-transform: scale(2.5);\n    -ms-transform: scale(2.5);\n    -o-transform: scale(2.5);\n  }\n  \n  #cursor.active {\n    opacity: 0.5;\n    transform: scale(0.5);\n    -webkit-transform: scale(0.5);\n    -moz-transform: scale(0.5);\n    -ms-transform: scale(0.5);\n    -o-transform: scale(0.5);\n  }\n\n  :root {\n    --trans-light: rgba(255, 255, 255, 0.88);\n    --trans-dark: rgba(25, 25, 25, 0.88);\n    --border-style: 1px solid rgb(169, 169, 169);\n    /*--backdrop-filter: blur(5px) saturate(150%);*/\n  }\n  \n  /* 首页文章卡片 */\n  #recent-posts > .recent-post-item {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 25px;\n    border: var(--border-style);\n  }\n  \n  /* 首页侧栏卡片 */\n  #aside-content .card-widget {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 18px;\n    border: var(--border-style);\n  }\n  \n  /* 文章页、归档页、普通页面 */\n  div#post,\n  div#page,\n  div#archive {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border: var(--border-style);\n    border-radius: 20px;\n  }\n  \n  /* 导航栏 */\n  #page-header.nav-fixed #nav {\n    background: rgba(255, 255, 255, 0.75);\n    backdrop-filter: var(--backdrop-filter);\n  }\n  \n  [data-theme=\"dark\"] #page-header.nav-fixed #nav {\n    background: rgba(0, 0, 0, 0.7) !important;\n  }\n  \n  /* 夜间模式遮罩 */\n  [data-theme=\"dark\"] #recent-posts > .recent-post-item,\n  [data-theme=\"dark\"] #aside-content .card-widget,\n  [data-theme=\"dark\"] div#post,\n  [data-theme=\"dark\"] div#archive,\n  [data-theme=\"dark\"] div#page {\n    background: var(--trans-dark);\n  }\n  \n  \n  /* 夜间模式页脚页头遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 阅读模式 */\n  .read-mode #aside-content .card-widget {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  .read-mode div#post {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  \n  /* 夜间模式下的阅读模式 */\n  [data-theme=\"dark\"] .read-mode #aside-content .card-widget {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n  [data-theme=\"dark\"] .read-mode div#post {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n\n  /* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 黑夜模式适配 */\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  background: #191919ee;\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n\n/* 页脚与头图透明 */\n#footer {\n  background: transparent !important;\n}\n#page-header {\n  background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n  background: transparent !important;\n}\n#page-header::before {\n  background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(5) .menus_item_child {\n  left: -38px;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n\n\n@font-face {\n  /* 为载入的字体取名字(随意) */\n  font-family: 'YSHST';\t\n  /* 字体文件地址(相对或者绝对路径都可以) */\n  src: url(/font/优设好身体.woff2);\n  /* 定义加粗样式(加粗多少) */\n  font-weight: normal;\n  /* 定义字体样式(斜体/非斜体) */\n  font-style: normal;\n  /* 定义显示样式 */\n  font-display: block;\n}\n\n/* 翻页按钮居中 */\n#pagination {\n  width: 100%;\n  margin: auto;\n}\n\n/* 引入Unicode Font-class的线上资源*/\n@import \"//at.alicdn.com/t/c/font_4217822_8n3z6c434px.css\";\n\n/* 图标大小 */\nsvg.icon {\n  width: 1.28em;\n  height: 1.28em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n\n/* 挂绳小猫咪 */\nbody::-webkit-scrollbar {\n  width: 0;\n}\n\n.neko {\n  width: 64px;\n  height: 64px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812db74be9.png\");\n  position: absolute;\n  right: 32px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  transform: translateX(50%);\n  cursor: pointer;\n  font-family: tzy;\n  font-weight: 600;\n  font-size: 16px;\n  color: #6f42c1;\n  display: none;\n}\n\n.neko::after {\n  display: none;\n  width: 100px;\n  height: 100px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812d95e6f5.png\");\n  background-size: contain;\n  z-index: 9999;\n  position: absolute;\n  right: 50%;\n  text-align: center;\n  line-height: 100px;\n  top: -115%;\n\n}\n\n.neko.showMsg::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko:hover::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko.fontColor::after {\n  color: #333;\n}\n\n/**\n* @description: 滚动条样式  跟猫二选一\n*/\n@media screen and (max-width:992px) {\n  ::-webkit-scrollbar {\n      width: 8px !important;\n      height: 8px !important\n  }\n\n  ::-webkit-scrollbar-track {\n      border-radius: 2em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n      background-color: rgb(255 255 255 / .3);\n      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);\n      border-radius: 2em\n  }\n\n  ::-webkit-scrollbar-corner {\n      background-color: transparent\n  }\n}\n\n\n/* 雪花特效 */\n[data-theme=\"light\"] #snow{\n  display: block;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -2;\n}\n\n/* 雪花黑夜模式不显示 */\n[data-theme=\"dark\"] #snow{\n  display: none;\n}\n\n\n/* 新年侧边栏 */\n\n#newYear {\n  color: white;\n  padding: 0 !important;\n}\n\n#newYear p,\n#newYear h3 {\n  font-weight: normal;\n  color: inherit;\n  margin: 0;\n}\n\n#newYear .item-headline {\n  display: none;\n}\n\n#newYear-main {\n  min-height: 160px;\n  padding: 1rem;\n  position: relative;\n  border-radius: 12px;\n  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);\n  background-size: cover;\n  background-position: center;\n}\n\n#newYear-main * {\n  position: relative;\n  line-height: 1.3;\n}\n\n#newYear-main .newYear-time {\n  font-weight: bold;\n  text-align: center;\n}\n\n#newYear-main .time,\n#newYear-main .happyNewYear {\n  font-size: 3.5rem;\n  margin: 1rem 0;\n  display: block;\n}\n\n#newYear-main .day {\n  font-size: 5rem;\n}\n\n#newYear-main .day .unit {\n  font-size: 1rem;\n}\n\n#newYear-main .mask {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, .1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--theme-color);\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-moz-selection {\n  color: #fff;\n  background-color: var(--theme-color);\n}\n\n/* 信息卡片彩带 */\n.author_top:hover {\n  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);\n  background-size: cover;\n}\n\n\n.card-info-avatar .author-status-box {\n  position: absolute;\n  bottom: 0;\n  left: calc(100% - 28px);\n  width: 28px;\n  height: 28px;\n  border: 1px solid #d0d7de;\n  border-radius: 2em;\n  background-color: #f8f8f8f8;\n  transition: 0.4s;\n  overflow: hidden;\n}\n\n[data-theme=\"dark\"] .card-info-avatar .author-status-box {\n  background-color: #222222f2;\n  border: 1px solid #5c6060;\n}\n\n.card-info-avatar .author-status-box .author-status {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  padding: 0 5px;\n}\n\n.card-info-avatar .author-status-box:hover {\n  width: 105px;\n}\n\n.card-info-avatar .author-status-box:hover .author-status span {\n  width: 105px;\n  margin-left: 4px;\n}\n\n.card-info-avatar .author-status-box .author-status span {\n  width: 0;\n  font-size: 12px;\n  height: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  transition: 0.4s;\n}\n\n.card-widget .card-info-avatar {\n  display: inline-block;\n  position: relative;\n}\n\n/* 头像呼吸灯 */\n[data-theme=\"light\"] .avatar-img {\n  animation: huxi_light 4s ease-in-out infinite;\n}\n[data-theme=\"dark\"] .avatar-img {\n  animation: huxi_dark 4s ease-in-out infinite;\n}\n@keyframes huxi_light {\n  0% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #e9f5fa;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n}\n@keyframes huxi_dark {\n  0% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #39c5bb;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n}\n\n/* 帧率检测 */\n#fps {\n  position: fixed;\n  /* 指定位置 */\n  left: 10px;\n  bottom: 10px;\n  z-index: 1919810;\n}\n[data-theme=\"light\"] #fps {\n  background-color: rgba(255, 255, 255, 0.85);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n[data-theme=\"dark\"] #fps {\n  background-color: rgba(0, 0, 0, 0.72);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n\n\n/* 顶部加载条 */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"/* 鼠标样式 */\n#cursor {\n    position: fixed;\n    width: 16px;\n    height: 16px;\n    /* 这里改变跟随的底色 */\n    background: rgb(57, 197, 187);\n    border-radius: 8px;\n    opacity: 0.25;\n    z-index: 10086;\n    pointer-events: none;\n    transition: 0.2s ease-in-out;\n    transition-property: background, opacity, transform;\n  }\n  \n  #cursor.hidden {\n    opacity: 0;\n  }\n  \n  #cursor.hover {\n    opacity: 0.1;\n    transform: scale(2.5);\n    -webkit-transform: scale(2.5);\n    -moz-transform: scale(2.5);\n    -ms-transform: scale(2.5);\n    -o-transform: scale(2.5);\n  }\n  \n  #cursor.active {\n    opacity: 0.5;\n    transform: scale(0.5);\n    -webkit-transform: scale(0.5);\n    -moz-transform: scale(0.5);\n    -ms-transform: scale(0.5);\n    -o-transform: scale(0.5);\n  }\n\n  :root {\n    --trans-light: rgba(255, 255, 255, 0.88);\n    --trans-dark: rgba(25, 25, 25, 0.88);\n    --border-style: 1px solid rgb(169, 169, 169);\n    /*--backdrop-filter: blur(5px) saturate(150%);*/\n  }\n  \n  /* 首页文章卡片 */\n  #recent-posts > .recent-post-item {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 25px;\n    border: var(--border-style);\n  }\n  \n  /* 首页侧栏卡片 */\n  #aside-content .card-widget {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border-radius: 18px;\n    border: var(--border-style);\n  }\n  \n  /* 文章页、归档页、普通页面 */\n  div#post,\n  div#page,\n  div#archive {\n    background: var(--trans-light);\n    backdrop-filter: var(--backdrop-filter);\n    border: var(--border-style);\n    border-radius: 20px;\n  }\n  \n  /* 导航栏 */\n  #page-header.nav-fixed #nav {\n    background: rgba(255, 255, 255, 0.75);\n    backdrop-filter: var(--backdrop-filter);\n  }\n  \n  [data-theme=\"dark\"] #page-header.nav-fixed #nav {\n    background: rgba(0, 0, 0, 0.7) !important;\n  }\n  \n  /* 夜间模式遮罩 */\n  [data-theme=\"dark\"] #recent-posts > .recent-post-item,\n  [data-theme=\"dark\"] #aside-content .card-widget,\n  [data-theme=\"dark\"] div#post,\n  [data-theme=\"dark\"] div#archive,\n  [data-theme=\"dark\"] div#page {\n    background: var(--trans-dark);\n  }\n  \n  \n  /* 夜间模式页脚页头遮罩透明 */\n  [data-theme=\"dark\"] #footer::before {\n    background: transparent !important;\n  }\n  [data-theme=\"dark\"] #page-header::before {\n    background: transparent !important;\n  }\n  \n  /* 阅读模式 */\n  .read-mode #aside-content .card-widget {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  .read-mode div#post {\n    background: rgba(158, 204, 171, 0.5) !important;\n  }\n  \n  /* 夜间模式下的阅读模式 */\n  [data-theme=\"dark\"] .read-mode #aside-content .card-widget {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n  [data-theme=\"dark\"] .read-mode div#post {\n    background: rgba(25, 25, 25, 0.9) !important;\n    color: #ffffff;\n  }\n\n  /* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 黑夜模式适配 */\n[data-theme=\"dark\"] #aside-content > .card-widget.card-info {\n  background: #191919ee;\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n\n/* 页脚与头图透明 */\n#footer {\n  background: transparent !important;\n}\n#page-header {\n  background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n  background: transparent !important;\n}\n#page-header::before {\n  background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n\n\n/* 一级菜单居中 */\n#nav .menus_items {\n  position: absolute !important;\n  width: fit-content !important;\n  left: 50% !important;\n  transform: translateX(-50%) !important;\n}\n/* 子菜单横向展示 */\n#nav .menus_items .menus_item:hover .menus_item_child {\n  display: flex !important;\n}\n/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */\n.menus_items .menus_item:nth-child(5) .menus_item_child {\n  left: -38px;\n}\n\n\n/* 日间模式不生效 */\n[data-theme=\"light\"] #site-name,\n[data-theme=\"light\"] #site-title,\n[data-theme=\"light\"] #site-subtitle,\n[data-theme=\"light\"] #post-info {\n  animation: none;\n}\n/* 夜间模式生效 */\n[data-theme=\"dark\"] #site-name,\n[data-theme=\"dark\"] #site-title {\n  animation: light_15px 10s linear infinite;\n}\n[data-theme=\"dark\"] #site-subtitle {\n  animation: light_10px 10s linear infinite;\n}\n[data-theme=\"dark\"] #post-info {\n  animation: light_5px 10s linear infinite;\n}\n/* 关键帧描述 */\n@keyframes light_15px {\n  0% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 15px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 15px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 15px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 15px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 15px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 15px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 15px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 15px;\n  }\n}\n\n@keyframes light_10px {\n  0% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 10px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 10px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 10px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 10px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 10px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 10px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 10px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 10px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 10px;\n  }\n}\n\n@keyframes light_5px {\n  0% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n  12.5% {\n    text-shadow: #11ee5e 0 0 5px;\n  }\n  25% {\n    text-shadow: #f14747 0 0 5px;\n  }\n  37.5% {\n    text-shadow: #f1a247 0 0 15px;\n  }\n  50% {\n    text-shadow: #f1ee47 0 0 5px;\n  }\n  50% {\n    text-shadow: #b347f1 0 0 5px;\n  }\n  62.5% {\n    text-shadow: #002afa 0 0 5px;\n  }\n  75% {\n    text-shadow: #ed709b 0 0 5px;\n  }\n  87.5% {\n    text-shadow: #39c5bb 0 0 5px;\n  }\n  100% {\n    text-shadow: #5636ed 0 0 5px;\n  }\n}\n\n\n@font-face {\n  /* 为载入的字体取名字(随意) */\n  font-family: 'YSHST';\t\n  /* 字体文件地址(相对或者绝对路径都可以) */\n  src: url(/font/优设好身体.woff2);\n  /* 定义加粗样式(加粗多少) */\n  font-weight: normal;\n  /* 定义字体样式(斜体/非斜体) */\n  font-style: normal;\n  /* 定义显示样式 */\n  font-display: block;\n}\n\n/* 翻页按钮居中 */\n#pagination {\n  width: 100%;\n  margin: auto;\n}\n\n/* 引入Unicode Font-class的线上资源*/\n@import \"//at.alicdn.com/t/c/font_4217822_8n3z6c434px.css\";\n\n/* 图标大小 */\nsvg.icon {\n  width: 1.28em;\n  height: 1.28em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n\n/* 挂绳小猫咪 */\nbody::-webkit-scrollbar {\n  width: 0;\n}\n\n.neko {\n  width: 64px;\n  height: 64px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812db74be9.png\");\n  position: absolute;\n  right: 32px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  transform: translateX(50%);\n  cursor: pointer;\n  font-family: tzy;\n  font-weight: 600;\n  font-size: 16px;\n  color: #6f42c1;\n  display: none;\n}\n\n.neko::after {\n  display: none;\n  width: 100px;\n  height: 100px;\n  background-image: url(\"https://bu.dusays.com/2022/07/20/62d812d95e6f5.png\");\n  background-size: contain;\n  z-index: 9999;\n  position: absolute;\n  right: 50%;\n  text-align: center;\n  line-height: 100px;\n  top: -115%;\n\n}\n\n.neko.showMsg::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko:hover::after {\n  content: attr(data-msg);\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.neko.fontColor::after {\n  color: #333;\n}\n\n/**\n* @description: 滚动条样式  跟猫二选一\n*/\n@media screen and (max-width:992px) {\n  ::-webkit-scrollbar {\n      width: 8px !important;\n      height: 8px !important\n  }\n\n  ::-webkit-scrollbar-track {\n      border-radius: 2em;\n  }\n\n  ::-webkit-scrollbar-thumb {\n      background-color: rgb(255 255 255 / .3);\n      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);\n      border-radius: 2em\n  }\n\n  ::-webkit-scrollbar-corner {\n      background-color: transparent\n  }\n}\n\n\n/* 雪花特效 */\n[data-theme=\"light\"] #snow{\n  display: block;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -2;\n}\n\n/* 雪花黑夜模式不显示 */\n[data-theme=\"dark\"] #snow{\n  display: none;\n}\n\n\n/* 新年侧边栏 */\n\n#newYear {\n  color: white;\n  padding: 0 !important;\n}\n\n#newYear p,\n#newYear h3 {\n  font-weight: normal;\n  color: inherit;\n  margin: 0;\n}\n\n#newYear .item-headline {\n  display: none;\n}\n\n#newYear-main {\n  min-height: 160px;\n  padding: 1rem;\n  position: relative;\n  border-radius: 12px;\n  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);\n  background-size: cover;\n  background-position: center;\n}\n\n#newYear-main * {\n  position: relative;\n  line-height: 1.3;\n}\n\n#newYear-main .newYear-time {\n  font-weight: bold;\n  text-align: center;\n}\n\n#newYear-main .time,\n#newYear-main .happyNewYear {\n  font-size: 3.5rem;\n  margin: 1rem 0;\n  display: block;\n}\n\n#newYear-main .day {\n  font-size: 5rem;\n}\n\n#newYear-main .day .unit {\n  font-size: 1rem;\n}\n\n#newYear-main .mask {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, .1);\n}\n\n/* 滚动条样式 */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(73, 177, 245, 0.2);\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: var(--theme-color);\n  background-image: -webkit-linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0.4) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 75%,\n    transparent 75%,\n    transparent\n  );\n  border-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-moz-selection {\n  color: #fff;\n  background-color: var(--theme-color);\n}\n\n/* 信息卡片彩带 */\n.author_top:hover {\n  background: url(https://tuchuang.voooe.cn/images/2023/01/02/snow.gif);\n  background-size: cover;\n}\n\n\n.card-info-avatar .author-status-box {\n  position: absolute;\n  bottom: 0;\n  left: calc(100% - 28px);\n  width: 28px;\n  height: 28px;\n  border: 1px solid #d0d7de;\n  border-radius: 2em;\n  background-color: #f8f8f8f8;\n  transition: 0.4s;\n  overflow: hidden;\n}\n\n[data-theme=\"dark\"] .card-info-avatar .author-status-box {\n  background-color: #222222f2;\n  border: 1px solid #5c6060;\n}\n\n.card-info-avatar .author-status-box .author-status {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  padding: 0 5px;\n}\n\n.card-info-avatar .author-status-box:hover {\n  width: 105px;\n}\n\n.card-info-avatar .author-status-box:hover .author-status span {\n  width: 105px;\n  margin-left: 4px;\n}\n\n.card-info-avatar .author-status-box .author-status span {\n  width: 0;\n  font-size: 12px;\n  height: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  transition: 0.4s;\n}\n\n.card-widget .card-info-avatar {\n  display: inline-block;\n  position: relative;\n}\n\n/* 头像呼吸灯 */\n[data-theme=\"light\"] .avatar-img {\n  animation: huxi_light 4s ease-in-out infinite;\n}\n[data-theme=\"dark\"] .avatar-img {\n  animation: huxi_dark 4s ease-in-out infinite;\n}\n@keyframes huxi_light {\n  0% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #e9f5fa;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #e9f5fa;\n  }\n}\n@keyframes huxi_dark {\n  0% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n  50% {\n    box-shadow: 0px 0px 5px 5px #39c5bb;\n  }\n  100% {\n    box-shadow: 0px 0px 1px 1px #39c5bb;\n  }\n}\n\n/* 帧率检测 */\n#fps {\n  position: fixed;\n  /* 指定位置 */\n  left: 10px;\n  bottom: 10px;\n  z-index: 1919810;\n}\n[data-theme=\"light\"] #fps {\n  background-color: rgba(255, 255, 255, 0.85);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n[data-theme=\"dark\"] #fps {\n  background-color: rgba(0, 0, 0, 0.72);\n  backdrop-filter: var(--backdrop-filter);\n  padding: 4px;\n  border-radius: 4px;\n}\n\n\n/* 顶部加载条 */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n\n"},{"_content":"/* 返回顶部 */\n\nbutton#go-up #percent {\n    display: none;\n    font-weight: bold;\n    font-size: 15px !important;\n}\n\nbutton#go-up span {\n    font-size: 12px!important;\n    margin-right: -1px;\n}\n\n/* 鼠标滑动到按钮上时显示返回顶部图标 */\nbutton#go-up:hover i {\n    display: block !important;\n}\n\nbutton#go-up:hover #percent {\n    display: none !important;\n}\n","source":"css/readPercent.css","raw":"/* 返回顶部 */\n\nbutton#go-up #percent {\n    display: none;\n    font-weight: bold;\n    font-size: 15px !important;\n}\n\nbutton#go-up span {\n    font-size: 12px!important;\n    margin-right: -1px;\n}\n\n/* 鼠标滑动到按钮上时显示返回顶部图标 */\nbutton#go-up:hover i {\n    display: block !important;\n}\n\nbutton#go-up:hover #percent {\n    display: none !important;\n}\n","date":"2023-08-21T00:05:53.517Z","updated":"2023-08-21T00:05:53.517Z","path":"css/readPercent.css","layout":"false","title":"","comments":1,"_id":"clyzgbsoq0007y0vm1hnj4zkt","content":"/* 返回顶部 */\n\nbutton#go-up #percent {\n    display: none;\n    font-weight: bold;\n    font-size: 15px !important;\n}\n\nbutton#go-up span {\n    font-size: 12px!important;\n    margin-right: -1px;\n}\n\n/* 鼠标滑动到按钮上时显示返回顶部图标 */\nbutton#go-up:hover i {\n    display: block !important;\n}\n\nbutton#go-up:hover #percent {\n    display: none !important;\n}\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"/* 返回顶部 */\n\nbutton#go-up #percent {\n    display: none;\n    font-weight: bold;\n    font-size: 15px !important;\n}\n\nbutton#go-up span {\n    font-size: 12px!important;\n    margin-right: -1px;\n}\n\n/* 鼠标滑动到按钮上时显示返回顶部图标 */\nbutton#go-up:hover i {\n    display: block !important;\n}\n\nbutton#go-up:hover #percent {\n    display: none !important;\n}\n"},{"_content":"/* 右键菜单 */\n#rightMenu {\n    display: none;\n    position: fixed;\n    width: 160px;\n    height: fit-content;\n    top: 10%;\n    left: 10%;\n      /* 菜单面板背景色 */\n    background-color: var(--card-bg);\n      /* 菜单面板文字颜色 */\n    border: 1px solid var(--font-color);\n    border-radius: 8px;\n    z-index: 100;\n  }\n  #rightMenu .rightMenu-group {\n    padding: 7px 6px;\n  }\n  #rightMenu .rightMenu-group:not(:nth-last-child(1)) {\n    border-bottom: 1px solid var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-small {\n    display: flex;\n    justify-content: space-between;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item {\n    height: 30px;\n    line-height: 30px;\n    border-radius: 8px;\n    transition: 0.3s;\n    color: var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {\n    display: flex;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 4px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item:hover {\n      /* 鼠标悬浮选项颜色 */\n    background-color: var(--text-bg-hover);\n  }\n  #rightMenu .rightMenu-group .rightMenu-item i {\n    display: inline-block;\n    text-align: center;\n    line-height: 30px;\n    width: 30px;\n    height: 30px;\n    padding: 0 5px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item span {\n    line-height: 30px;\n  }\n  \n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {\n    height: 40px;\n    line-height: 40px;\n  }\n  .rightMenu-group.hide {\n    display: none;\n  }","source":"css/rightmenu.css","raw":"/* 右键菜单 */\n#rightMenu {\n    display: none;\n    position: fixed;\n    width: 160px;\n    height: fit-content;\n    top: 10%;\n    left: 10%;\n      /* 菜单面板背景色 */\n    background-color: var(--card-bg);\n      /* 菜单面板文字颜色 */\n    border: 1px solid var(--font-color);\n    border-radius: 8px;\n    z-index: 100;\n  }\n  #rightMenu .rightMenu-group {\n    padding: 7px 6px;\n  }\n  #rightMenu .rightMenu-group:not(:nth-last-child(1)) {\n    border-bottom: 1px solid var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-small {\n    display: flex;\n    justify-content: space-between;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item {\n    height: 30px;\n    line-height: 30px;\n    border-radius: 8px;\n    transition: 0.3s;\n    color: var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {\n    display: flex;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 4px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item:hover {\n      /* 鼠标悬浮选项颜色 */\n    background-color: var(--text-bg-hover);\n  }\n  #rightMenu .rightMenu-group .rightMenu-item i {\n    display: inline-block;\n    text-align: center;\n    line-height: 30px;\n    width: 30px;\n    height: 30px;\n    padding: 0 5px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item span {\n    line-height: 30px;\n  }\n  \n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {\n    height: 40px;\n    line-height: 40px;\n  }\n  .rightMenu-group.hide {\n    display: none;\n  }","date":"2023-08-20T07:36:10.543Z","updated":"2023-08-20T07:36:10.543Z","path":"css/rightmenu.css","layout":"false","title":"","comments":1,"_id":"clyzgbsor0009y0vmcj3hdwd8","content":"/* 右键菜单 */\n#rightMenu {\n    display: none;\n    position: fixed;\n    width: 160px;\n    height: fit-content;\n    top: 10%;\n    left: 10%;\n      /* 菜单面板背景色 */\n    background-color: var(--card-bg);\n      /* 菜单面板文字颜色 */\n    border: 1px solid var(--font-color);\n    border-radius: 8px;\n    z-index: 100;\n  }\n  #rightMenu .rightMenu-group {\n    padding: 7px 6px;\n  }\n  #rightMenu .rightMenu-group:not(:nth-last-child(1)) {\n    border-bottom: 1px solid var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-small {\n    display: flex;\n    justify-content: space-between;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item {\n    height: 30px;\n    line-height: 30px;\n    border-radius: 8px;\n    transition: 0.3s;\n    color: var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {\n    display: flex;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 4px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item:hover {\n      /* 鼠标悬浮选项颜色 */\n    background-color: var(--text-bg-hover);\n  }\n  #rightMenu .rightMenu-group .rightMenu-item i {\n    display: inline-block;\n    text-align: center;\n    line-height: 30px;\n    width: 30px;\n    height: 30px;\n    padding: 0 5px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item span {\n    line-height: 30px;\n  }\n  \n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {\n    height: 40px;\n    line-height: 40px;\n  }\n  .rightMenu-group.hide {\n    display: none;\n  }","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"/* 右键菜单 */\n#rightMenu {\n    display: none;\n    position: fixed;\n    width: 160px;\n    height: fit-content;\n    top: 10%;\n    left: 10%;\n      /* 菜单面板背景色 */\n    background-color: var(--card-bg);\n      /* 菜单面板文字颜色 */\n    border: 1px solid var(--font-color);\n    border-radius: 8px;\n    z-index: 100;\n  }\n  #rightMenu .rightMenu-group {\n    padding: 7px 6px;\n  }\n  #rightMenu .rightMenu-group:not(:nth-last-child(1)) {\n    border-bottom: 1px solid var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-small {\n    display: flex;\n    justify-content: space-between;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item {\n    height: 30px;\n    line-height: 30px;\n    border-radius: 8px;\n    transition: 0.3s;\n    color: var(--font-color);\n  }\n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {\n    display: flex;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 4px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item:hover {\n      /* 鼠标悬浮选项颜色 */\n    background-color: var(--text-bg-hover);\n  }\n  #rightMenu .rightMenu-group .rightMenu-item i {\n    display: inline-block;\n    text-align: center;\n    line-height: 30px;\n    width: 30px;\n    height: 30px;\n    padding: 0 5px;\n  }\n  #rightMenu .rightMenu-group .rightMenu-item span {\n    line-height: 30px;\n  }\n  \n  #rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {\n    height: 40px;\n    line-height: 40px;\n  }\n  .rightMenu-group.hide {\n    display: none;\n  }"},{"_content":"/*电子钟字体*/\n@font-face {\n    font-family: 'UnidreamLED';\n    src: url(\"https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf\");\n    font-display: swap;\n  }\n  div#runtime {\n    width: 180px;\n    margin: auto;\n    color: #fff;\n    padding-inline: 5px;\n    border-radius: 10px;\n    background-color: rgba(0,0,0,0.7);\n    font-family: 'UnidreamLED';\n  }\n  [data-theme=\"dark\"] div#runtime {\n    color: #28b4c8;\n    box-shadow: 0 0 5px rgba(28,69,218,0.71);\n    animation: flashlight 1s linear infinite alternate;\n  }\n  /*悬停显示徽标提示语*/\n  a.github-badge:hover:before {\n    position: fixed;\n    width: fit-content;\n    margin: auto;\n    left: 0;\n    right: 0;\n    top: 10%;\n    border-radius: 10px;\n    text-align: center;\n    z-index: 100;\n    content: attr(data-title);\n    font-size: 20px;\n    color: #fff;\n    padding: 10px;\n    background-color: var(--text-bg-hover);\n  }\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8);\n  }\n  @-moz-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-webkit-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-o-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }","source":"css/runtime.css","raw":"/*电子钟字体*/\n@font-face {\n    font-family: 'UnidreamLED';\n    src: url(\"https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf\");\n    font-display: swap;\n  }\n  div#runtime {\n    width: 180px;\n    margin: auto;\n    color: #fff;\n    padding-inline: 5px;\n    border-radius: 10px;\n    background-color: rgba(0,0,0,0.7);\n    font-family: 'UnidreamLED';\n  }\n  [data-theme=\"dark\"] div#runtime {\n    color: #28b4c8;\n    box-shadow: 0 0 5px rgba(28,69,218,0.71);\n    animation: flashlight 1s linear infinite alternate;\n  }\n  /*悬停显示徽标提示语*/\n  a.github-badge:hover:before {\n    position: fixed;\n    width: fit-content;\n    margin: auto;\n    left: 0;\n    right: 0;\n    top: 10%;\n    border-radius: 10px;\n    text-align: center;\n    z-index: 100;\n    content: attr(data-title);\n    font-size: 20px;\n    color: #fff;\n    padding: 10px;\n    background-color: var(--text-bg-hover);\n  }\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8);\n  }\n  @-moz-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-webkit-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-o-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }","date":"2023-08-20T06:03:10.158Z","updated":"2023-08-20T06:03:10.158Z","path":"css/runtime.css","layout":"false","title":"","comments":1,"_id":"clyzgbsou000dy0vm4agmhnun","content":"/*电子钟字体*/\n@font-face {\n    font-family: 'UnidreamLED';\n    src: url(\"https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf\");\n    font-display: swap;\n  }\n  div#runtime {\n    width: 180px;\n    margin: auto;\n    color: #fff;\n    padding-inline: 5px;\n    border-radius: 10px;\n    background-color: rgba(0,0,0,0.7);\n    font-family: 'UnidreamLED';\n  }\n  [data-theme=\"dark\"] div#runtime {\n    color: #28b4c8;\n    box-shadow: 0 0 5px rgba(28,69,218,0.71);\n    animation: flashlight 1s linear infinite alternate;\n  }\n  /*悬停显示徽标提示语*/\n  a.github-badge:hover:before {\n    position: fixed;\n    width: fit-content;\n    margin: auto;\n    left: 0;\n    right: 0;\n    top: 10%;\n    border-radius: 10px;\n    text-align: center;\n    z-index: 100;\n    content: attr(data-title);\n    font-size: 20px;\n    color: #fff;\n    padding: 10px;\n    background-color: var(--text-bg-hover);\n  }\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8);\n  }\n  @-moz-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-webkit-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-o-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"/*电子钟字体*/\n@font-face {\n    font-family: 'UnidreamLED';\n    src: url(\"https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf\");\n    font-display: swap;\n  }\n  div#runtime {\n    width: 180px;\n    margin: auto;\n    color: #fff;\n    padding-inline: 5px;\n    border-radius: 10px;\n    background-color: rgba(0,0,0,0.7);\n    font-family: 'UnidreamLED';\n  }\n  [data-theme=\"dark\"] div#runtime {\n    color: #28b4c8;\n    box-shadow: 0 0 5px rgba(28,69,218,0.71);\n    animation: flashlight 1s linear infinite alternate;\n  }\n  /*悬停显示徽标提示语*/\n  a.github-badge:hover:before {\n    position: fixed;\n    width: fit-content;\n    margin: auto;\n    left: 0;\n    right: 0;\n    top: 10%;\n    border-radius: 10px;\n    text-align: center;\n    z-index: 100;\n    content: attr(data-title);\n    font-size: 20px;\n    color: #fff;\n    padding: 10px;\n    background-color: var(--text-bg-hover);\n  }\n  [data-theme=dark] a.github-badge:hover:before {\n    background-color: rgba(18,18,18,0.8);\n  }\n  @-moz-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-webkit-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @-o-keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }\n  @keyframes flashlight {\n    from {\n      box-shadow: 0 0 5px #1478d2;\n    }\n    to {\n      box-shadow: 0 0 2px #1478d2;\n    }\n  }"},{"_content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","source":"css/universe.css","raw":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","date":"2023-08-20T02:47:39.684Z","updated":"2023-08-20T02:47:39.684Z","path":"css/universe.css","layout":"false","title":"","comments":1,"_id":"clyzgbsov000fy0vm71ufamnj","content":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"/* 背景宇宙星光  */\n#universe{\n    display: block;\n    position: fixed;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */\n    z-index: -1;\n  }"},{"_content":"var CURSOR;\n\nMath.lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst getStyle = (el, attr) => {\n    try {\n        return window.getComputedStyle\n            ? window.getComputedStyle(el)[attr]\n            : el.currentStyle[attr];\n    } catch (e) {}\n    return \"\";\n};\n\nclass Cursor {\n    constructor() {\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    move(left, top) {\n        this.cursor.style[\"left\"] = `${left}px`;\n        this.cursor.style[\"top\"] = `${top}px`;\n    }\n\n    create() {\n        if (!this.cursor) {\n            this.cursor = document.createElement(\"div\");\n            this.cursor.id = \"cursor\";\n            this.cursor.classList.add(\"hidden\");\n            document.body.append(this.cursor);\n        }\n\n        var el = document.getElementsByTagName('*');\n        for (let i = 0; i < el.length; i++)\n            if (getStyle(el[i], \"cursor\") == \"pointer\")\n                this.pt.push(el[i].outerHTML);\n\n        document.body.appendChild((this.scr = document.createElement(\"style\")));\n        // 这里改变鼠标指针的颜色 由svg生成\n        this.scr.innerHTML = `* {cursor: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>\") 4 4, auto}`;\n    }\n\n    refresh() {\n        this.scr.remove();\n        this.cursor.classList.remove(\"hover\");\n        this.cursor.classList.remove(\"active\");\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    init() {\n        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add(\"hover\");\n        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove(\"hover\");\n        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove(\"hidden\");};\n        document.onmouseenter = e => this.cursor.classList.remove(\"hidden\");\n        document.onmouseleave = e => this.cursor.classList.add(\"hidden\");\n        document.onmousedown  = e => this.cursor.classList.add(\"active\");\n        document.onmouseup    = e => this.cursor.classList.remove(\"active\");\n    }\n\n    render() {\n        if (this.pos.prev) {\n            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);\n            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);\n            this.move(this.pos.prev.x, this.pos.prev.y);\n        } else {\n            this.pos.prev = this.pos.curr;\n        }\n        requestAnimationFrame(() => this.render());\n    }\n}\n\n(() => {\n    CURSOR = new Cursor();\n    // 需要重新获取列表时，使用 CURSOR.refresh()\n})();","source":"js/cursor.js","raw":"var CURSOR;\n\nMath.lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst getStyle = (el, attr) => {\n    try {\n        return window.getComputedStyle\n            ? window.getComputedStyle(el)[attr]\n            : el.currentStyle[attr];\n    } catch (e) {}\n    return \"\";\n};\n\nclass Cursor {\n    constructor() {\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    move(left, top) {\n        this.cursor.style[\"left\"] = `${left}px`;\n        this.cursor.style[\"top\"] = `${top}px`;\n    }\n\n    create() {\n        if (!this.cursor) {\n            this.cursor = document.createElement(\"div\");\n            this.cursor.id = \"cursor\";\n            this.cursor.classList.add(\"hidden\");\n            document.body.append(this.cursor);\n        }\n\n        var el = document.getElementsByTagName('*');\n        for (let i = 0; i < el.length; i++)\n            if (getStyle(el[i], \"cursor\") == \"pointer\")\n                this.pt.push(el[i].outerHTML);\n\n        document.body.appendChild((this.scr = document.createElement(\"style\")));\n        // 这里改变鼠标指针的颜色 由svg生成\n        this.scr.innerHTML = `* {cursor: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>\") 4 4, auto}`;\n    }\n\n    refresh() {\n        this.scr.remove();\n        this.cursor.classList.remove(\"hover\");\n        this.cursor.classList.remove(\"active\");\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    init() {\n        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add(\"hover\");\n        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove(\"hover\");\n        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove(\"hidden\");};\n        document.onmouseenter = e => this.cursor.classList.remove(\"hidden\");\n        document.onmouseleave = e => this.cursor.classList.add(\"hidden\");\n        document.onmousedown  = e => this.cursor.classList.add(\"active\");\n        document.onmouseup    = e => this.cursor.classList.remove(\"active\");\n    }\n\n    render() {\n        if (this.pos.prev) {\n            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);\n            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);\n            this.move(this.pos.prev.x, this.pos.prev.y);\n        } else {\n            this.pos.prev = this.pos.curr;\n        }\n        requestAnimationFrame(() => this.render());\n    }\n}\n\n(() => {\n    CURSOR = new Cursor();\n    // 需要重新获取列表时，使用 CURSOR.refresh()\n})();","date":"2023-08-19T16:22:42.263Z","updated":"2023-08-19T16:22:42.263Z","path":"js/cursor.js","layout":"false","title":"","comments":1,"_id":"clyzgbsoz000jy0vm1cd28osv","content":"var CURSOR;\n\nMath.lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst getStyle = (el, attr) => {\n    try {\n        return window.getComputedStyle\n            ? window.getComputedStyle(el)[attr]\n            : el.currentStyle[attr];\n    } catch (e) {}\n    return \"\";\n};\n\nclass Cursor {\n    constructor() {\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    move(left, top) {\n        this.cursor.style[\"left\"] = `${left}px`;\n        this.cursor.style[\"top\"] = `${top}px`;\n    }\n\n    create() {\n        if (!this.cursor) {\n            this.cursor = document.createElement(\"div\");\n            this.cursor.id = \"cursor\";\n            this.cursor.classList.add(\"hidden\");\n            document.body.append(this.cursor);\n        }\n\n        var el = document.getElementsByTagName('*');\n        for (let i = 0; i < el.length; i++)\n            if (getStyle(el[i], \"cursor\") == \"pointer\")\n                this.pt.push(el[i].outerHTML);\n\n        document.body.appendChild((this.scr = document.createElement(\"style\")));\n        // 这里改变鼠标指针的颜色 由svg生成\n        this.scr.innerHTML = `* {cursor: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>\") 4 4, auto}`;\n    }\n\n    refresh() {\n        this.scr.remove();\n        this.cursor.classList.remove(\"hover\");\n        this.cursor.classList.remove(\"active\");\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    init() {\n        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add(\"hover\");\n        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove(\"hover\");\n        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove(\"hidden\");};\n        document.onmouseenter = e => this.cursor.classList.remove(\"hidden\");\n        document.onmouseleave = e => this.cursor.classList.add(\"hidden\");\n        document.onmousedown  = e => this.cursor.classList.add(\"active\");\n        document.onmouseup    = e => this.cursor.classList.remove(\"active\");\n    }\n\n    render() {\n        if (this.pos.prev) {\n            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);\n            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);\n            this.move(this.pos.prev.x, this.pos.prev.y);\n        } else {\n            this.pos.prev = this.pos.curr;\n        }\n        requestAnimationFrame(() => this.render());\n    }\n}\n\n(() => {\n    CURSOR = new Cursor();\n    // 需要重新获取列表时，使用 CURSOR.refresh()\n})();","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"var CURSOR;\n\nMath.lerp = (a, b, n) => (1 - n) * a + n * b;\n\nconst getStyle = (el, attr) => {\n    try {\n        return window.getComputedStyle\n            ? window.getComputedStyle(el)[attr]\n            : el.currentStyle[attr];\n    } catch (e) {}\n    return \"\";\n};\n\nclass Cursor {\n    constructor() {\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    move(left, top) {\n        this.cursor.style[\"left\"] = `${left}px`;\n        this.cursor.style[\"top\"] = `${top}px`;\n    }\n\n    create() {\n        if (!this.cursor) {\n            this.cursor = document.createElement(\"div\");\n            this.cursor.id = \"cursor\";\n            this.cursor.classList.add(\"hidden\");\n            document.body.append(this.cursor);\n        }\n\n        var el = document.getElementsByTagName('*');\n        for (let i = 0; i < el.length; i++)\n            if (getStyle(el[i], \"cursor\") == \"pointer\")\n                this.pt.push(el[i].outerHTML);\n\n        document.body.appendChild((this.scr = document.createElement(\"style\")));\n        // 这里改变鼠标指针的颜色 由svg生成\n        this.scr.innerHTML = `* {cursor: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>\") 4 4, auto}`;\n    }\n\n    refresh() {\n        this.scr.remove();\n        this.cursor.classList.remove(\"hover\");\n        this.cursor.classList.remove(\"active\");\n        this.pos = {curr: null, prev: null};\n        this.pt = [];\n\n        this.create();\n        this.init();\n        this.render();\n    }\n\n    init() {\n        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add(\"hover\");\n        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove(\"hover\");\n        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove(\"hidden\");};\n        document.onmouseenter = e => this.cursor.classList.remove(\"hidden\");\n        document.onmouseleave = e => this.cursor.classList.add(\"hidden\");\n        document.onmousedown  = e => this.cursor.classList.add(\"active\");\n        document.onmouseup    = e => this.cursor.classList.remove(\"active\");\n    }\n\n    render() {\n        if (this.pos.prev) {\n            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);\n            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);\n            this.move(this.pos.prev.x, this.pos.prev.y);\n        } else {\n            this.pos.prev = this.pos.curr;\n        }\n        requestAnimationFrame(() => this.render());\n    }\n}\n\n(() => {\n    CURSOR = new Cursor();\n    // 需要重新获取列表时，使用 CURSOR.refresh()\n})();"},{"_content":"window.onscroll = percent;// 执行函数\n// 页面百分比\nfunction percent() {\n    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度\n        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度\n        result = Math.round(a / b * 100), // 计算百分比\n        up = document.querySelector(\"#go-up\") // 获取按钮\n\n    if (result <= 95) {\n        up.childNodes[0].style.display = 'none'\n        up.childNodes[1].style.display = 'block'\n        up.childNodes[1].innerHTML = result;\n    } else {\n        up.childNodes[1].style.display = 'none'\n        up.childNodes[0].style.display = 'block'\n    }\n}","source":"js/readPercent.js","raw":"window.onscroll = percent;// 执行函数\n// 页面百分比\nfunction percent() {\n    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度\n        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度\n        result = Math.round(a / b * 100), // 计算百分比\n        up = document.querySelector(\"#go-up\") // 获取按钮\n\n    if (result <= 95) {\n        up.childNodes[0].style.display = 'none'\n        up.childNodes[1].style.display = 'block'\n        up.childNodes[1].innerHTML = result;\n    } else {\n        up.childNodes[1].style.display = 'none'\n        up.childNodes[0].style.display = 'block'\n    }\n}","date":"2023-08-21T00:13:44.164Z","updated":"2023-08-21T00:13:44.164Z","path":"js/readPercent.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp0000ly0vmg1nc9ub0","content":"window.onscroll = percent;// 执行函数\n// 页面百分比\nfunction percent() {\n    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度\n        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度\n        result = Math.round(a / b * 100), // 计算百分比\n        up = document.querySelector(\"#go-up\") // 获取按钮\n\n    if (result <= 95) {\n        up.childNodes[0].style.display = 'none'\n        up.childNodes[1].style.display = 'block'\n        up.childNodes[1].innerHTML = result;\n    } else {\n        up.childNodes[1].style.display = 'none'\n        up.childNodes[0].style.display = 'block'\n    }\n}","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"window.onscroll = percent;// 执行函数\n// 页面百分比\nfunction percent() {\n    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度\n        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度\n        result = Math.round(a / b * 100), // 计算百分比\n        up = document.querySelector(\"#go-up\") // 获取按钮\n\n    if (result <= 95) {\n        up.childNodes[0].style.display = 'none'\n        up.childNodes[1].style.display = 'block'\n        up.childNodes[1].innerHTML = result;\n    } else {\n        up.childNodes[1].style.display = 'none'\n        up.childNodes[0].style.display = 'block'\n    }\n}"},{"_content":"if (window.localStorage.getItem(\"fpson\") == undefined || window.localStorage.getItem(\"fpson\") == \"1\") {\n    var rAF = function () {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            }\n        );\n    }();\n    var frame = 0;\n    var allFrameCount = 0;\n    var lastTime = Date.now();\n    var lastFameTime = Date.now();\n    var loop = function () {\n        var now = Date.now();\n        var fs = (now - lastFameTime);\n        var fps = Math.round(1000 / fs);\n\n        lastFameTime = now;\n        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS\n        allFrameCount++;\n        frame++;\n\n        if (now > 1000 + lastTime) {\n            var fps = Math.round((frame * 1000) / (now - lastTime));\n            if (fps <= 5) {\n                var kd = `<span style=\"color:#bd0000\">卡成ppt🤢</span>`\n            } else if (fps <= 15) {\n                var kd = `<span style=\"color:red\">电竞级帧率😖</span>`\n            } else if (fps <= 25) {\n                var kd = `<span style=\"color:orange\">有点难受😨</span>`\n            } else if (fps < 35) {\n                var kd = `<span style=\"color:#9338e6\">不太流畅🙄</span>`\n            } else if (fps <= 45) {\n                var kd = `<span style=\"color:#08b7e4\">还不错哦😁</span>`\n            } else {\n                var kd = `<span style=\"color:#39c5bb\">十分流畅🤣</span>`\n            }\n            document.getElementById(\"fps\").innerHTML = `FPS:${fps} ${kd}`;\n            frame = 0;\n            lastTime = now;\n        };\n\n        rAF(loop);\n    }\n\n    loop();\n} else {\n    document.getElementById(\"fps\").style = \"display:none!important\"\n}","source":"js/fps.js","raw":"if (window.localStorage.getItem(\"fpson\") == undefined || window.localStorage.getItem(\"fpson\") == \"1\") {\n    var rAF = function () {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            }\n        );\n    }();\n    var frame = 0;\n    var allFrameCount = 0;\n    var lastTime = Date.now();\n    var lastFameTime = Date.now();\n    var loop = function () {\n        var now = Date.now();\n        var fs = (now - lastFameTime);\n        var fps = Math.round(1000 / fs);\n\n        lastFameTime = now;\n        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS\n        allFrameCount++;\n        frame++;\n\n        if (now > 1000 + lastTime) {\n            var fps = Math.round((frame * 1000) / (now - lastTime));\n            if (fps <= 5) {\n                var kd = `<span style=\"color:#bd0000\">卡成ppt🤢</span>`\n            } else if (fps <= 15) {\n                var kd = `<span style=\"color:red\">电竞级帧率😖</span>`\n            } else if (fps <= 25) {\n                var kd = `<span style=\"color:orange\">有点难受😨</span>`\n            } else if (fps < 35) {\n                var kd = `<span style=\"color:#9338e6\">不太流畅🙄</span>`\n            } else if (fps <= 45) {\n                var kd = `<span style=\"color:#08b7e4\">还不错哦😁</span>`\n            } else {\n                var kd = `<span style=\"color:#39c5bb\">十分流畅🤣</span>`\n            }\n            document.getElementById(\"fps\").innerHTML = `FPS:${fps} ${kd}`;\n            frame = 0;\n            lastTime = now;\n        };\n\n        rAF(loop);\n    }\n\n    loop();\n} else {\n    document.getElementById(\"fps\").style = \"display:none!important\"\n}","date":"2023-08-20T16:48:41.499Z","updated":"2023-08-20T16:48:41.499Z","path":"js/fps.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp2000oy0vmawmk8u4i","content":"if (window.localStorage.getItem(\"fpson\") == undefined || window.localStorage.getItem(\"fpson\") == \"1\") {\n    var rAF = function () {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            }\n        );\n    }();\n    var frame = 0;\n    var allFrameCount = 0;\n    var lastTime = Date.now();\n    var lastFameTime = Date.now();\n    var loop = function () {\n        var now = Date.now();\n        var fs = (now - lastFameTime);\n        var fps = Math.round(1000 / fs);\n\n        lastFameTime = now;\n        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS\n        allFrameCount++;\n        frame++;\n\n        if (now > 1000 + lastTime) {\n            var fps = Math.round((frame * 1000) / (now - lastTime));\n            if (fps <= 5) {\n                var kd = `<span style=\"color:#bd0000\">卡成ppt🤢</span>`\n            } else if (fps <= 15) {\n                var kd = `<span style=\"color:red\">电竞级帧率😖</span>`\n            } else if (fps <= 25) {\n                var kd = `<span style=\"color:orange\">有点难受😨</span>`\n            } else if (fps < 35) {\n                var kd = `<span style=\"color:#9338e6\">不太流畅🙄</span>`\n            } else if (fps <= 45) {\n                var kd = `<span style=\"color:#08b7e4\">还不错哦😁</span>`\n            } else {\n                var kd = `<span style=\"color:#39c5bb\">十分流畅🤣</span>`\n            }\n            document.getElementById(\"fps\").innerHTML = `FPS:${fps} ${kd}`;\n            frame = 0;\n            lastTime = now;\n        };\n\n        rAF(loop);\n    }\n\n    loop();\n} else {\n    document.getElementById(\"fps\").style = \"display:none!important\"\n}","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"if (window.localStorage.getItem(\"fpson\") == undefined || window.localStorage.getItem(\"fpson\") == \"1\") {\n    var rAF = function () {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            }\n        );\n    }();\n    var frame = 0;\n    var allFrameCount = 0;\n    var lastTime = Date.now();\n    var lastFameTime = Date.now();\n    var loop = function () {\n        var now = Date.now();\n        var fs = (now - lastFameTime);\n        var fps = Math.round(1000 / fs);\n\n        lastFameTime = now;\n        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS\n        allFrameCount++;\n        frame++;\n\n        if (now > 1000 + lastTime) {\n            var fps = Math.round((frame * 1000) / (now - lastTime));\n            if (fps <= 5) {\n                var kd = `<span style=\"color:#bd0000\">卡成ppt🤢</span>`\n            } else if (fps <= 15) {\n                var kd = `<span style=\"color:red\">电竞级帧率😖</span>`\n            } else if (fps <= 25) {\n                var kd = `<span style=\"color:orange\">有点难受😨</span>`\n            } else if (fps < 35) {\n                var kd = `<span style=\"color:#9338e6\">不太流畅🙄</span>`\n            } else if (fps <= 45) {\n                var kd = `<span style=\"color:#08b7e4\">还不错哦😁</span>`\n            } else {\n                var kd = `<span style=\"color:#39c5bb\">十分流畅🤣</span>`\n            }\n            document.getElementById(\"fps\").innerHTML = `FPS:${fps} ${kd}`;\n            frame = 0;\n            lastTime = now;\n        };\n\n        rAF(loop);\n    }\n\n    loop();\n} else {\n    document.getElementById(\"fps\").style = \"display:none!important\"\n}"},{"_content":"setInterval(() => {\n    let create_time = Math.round(new Date('2023-08-18 00:00:00').getTime() / 1000); //在此行修改建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000);\n    let second = timestamp - create_time;\n    let time = new Array(0, 0, 0, 0, 0);\n  \n    var nol = function(h){\n      return h>9?h:'0'+h;\n    }\n    if (second >= 365 * 24 * 3600) {\n      time[0] = parseInt(second / (365 * 24 * 3600));\n      second %= 365 * 24 * 3600;\n    }\n    if (second >= 24 * 3600) {\n      time[1] = parseInt(second / (24 * 3600));\n      second %= 24 * 3600;\n    }\n    if (second >= 3600) {\n      time[2] = nol(parseInt(second / 3600));\n      second %= 3600;\n    }\n    if (second >= 60) {\n      time[3] = nol(parseInt(second / 60));\n      second %= 60;\n    }\n    if (second > 0) {\n      time[4] = nol(second);\n    }\n    if ((Number(time[2])<22) && (Number(time[2])>7)){\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    else{\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","source":"js/runtime.js","raw":"setInterval(() => {\n    let create_time = Math.round(new Date('2023-08-18 00:00:00').getTime() / 1000); //在此行修改建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000);\n    let second = timestamp - create_time;\n    let time = new Array(0, 0, 0, 0, 0);\n  \n    var nol = function(h){\n      return h>9?h:'0'+h;\n    }\n    if (second >= 365 * 24 * 3600) {\n      time[0] = parseInt(second / (365 * 24 * 3600));\n      second %= 365 * 24 * 3600;\n    }\n    if (second >= 24 * 3600) {\n      time[1] = parseInt(second / (24 * 3600));\n      second %= 24 * 3600;\n    }\n    if (second >= 3600) {\n      time[2] = nol(parseInt(second / 3600));\n      second %= 3600;\n    }\n    if (second >= 60) {\n      time[3] = nol(parseInt(second / 60));\n      second %= 60;\n    }\n    if (second > 0) {\n      time[4] = nol(second);\n    }\n    if ((Number(time[2])<22) && (Number(time[2])>7)){\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    else{\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","date":"2023-08-20T06:02:49.239Z","updated":"2023-08-20T06:02:49.239Z","path":"js/runtime.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp3000qy0vm56yhhnbw","content":"setInterval(() => {\n    let create_time = Math.round(new Date('2023-08-18 00:00:00').getTime() / 1000); //在此行修改建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000);\n    let second = timestamp - create_time;\n    let time = new Array(0, 0, 0, 0, 0);\n  \n    var nol = function(h){\n      return h>9?h:'0'+h;\n    }\n    if (second >= 365 * 24 * 3600) {\n      time[0] = parseInt(second / (365 * 24 * 3600));\n      second %= 365 * 24 * 3600;\n    }\n    if (second >= 24 * 3600) {\n      time[1] = parseInt(second / (24 * 3600));\n      second %= 24 * 3600;\n    }\n    if (second >= 3600) {\n      time[2] = nol(parseInt(second / 3600));\n      second %= 3600;\n    }\n    if (second >= 60) {\n      time[3] = nol(parseInt(second / 60));\n      second %= 60;\n    }\n    if (second > 0) {\n      time[4] = nol(second);\n    }\n    if ((Number(time[2])<22) && (Number(time[2])>7)){\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    else{\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"setInterval(() => {\n    let create_time = Math.round(new Date('2023-08-18 00:00:00').getTime() / 1000); //在此行修改建站时间\n    let timestamp = Math.round((new Date().getTime()) / 1000);\n    let second = timestamp - create_time;\n    let time = new Array(0, 0, 0, 0, 0);\n  \n    var nol = function(h){\n      return h>9?h:'0'+h;\n    }\n    if (second >= 365 * 24 * 3600) {\n      time[0] = parseInt(second / (365 * 24 * 3600));\n      second %= 365 * 24 * 3600;\n    }\n    if (second >= 24 * 3600) {\n      time[1] = parseInt(second / (24 * 3600));\n      second %= 24 * 3600;\n    }\n    if (second >= 3600) {\n      time[2] = nol(parseInt(second / 3600));\n      second %= 3600;\n    }\n    if (second >= 60) {\n      time[3] = nol(parseInt(second / 60));\n      second %= 60;\n    }\n    if (second > 0) {\n      time[4] = nol(second);\n    }\n    if ((Number(time[2])<22) && (Number(time[2])>7)){\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    else{\n      currentTimeHtml =\"<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>\" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';\n    }\n    document.getElementById(\"workboard\").innerHTML = currentTimeHtml;\n  }, 1000);"},{"_content":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = 'w(ﾟДﾟ)w 不要走！再看看嘛！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)欢迎回来！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","source":"js/title.js","raw":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = 'w(ﾟДﾟ)w 不要走！再看看嘛！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)欢迎回来！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","date":"2023-08-20T07:18:41.102Z","updated":"2023-08-20T07:18:41.102Z","path":"js/title.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp5000ty0vm205ba1pw","content":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = 'w(ﾟДﾟ)w 不要走！再看看嘛！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)欢迎回来！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"//动态标题\nvar OriginTitile = document.title;\nvar titleTime;\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        //离开当前页面时标签显示内容\n        document.title = 'w(ﾟДﾟ)w 不要走！再看看嘛！';\n        clearTimeout(titleTime);\n    }\n    else {\n        //返回当前页面时标签显示内容\n        document.title = '♪(^∇^*)欢迎回来！' + OriginTitile;\n        //两秒后变回正常标题\n        titleTime = setTimeout(function () {\n            document.title = OriginTitile;\n        }, 2000);\n    }\n});"},{"_content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","source":"js/universe.js","raw":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","date":"2023-08-20T02:47:29.987Z","updated":"2023-08-20T02:47:29.987Z","path":"js/universe.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp5000vy0vm2o92golw","content":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle=\"rgba(\"+a+\",\"+this.opacity+\")\",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle=\"rgba(\"+d+\",\"+this.opacity+\")\",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle=\"rgba(\"+d+\",\"+(this.opacity-this.opacity/20*t)+\")\",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle=\"rgba(\"+r+\",\"+this.opacity+\")\",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener(\"resize\",f,!1),function(){h=s.getContext(\"2d\");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};\ndark()"},{"_content":"let newYearTimer = null;\nvar newYear = () => {\n    clearTimeout(newYearTimer);\n    if (!document.querySelector('#newYear')) return;\n    // 新年时间戳 and 星期对象\n    let newYear = new Date('2024-01-22 00:00:00').getTime() / 1000,\n        week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }\n\n    time();\n\n    // 补零函数\n    function nol(h) { return h > 9 ? h : '0' + h; };\n\n    function time() {\n        // 现在 时间对象\n        let now = new Date();\n\n        // 右下角 今天\n        document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]\n\n        // 现在与新年相差秒数\n        let second = newYear - Math.round(now.getTime() / 1000);\n\n        // 小于0则表示已经过年\n        if (second < 0) {\n            document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';\n            document.querySelector('#newYear .newYear-time').innerHTML = '<span class=\"happyNewYear\">新年快乐</p>';\n        } else {\n            // 大于0则还未过年\n            document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'\n\n            // 大于一天则直接渲染天数\n            if (second > 86400) {\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"day\">${Math.ceil(second / 86400)}<span class=\"unit\">天</span></span>`\n            } else {\n                // 小于一天则使用时分秒计时。\n                let h = nol(parseInt(second / 3600));\n                second %= 3600;\n                let m = nol(parseInt(second / 60));\n                second %= 60;\n                let s = nol(second);\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"time\">${h}:${m}:${s}</span></span>`;\n                // 计时\n                newYearTimer = setTimeout(time, 1000);\n            }\n        }\n    }\n\n    // 元宝飘落\n    jQuery(document).ready(function ($) {\n        $('#newYear').wpSuperSnow({\n            flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],\n            totalFlakes: '100',\n            zIndex: '999999',\n            maxSize: '30',\n            maxDuration: '20',\n            useFlakeTrans: false\n        });\n    });\n}\n// Pjax适配：若没有开启Pjax这里直接是newYear()即可\n// 开了Pjax的用以下两句\ndocument.addEventListener('pjax:complete', newYear);\ndocument.addEventListener('DOMContentLoaded', newYear);","source":"js/newYear.js","raw":"let newYearTimer = null;\nvar newYear = () => {\n    clearTimeout(newYearTimer);\n    if (!document.querySelector('#newYear')) return;\n    // 新年时间戳 and 星期对象\n    let newYear = new Date('2024-01-22 00:00:00').getTime() / 1000,\n        week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }\n\n    time();\n\n    // 补零函数\n    function nol(h) { return h > 9 ? h : '0' + h; };\n\n    function time() {\n        // 现在 时间对象\n        let now = new Date();\n\n        // 右下角 今天\n        document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]\n\n        // 现在与新年相差秒数\n        let second = newYear - Math.round(now.getTime() / 1000);\n\n        // 小于0则表示已经过年\n        if (second < 0) {\n            document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';\n            document.querySelector('#newYear .newYear-time').innerHTML = '<span class=\"happyNewYear\">新年快乐</p>';\n        } else {\n            // 大于0则还未过年\n            document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'\n\n            // 大于一天则直接渲染天数\n            if (second > 86400) {\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"day\">${Math.ceil(second / 86400)}<span class=\"unit\">天</span></span>`\n            } else {\n                // 小于一天则使用时分秒计时。\n                let h = nol(parseInt(second / 3600));\n                second %= 3600;\n                let m = nol(parseInt(second / 60));\n                second %= 60;\n                let s = nol(second);\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"time\">${h}:${m}:${s}</span></span>`;\n                // 计时\n                newYearTimer = setTimeout(time, 1000);\n            }\n        }\n    }\n\n    // 元宝飘落\n    jQuery(document).ready(function ($) {\n        $('#newYear').wpSuperSnow({\n            flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],\n            totalFlakes: '100',\n            zIndex: '999999',\n            maxSize: '30',\n            maxDuration: '20',\n            useFlakeTrans: false\n        });\n    });\n}\n// Pjax适配：若没有开启Pjax这里直接是newYear()即可\n// 开了Pjax的用以下两句\ndocument.addEventListener('pjax:complete', newYear);\ndocument.addEventListener('DOMContentLoaded', newYear);","date":"2023-08-20T16:30:13.945Z","updated":"2023-08-20T16:30:13.945Z","path":"js/newYear.js","layout":"false","title":"","comments":1,"_id":"clyzgbsp6000yy0vm5u6w45h2","content":"let newYearTimer = null;\nvar newYear = () => {\n    clearTimeout(newYearTimer);\n    if (!document.querySelector('#newYear')) return;\n    // 新年时间戳 and 星期对象\n    let newYear = new Date('2024-01-22 00:00:00').getTime() / 1000,\n        week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }\n\n    time();\n\n    // 补零函数\n    function nol(h) { return h > 9 ? h : '0' + h; };\n\n    function time() {\n        // 现在 时间对象\n        let now = new Date();\n\n        // 右下角 今天\n        document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]\n\n        // 现在与新年相差秒数\n        let second = newYear - Math.round(now.getTime() / 1000);\n\n        // 小于0则表示已经过年\n        if (second < 0) {\n            document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';\n            document.querySelector('#newYear .newYear-time').innerHTML = '<span class=\"happyNewYear\">新年快乐</p>';\n        } else {\n            // 大于0则还未过年\n            document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'\n\n            // 大于一天则直接渲染天数\n            if (second > 86400) {\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"day\">${Math.ceil(second / 86400)}<span class=\"unit\">天</span></span>`\n            } else {\n                // 小于一天则使用时分秒计时。\n                let h = nol(parseInt(second / 3600));\n                second %= 3600;\n                let m = nol(parseInt(second / 60));\n                second %= 60;\n                let s = nol(second);\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"time\">${h}:${m}:${s}</span></span>`;\n                // 计时\n                newYearTimer = setTimeout(time, 1000);\n            }\n        }\n    }\n\n    // 元宝飘落\n    jQuery(document).ready(function ($) {\n        $('#newYear').wpSuperSnow({\n            flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],\n            totalFlakes: '100',\n            zIndex: '999999',\n            maxSize: '30',\n            maxDuration: '20',\n            useFlakeTrans: false\n        });\n    });\n}\n// Pjax适配：若没有开启Pjax这里直接是newYear()即可\n// 开了Pjax的用以下两句\ndocument.addEventListener('pjax:complete', newYear);\ndocument.addEventListener('DOMContentLoaded', newYear);","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"let newYearTimer = null;\nvar newYear = () => {\n    clearTimeout(newYearTimer);\n    if (!document.querySelector('#newYear')) return;\n    // 新年时间戳 and 星期对象\n    let newYear = new Date('2024-01-22 00:00:00').getTime() / 1000,\n        week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }\n\n    time();\n\n    // 补零函数\n    function nol(h) { return h > 9 ? h : '0' + h; };\n\n    function time() {\n        // 现在 时间对象\n        let now = new Date();\n\n        // 右下角 今天\n        document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]\n\n        // 现在与新年相差秒数\n        let second = newYear - Math.round(now.getTime() / 1000);\n\n        // 小于0则表示已经过年\n        if (second < 0) {\n            document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';\n            document.querySelector('#newYear .newYear-time').innerHTML = '<span class=\"happyNewYear\">新年快乐</p>';\n        } else {\n            // 大于0则还未过年\n            document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'\n\n            // 大于一天则直接渲染天数\n            if (second > 86400) {\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"day\">${Math.ceil(second / 86400)}<span class=\"unit\">天</span></span>`\n            } else {\n                // 小于一天则使用时分秒计时。\n                let h = nol(parseInt(second / 3600));\n                second %= 3600;\n                let m = nol(parseInt(second / 60));\n                second %= 60;\n                let s = nol(second);\n                document.querySelector('#newYear .newYear-time').innerHTML = `<span class=\"time\">${h}:${m}:${s}</span></span>`;\n                // 计时\n                newYearTimer = setTimeout(time, 1000);\n            }\n        }\n    }\n\n    // 元宝飘落\n    jQuery(document).ready(function ($) {\n        $('#newYear').wpSuperSnow({\n            flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],\n            totalFlakes: '100',\n            zIndex: '999999',\n            maxSize: '30',\n            maxDuration: '20',\n            useFlakeTrans: false\n        });\n    });\n}\n// Pjax适配：若没有开启Pjax这里直接是newYear()即可\n// 开了Pjax的用以下两句\ndocument.addEventListener('pjax:complete', newYear);\ndocument.addEventListener('DOMContentLoaded', newYear);"},{"_content":"if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {\n    // 移动端不显示\n} else {\n    // document.write('<canvas id=\"snow\" style=\"position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none\"></canvas>');\n\n    window && (() => {\n        let e = {\n            flakeCount: 50, // 雪花数目\n            minDist: 150,   // 最小距离\n            color: \"255, 255, 255\", // 雪花颜色\n            size: 1.5,  // 雪花大小\n            speed: .5,  // 雪花速度\n            opacity: .7,    // 雪花透明度\n            stepsize: .5    // 步距\n        };\n        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {\n            window.setTimeout(e, 1e3 / 60)\n        }\n            ;\n        window.requestAnimationFrame = t;\n        const i = document.getElementById(\"snow\"),\n            n = i.getContext(\"2d\"),\n            o = e.flakeCount;\n        let a = -100,\n            d = -100,\n            s = [];\n        i.width = window.innerWidth,\n            i.height = window.innerHeight;\n        const h = () => {\n            n.clearRect(0, 0, i.width, i.height);\n            const r = e.minDist;\n            for (let t = 0; t < o; t++) {\n                let o = s[t];\n                const h = a,\n                    w = d,\n                    m = o.x,\n                    c = o.y,\n                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));\n                if (p < r) {\n                    const e = (h - m) / p,\n                        t = (w - c) / p,\n                        i = r / (p * p) / 2;\n                    o.velX -= i * e,\n                        o.velY -= i * t\n                } else\n                    o.velX *= .98,\n                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),\n                        o.velX += Math.cos(o.step += .05) * o.stepSize;\n                n.fillStyle = \"rgba(\" + e.color + \", \" + o.opacity + \")\",\n                    o.y += o.velY,\n                    o.x += o.velX,\n                    (o.y >= i.height || o.y <= 0) && l(o),\n                    (o.x >= i.width || o.x <= 0) && l(o),\n                    n.beginPath(),\n                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),\n                    n.fill()\n            }\n            t(h)\n        }\n            , l = e => {\n                e.x = Math.floor(Math.random() * i.width),\n                    e.y = 0,\n                    e.size = 3 * Math.random() + 2,\n                    e.speed = 1 * Math.random() + .5,\n                    e.velY = e.speed,\n                    e.velX = 0,\n                    e.opacity = .5 * Math.random() + .3\n            }\n            ;\n        document.addEventListener(\"mousemove\", (e => {\n            a = e.clientX,\n                d = e.clientY\n        }\n        )),\n            window.addEventListener(\"resize\", (() => {\n                i.width = window.innerWidth,\n                    i.height = window.innerHeight\n            }\n            )),\n            (() => {\n                for (let t = 0; t < o; t++) {\n                    const t = Math.floor(Math.random() * i.width)\n                        , n = Math.floor(Math.random() * i.height)\n                        , o = 3 * Math.random() + e.size\n                        , a = 1 * Math.random() + e.speed\n                        , d = .5 * Math.random() + e.opacity;\n                    s.push({\n                        speed: a,\n                        velX: 0,\n                        velY: a,\n                        x: t,\n                        y: n,\n                        size: o,\n                        stepSize: Math.random() / 30 * e.stepsize,\n                        step: 0,\n                        angle: 180,\n                        opacity: d\n                    })\n                }\n                h()\n            }\n            )()\n    }\n    )();\n}","source":"js/snow.js","raw":"if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {\n    // 移动端不显示\n} else {\n    // document.write('<canvas id=\"snow\" style=\"position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none\"></canvas>');\n\n    window && (() => {\n        let e = {\n            flakeCount: 50, // 雪花数目\n            minDist: 150,   // 最小距离\n            color: \"255, 255, 255\", // 雪花颜色\n            size: 1.5,  // 雪花大小\n            speed: .5,  // 雪花速度\n            opacity: .7,    // 雪花透明度\n            stepsize: .5    // 步距\n        };\n        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {\n            window.setTimeout(e, 1e3 / 60)\n        }\n            ;\n        window.requestAnimationFrame = t;\n        const i = document.getElementById(\"snow\"),\n            n = i.getContext(\"2d\"),\n            o = e.flakeCount;\n        let a = -100,\n            d = -100,\n            s = [];\n        i.width = window.innerWidth,\n            i.height = window.innerHeight;\n        const h = () => {\n            n.clearRect(0, 0, i.width, i.height);\n            const r = e.minDist;\n            for (let t = 0; t < o; t++) {\n                let o = s[t];\n                const h = a,\n                    w = d,\n                    m = o.x,\n                    c = o.y,\n                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));\n                if (p < r) {\n                    const e = (h - m) / p,\n                        t = (w - c) / p,\n                        i = r / (p * p) / 2;\n                    o.velX -= i * e,\n                        o.velY -= i * t\n                } else\n                    o.velX *= .98,\n                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),\n                        o.velX += Math.cos(o.step += .05) * o.stepSize;\n                n.fillStyle = \"rgba(\" + e.color + \", \" + o.opacity + \")\",\n                    o.y += o.velY,\n                    o.x += o.velX,\n                    (o.y >= i.height || o.y <= 0) && l(o),\n                    (o.x >= i.width || o.x <= 0) && l(o),\n                    n.beginPath(),\n                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),\n                    n.fill()\n            }\n            t(h)\n        }\n            , l = e => {\n                e.x = Math.floor(Math.random() * i.width),\n                    e.y = 0,\n                    e.size = 3 * Math.random() + 2,\n                    e.speed = 1 * Math.random() + .5,\n                    e.velY = e.speed,\n                    e.velX = 0,\n                    e.opacity = .5 * Math.random() + .3\n            }\n            ;\n        document.addEventListener(\"mousemove\", (e => {\n            a = e.clientX,\n                d = e.clientY\n        }\n        )),\n            window.addEventListener(\"resize\", (() => {\n                i.width = window.innerWidth,\n                    i.height = window.innerHeight\n            }\n            )),\n            (() => {\n                for (let t = 0; t < o; t++) {\n                    const t = Math.floor(Math.random() * i.width)\n                        , n = Math.floor(Math.random() * i.height)\n                        , o = 3 * Math.random() + e.size\n                        , a = 1 * Math.random() + e.speed\n                        , d = .5 * Math.random() + e.opacity;\n                    s.push({\n                        speed: a,\n                        velX: 0,\n                        velY: a,\n                        x: t,\n                        y: n,\n                        size: o,\n                        stepSize: Math.random() / 30 * e.stepsize,\n                        step: 0,\n                        angle: 180,\n                        opacity: d\n                    })\n                }\n                h()\n            }\n            )()\n    }\n    )();\n}","date":"2023-08-20T16:21:56.153Z","updated":"2023-08-20T16:21:56.153Z","path":"js/snow.js","layout":"false","title":"","comments":1,"_id":"clyzgbspa0010y0vmfmaec4oo","content":"if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {\n    // 移动端不显示\n} else {\n    // document.write('<canvas id=\"snow\" style=\"position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none\"></canvas>');\n\n    window && (() => {\n        let e = {\n            flakeCount: 50, // 雪花数目\n            minDist: 150,   // 最小距离\n            color: \"255, 255, 255\", // 雪花颜色\n            size: 1.5,  // 雪花大小\n            speed: .5,  // 雪花速度\n            opacity: .7,    // 雪花透明度\n            stepsize: .5    // 步距\n        };\n        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {\n            window.setTimeout(e, 1e3 / 60)\n        }\n            ;\n        window.requestAnimationFrame = t;\n        const i = document.getElementById(\"snow\"),\n            n = i.getContext(\"2d\"),\n            o = e.flakeCount;\n        let a = -100,\n            d = -100,\n            s = [];\n        i.width = window.innerWidth,\n            i.height = window.innerHeight;\n        const h = () => {\n            n.clearRect(0, 0, i.width, i.height);\n            const r = e.minDist;\n            for (let t = 0; t < o; t++) {\n                let o = s[t];\n                const h = a,\n                    w = d,\n                    m = o.x,\n                    c = o.y,\n                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));\n                if (p < r) {\n                    const e = (h - m) / p,\n                        t = (w - c) / p,\n                        i = r / (p * p) / 2;\n                    o.velX -= i * e,\n                        o.velY -= i * t\n                } else\n                    o.velX *= .98,\n                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),\n                        o.velX += Math.cos(o.step += .05) * o.stepSize;\n                n.fillStyle = \"rgba(\" + e.color + \", \" + o.opacity + \")\",\n                    o.y += o.velY,\n                    o.x += o.velX,\n                    (o.y >= i.height || o.y <= 0) && l(o),\n                    (o.x >= i.width || o.x <= 0) && l(o),\n                    n.beginPath(),\n                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),\n                    n.fill()\n            }\n            t(h)\n        }\n            , l = e => {\n                e.x = Math.floor(Math.random() * i.width),\n                    e.y = 0,\n                    e.size = 3 * Math.random() + 2,\n                    e.speed = 1 * Math.random() + .5,\n                    e.velY = e.speed,\n                    e.velX = 0,\n                    e.opacity = .5 * Math.random() + .3\n            }\n            ;\n        document.addEventListener(\"mousemove\", (e => {\n            a = e.clientX,\n                d = e.clientY\n        }\n        )),\n            window.addEventListener(\"resize\", (() => {\n                i.width = window.innerWidth,\n                    i.height = window.innerHeight\n            }\n            )),\n            (() => {\n                for (let t = 0; t < o; t++) {\n                    const t = Math.floor(Math.random() * i.width)\n                        , n = Math.floor(Math.random() * i.height)\n                        , o = 3 * Math.random() + e.size\n                        , a = 1 * Math.random() + e.speed\n                        , d = .5 * Math.random() + e.opacity;\n                    s.push({\n                        speed: a,\n                        velX: 0,\n                        velY: a,\n                        x: t,\n                        y: n,\n                        size: o,\n                        stepSize: Math.random() / 30 * e.stepsize,\n                        step: 0,\n                        angle: 180,\n                        opacity: d\n                    })\n                }\n                h()\n            }\n            )()\n    }\n    )();\n}","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":"if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {\n    // 移动端不显示\n} else {\n    // document.write('<canvas id=\"snow\" style=\"position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none\"></canvas>');\n\n    window && (() => {\n        let e = {\n            flakeCount: 50, // 雪花数目\n            minDist: 150,   // 最小距离\n            color: \"255, 255, 255\", // 雪花颜色\n            size: 1.5,  // 雪花大小\n            speed: .5,  // 雪花速度\n            opacity: .7,    // 雪花透明度\n            stepsize: .5    // 步距\n        };\n        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {\n            window.setTimeout(e, 1e3 / 60)\n        }\n            ;\n        window.requestAnimationFrame = t;\n        const i = document.getElementById(\"snow\"),\n            n = i.getContext(\"2d\"),\n            o = e.flakeCount;\n        let a = -100,\n            d = -100,\n            s = [];\n        i.width = window.innerWidth,\n            i.height = window.innerHeight;\n        const h = () => {\n            n.clearRect(0, 0, i.width, i.height);\n            const r = e.minDist;\n            for (let t = 0; t < o; t++) {\n                let o = s[t];\n                const h = a,\n                    w = d,\n                    m = o.x,\n                    c = o.y,\n                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));\n                if (p < r) {\n                    const e = (h - m) / p,\n                        t = (w - c) / p,\n                        i = r / (p * p) / 2;\n                    o.velX -= i * e,\n                        o.velY -= i * t\n                } else\n                    o.velX *= .98,\n                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),\n                        o.velX += Math.cos(o.step += .05) * o.stepSize;\n                n.fillStyle = \"rgba(\" + e.color + \", \" + o.opacity + \")\",\n                    o.y += o.velY,\n                    o.x += o.velX,\n                    (o.y >= i.height || o.y <= 0) && l(o),\n                    (o.x >= i.width || o.x <= 0) && l(o),\n                    n.beginPath(),\n                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),\n                    n.fill()\n            }\n            t(h)\n        }\n            , l = e => {\n                e.x = Math.floor(Math.random() * i.width),\n                    e.y = 0,\n                    e.size = 3 * Math.random() + 2,\n                    e.speed = 1 * Math.random() + .5,\n                    e.velY = e.speed,\n                    e.velX = 0,\n                    e.opacity = .5 * Math.random() + .3\n            }\n            ;\n        document.addEventListener(\"mousemove\", (e => {\n            a = e.clientX,\n                d = e.clientY\n        }\n        )),\n            window.addEventListener(\"resize\", (() => {\n                i.width = window.innerWidth,\n                    i.height = window.innerHeight\n            }\n            )),\n            (() => {\n                for (let t = 0; t < o; t++) {\n                    const t = Math.floor(Math.random() * i.width)\n                        , n = Math.floor(Math.random() * i.height)\n                        , o = 3 * Math.random() + e.size\n                        , a = 1 * Math.random() + e.speed\n                        , d = .5 * Math.random() + e.opacity;\n                    s.push({\n                        speed: a,\n                        velX: 0,\n                        velY: a,\n                        x: t,\n                        y: n,\n                        size: o,\n                        stepSize: Math.random() / 30 * e.stepsize,\n                        step: 0,\n                        angle: 180,\n                        opacity: d\n                    })\n                }\n                h()\n            }\n            )()\n    }\n    )();\n}"},{"title":"友链","date":"2023-08-18T10:46:01.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2023-08-18 18:46:01\ntype: \"link\"\n---\n","updated":"2023-08-19T14:33:20.248Z","path":"link/index.html","comments":1,"layout":"page","_id":"clyzgbspa0012y0vmgqu6eyig","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":""},{"title":"电影","date":"2023-08-18T11:10:00.000Z","_content":"","source":"movie/index.md","raw":"---\ntitle: 电影\ndate: 2023-8-18 19:10:00\n---","updated":"2023-08-18T11:11:33.132Z","path":"movie/index.html","comments":1,"layout":"page","_id":"clyzgbspb0014y0vm0q4teoom","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":""},{"title":"音乐","date":"2023-08-18T11:10:00.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2023-8-18 19:10:00\n---","updated":"2023-08-18T11:10:35.493Z","path":"music/index.html","comments":1,"layout":"page","_id":"clyzgbspb0015y0vmfc9lenzt","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2023-08-18T10:44:02.000Z","type":"tags","top-img":"https://images6.alphacoders.com/128/thumbbig-1288241.webp","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-08-18 18:44:02\ntype: \"tags\"\ntop-img: https://images6.alphacoders.com/128/thumbbig-1288241.webp\n---\n","updated":"2023-08-19T10:00:20.374Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clyzgbspc0018y0vmec9j8ob7","content":"","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"C++知识点回顾","date":"2024-02-01T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n## C++中的sizeof关键字\n是c语言中的运算符，计算一个类型/对象所占用的内存的大小。\n- 指针的大小是固定的。32位处理器就是4字节，64位处理器就是8字节\n- 数组当函数参数时会退化为指针，大小按指针算\n- 计算struct大小时要考虑内存对齐\n- 字符串数组大小要包含最后的'\\0'\n\n## C++中的const关键字\n用于表示常量。\n- 修饰变量时代表该变量只读\n- 修饰指针时用于声明本身为只读变量或者指向只读变量的指针\n\n``` c++\nconst int *p;//指向只读变量的指针，可以改变指针的指向，不能通过指针修改所指向只读变量的值\nint a = 10;\nconst int b = 20;\np = &a;//合法，可以指向普通变量\np = &b;//合法，可以指向只读变量\n*p = 30;//非法，不能通过指针修改只读变量的值\n```\n\n```c++\nint a = 10;\nint b = 20;\nint* const p = &a;//只读指针,指向a\n*p = 30;//合法，可以通过指针修改指向变量的值\np = &b;//非法，不能修改指针（即修改指针的指向）\n```\n\n## C++字节对齐\nC++字节对齐是对内存分配的一种策略。编译器会自动调整数据结构在内存中的分布。如果不对内存中的数据进行适当的对齐而只是顺序排列，会降低存取效率。\n\n优点：提高了内存访问的效率l\n\n缺点：浪费内存空间\n\n## typedef和define的区别\ndefine用于定义预处理宏，在预处理阶段进行处理，在编译之前有预处理器进行文本替换。无类型检查。全局有效。\n\ntypedef用于为现有的数据类型创建别名，在编译时进行处理。提供类型检查，保证类型安全。有作用域，仅定义它的作用域内有效。\n\n## C++中class和struct的区别\nC++兼容了C中的struct，并扩展其含义。在C中，struct只能包含成员变量，不能包含成员函数，而C++中既可包含成员变量，又可定义成员函数。类似class。\n\n不同点：\n- class中成员默认是private，struct中默认是public\n- class继承默认是private继承，struct继承默认是public继承\n- class可以用来定义模板参数，struct则不行\n\n## C++内联函数（inline）\n函数声明前加上inline，编译器会尝试用函数体替换内联函数调用处，从而避免函数调用的开销。\n\n但是编译器不一定会将所有声明为内联函数的函数都进行内联，是否执行取决于编译器的优化和是实现策略。优点是类型安全，可调试，可优化。同时注意由于函数体会被复制多次，会占用代码段空间，有些情况下会导致代码膨胀。\n\n## C++类型转换\n- static_cast\n``` c++\n//基本类型之间的转换\nint a = 42;\ndouble b = static_cast<double>(a);//将整数a转换为双精度浮点数b\n\n//指针之间的转换\nclass Base{}\nclass Derived: public Base{}\n\nBase* base_ptr = new Derived();\n//将基类的base_ptr转换为派生类的derived_ptr\nDerived* derived_ptr = static_cast<Derived*>(base_ptr);\n\nDerived derived_obj;\nBase& base_ref = derived_obj;\n//将基类的引用转换为派生类的引用\nDerived& derived_ref = static_cast<Derived&>(base_ref);\n```\nstatic_cast在编译器进行类型转换，在进行指针或引用转换时，保证转换合法。\n\n- dynamic_cast\n``` c++\nclass Base { virtual void dummy() {} };\nclass Derived : public Base { int a; };\n\nBase* base_ptr = new Derived();\n// 将基类指针base_ptr转换为派生类指针derived_ptr，如果类型兼容，则成功\nDerived* derived_ptr = dynamic_cast<Derived*>(base_ptr); \n\n//用于多态类型检查\nclass Animal { public: virtual ~Animal() {} };\nclass Dog : public Animal { public: void bark() { /* ... */ } };\nclass Cat : public Animal { public: void meow() { /* ... */ } };\n\nAnimal* animal_ptr = /* ... */;\n\n// 尝试将Animal指针转换为Dog指针\nDog* dog_ptr = dynamic_cast<Dog*>(animal_ptr);\nif (dog_ptr) {\n    dog_ptr->bark();\n}\n\n// 尝试将Animal指针转换为Cat指针\nCat* cat_ptr = dynamic_cast<Cat*>(animal_ptr);\nif (cat_ptr) {\n    cat_ptr->meow();\n}\n```\ndynamic_cast主要应用于父类与子类中的安全类型转换，在运行时执行类型检查，所以相比static_cast其更安全。\n\ndynamic_cast要想有效，基类必须有虚函数（虚函数表），这样才有可能将基类指针转换为子类。\n\n- const_cast\n``` C++\n//可以修改const属性，使得可以修改\nconst int a = 5;\nint* mutable_ptr = const_cast<int*>(&a);\n*mutable_ptr = 4;\n```\nconst_cast<new type> (expression)，new type必须是一个指针、引用或者指向对象类型成员的指针。\n\n- reinterpret_cast\n``` C++\nint a = 42;\nint *int_ptr = &a;\nchar *char_ptr = reinterpret_cast<int*>(int_ptr);\n```\n字面意义上看是重新翻译转型，就是重新解释底层bit，而不做任何类型检查。\n\n## C++面向对象三大特性\n- 封装\n\n封装就是将数据（属性）和操作这些数据的函数（方法）组合在一个类中的过程。隐藏了类的内部实现细节，仅暴露必要的接口给外部。\n\n- 继承\n\n继承是一个类从另一个类获取属性和方法的过程，允许我们创建类层次的代码结构，减少重复代码，提高代码的复用性和可维护性。\n\n- 多态\n\n多态是允许不同的类对象使用相同的接口名字，但具有不同的实现特性。\nC++中多态主要通过虚函数和抽象基类来实现。\n\n虚函数允许派生类实现基类的方法，而抽象基类包含至少一个纯虚函数，无法被实例化，只能作为其它派生类的基类。\n\n通过多态，可以编写更加通用的代码，提高代码的灵活性。\n\n## C++类初始化和析构顺序\n初始化顺序：\n\n1、首先是基类初始化顺序。如果当前的类继承自一或多个类，按照声明顺序进行初始化，但是有虚继承的话，优先虚继承。\n\n2、成员变量初始化。按照在类中声明的顺序进行初始化。\n\n3、执行该类构造函数。\n\n析构顺序和初始化顺序相反。\n\n## 深拷贝和浅拷贝\n浅拷贝（shallow copy）是一种简单的拷贝方式，仅复制对象的基本类型成员和指针成员的值，而不复制指针所指向的内存。这样会导致两个类对象使用相同的内存，产生内存泄漏等问题。一般地，默认编译器实现的拷贝构造函数是浅拷贝。\n\n深拷贝（deep copy）包含浅拷贝的情况下，还复制指针指向的内存，所以两个对象不用共享相同资源，避免潜在错误。深拷贝的实现通常需要自定义拷贝构造函数和重载=运算符。\n\n``` c++\n#include <iostream>\n#include <cstring>\n\nclass MyClass {\npublic:\n    MyClass(const char* str) {\n        data = new char[strlen(str) + 1];\n        strcpy(data, str);\n    }\n\n    // 深拷贝的拷贝构造函数\n    MyClass(const MyClass& other) {\n        data = new char[strlen(other.data) + 1];\n        strcpy(data, other.data);\n    }\n\n    // 深拷贝的赋值运算符重载\n    MyClass& operator=(const MyClass& other) {\n        if (this == &other) {\n            return *this;\n        }\n        \n        delete[] data;\n        data = new char[strlen(other.data) + 1];\n        strcpy(data, other.data);\n        \n        return *this;\n    }\n    \n   void SetString(const char* str) {\n     if (data != NULL) {\n       delete[] data;\n     }\n     data = new char[strlen(str) + 1];\n     strcpy(data, str);\n   }\n   \n    ~MyClass() {\n        delete[] data;\n    }\n\n    void print() {\n        std::cout << data << std::endl;\n    }\n\nprivate:\n    char* data;\n};\n\nint main() {\n    MyClass obj1(\"Hello, World!\");\n    MyClass obj2 = obj1; // 深拷贝\n\n    obj1.print(); // 输出：Hello, World!\n    obj2.print(); // 输出：Hello, World!\n\n    // 修改obj2中的数据，不会影响obj1\n    obj1.SetString(\"Test\");\n    obj2.print(); // 输出：Hello, World!\n    return 0;\n}\n```\n\n## C++多态实现的方式\nC++中的多态指的是一个函数或者操作在不同的对象上有不同的表现方式，主要包括虚函数、纯虚函数和模板函数。虚函数和纯虚函数实现的多态称为动态多态，模板函数、重载实现的多态称为静态多态。\n\n静态和动态的区别在于是在编译期还是运行时。\n\n虚函数是基类声明的可以被派生类重写的函数。使用指向基类的指针或者引用可以调用被派生类重写的函数，实现多态。\n\n- 通过基类指针或引用调用虚函数\n- 被调用的函数是虚函数且必须被派生类重写\n\n``` c++\nclass Shape {\n   public:\n      virtual int area() = 0;\n};\n\nclass Rectangle: public Shape {\n   public:\n      int area () { \n         cout << \"Rectangle class area :\"; \n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape{\n   public:\n      int area () { \n         cout << \"Triangle class area :\"; \n         return (width * height / 2); \n      }\n};\n\nint main() {\n   Shape *shape;\n   Rectangle rec(10,7);\n   Triangle  tri(10,5);\n\n   shape = &rec;\n   shape->area();\n\n   shape = &tri;\n   shape->area();\n\n   return 0;\n}\n```\n\n模板函数可以根据传递参数的不同类型，自动生成相应类型的函数代码，从而实现多态。\n\n``` c++\ntemplate <class T>\nT GetMax (T a, T b) {\n   return (a>b?a:b);\n}\n\nint main () {\n   int i=5, j=6, k;\n   long l=10, m=5, n;\n   k=GetMax<int>(i,j);\n   n=GetMax<long>(l,m);\n   cout << k << endl;\n   cout << n << endl;\n   return 0;\n}\n```\n编译器会生成两个GetMax函数实例，参数类型分别为int和long。\n \n## C++ RAII思想\nRAII即Resource Acqusition is Initialization，资源获取即初始化。\n\nRAII将资源的生命周期与对象的作用域关联起来，核心思想是将资源（如内存、文件句柄、网络连接等）的获取和释放与对象的生命周期绑定在一起，利用栈上局部变量的自动析构来保证资源一定会被释放。\n\n一般设计一个RAII类的四个步骤：\n- 设计一个类封装资源\n- 在构造函数中执行资源的初始化，比如申请内存、打开文件、申请锁\n- 在析构函数中执行销毁资源，比如释放内存、关闭文件、释放锁\n- 使用时声明一个该类的对象\n\n``` c++\n#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream myfile(\"example.txt\"); // 换自己的文件路径\n    if (myfile.is_open()) {\n        std::cout << \"File is opened.\" << std::endl;\n        // do some work with the file\n    }\n    else {\n        std::cout << \"Failed to open the file.\" << std::endl;\n    }\n    myfile.close();\n    return 0;\n}\n```\n上述代码手动实现文件的打开与关闭，但是当程序异常退出时，可能导致打开的文件没有关闭，导致资源的泄露。这是可以利用RAII的思想进行改进，如下。\n\n```c++\n#include <iostream>\n#include <fstream>\n\nclass File {\npublic:\n    File(const char* filename) : m_handle(std::ifstream(filename)) {}\n    ~File() {\n        if (m_handle.is_open()) {\n            std::cout << \"File is closed.\" << std::endl;\n            m_handle.close();\n        }\n    }\n\n    std::ifstream& getHandle() {\n        return m_handle;\n    }\n\nprivate:\n    std::ifstream m_handle;\n};\n\nint main() {\n    File myfile(\"example.txt\");\n    if (myfile.getHandle().is_open()) {\n        std::cout << \"File is opened.\" << std::endl;\n        // do some work with the file\n    }\n    else {\n        std::cout << \"Failed to open the file.\" << std::endl;\n    }\n    return 0;\n}\n```\n定义一个File类，构造函数中实现打开文件，析构函数中实现关闭文件，这样即使程序遇到异常退出，析构函数也能保证文件的关闭，从而不会发生内存泄漏等问题。\n\nRAII思想也可以包装mutex：\n\n```c++\n#include <iostream>\n#include <mutex>\n#include <thread>\n\nclass LockGuard {\npublic:\n    explicit LockGuard(std::mutex &mtx) : mutex_(mtx) {\n        mutex_.lock();\n    }\n\n    ~LockGuard() {\n        mutex_.unlock();\n    }\n\n    // 禁止复制\n    LockGuard(const LockGuard &) = delete;\n    LockGuard &operator=(const LockGuard &) = delete;\n\nprivate:\n    std::mutex &mutex_;\n};\n\n// 互斥量\nstd::mutex mtx;\n// 多线程操作的变量\nint shared_data = 0;\n\nvoid increment() {\n    for (int i = 0; i < 10000; ++i) {\n        // 申请锁\n        LockGuard lock(mtx);\n        ++shared_data;\n        // 作用域结束后会析构 然后释放锁\n    }\n}\n\nint main() {\n    std::thread t1(increment);\n    std::thread t2(increment);\n\n    t1.join();\n    t2.join();\n\n    std::cout << \"Shared data: \" << shared_data << std::endl;\n\n    return 0;\n}\n```\n\n## C++智能指针\n- std::shared_ptr\n\n表示一个共享所有权的智能指针，它允许多个shared_ptr指向同一个对象，当最后一个shared_ptr超出作用域时，其所指向的内存才会被自动释放。\n\nstd::shared_ptr实现的关键是引用计数。shared_ptr内部存储了一个指向堆内存的指针，将计数变量存储在堆上。\n\nshared_ptr可能会导致double free问题，即同一块内存可能会被释放两次。\n解决该问题的方法：\n- 使用make_shared函数创建shared_ptr实例，而不直接使用原始指针来创建，这样就确保所有的shared_ptr共享一个引用计数\n- 对于出现循环引用的情况，使用weak_ptr\n```c++\n#include <memory>\n#include <iostream>\n\nint main() {\n    std::shared_ptr<int> ptr1(new int(10));\n    std::shared_ptr<int> ptr2 = ptr1; // 通过拷贝构造函数创建一个新的shared_ptr，此时引用计数为2\n    std::cout << *ptr1 << \" \" << *ptr2 << std::endl; // 输出10 10\n    // ptr2超出作用域时，所指向的内存不会被释放，因为此时ptr1仍然持有对该内存的引用\n    return 0;\n}\n```\n实现一个简易版本的shared_ptr\n```c++\n//实现一个简易版本的shared_ptr\n#include <iostream>\n\ntemplate <typename T>\nclass SimperSharedPtr {\npublic:\n    explicit SimperSharedPtr(T *_ptr = nullptr): ptr(_ptr), count(ptr ? new size_t(1) : nullptr){}\n\n    SimperSharedPtr(const SimperSharedPtr& other): ptr(other.ptr), count(other.count) {\n        if (count) {\n            ++ (*count);\n        }\n    }\n\n   SimperSharedPtr& operator=(const SimperSharedPtr& other) {\n        if (this != &other) {\n            release();\n            ptr = other.ptr;\n            count = other.count;\n            if (count) {\n                ++ (*count);\n            }\n        }\n        return *this;\n   } \n   \n    ~ SimperSharedPtr() {\n        release();\n    }\n\nprivate:\n    void release() {\n        if (count && -- (*count) == 0) {\n            delete count;\n            delete ptr;\n        }\n    }\n    size_t* count;\n    T* ptr;\n};\n```\n- std::unique_ptr\n\n表示一个独占所有权的智能指针，保证指向的内存只能被unique_ptr拥有。当它超过作用域时其所指向的内存会自动释放。\n```c++\n#include <memory>\n#include <iostream>\n\nint main() {\n    std::unique_ptr<int> ptr(new int(5));\n    std::cout << *ptr << std::endl; // 输出5\n    // unique_ptr在超出作用域时自动释放所拥有的内存\n    return 0;\n}\n```\n智能指针可以提高程序的安全性和可靠性，避免内存泄漏和野指针的问题。\n\n未完待续\n---","source":"_posts/C++知识点回顾.md","raw":"---\ntitle: C++知识点回顾\ndate: 2024-2-1 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: C++\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n## C++中的sizeof关键字\n是c语言中的运算符，计算一个类型/对象所占用的内存的大小。\n- 指针的大小是固定的。32位处理器就是4字节，64位处理器就是8字节\n- 数组当函数参数时会退化为指针，大小按指针算\n- 计算struct大小时要考虑内存对齐\n- 字符串数组大小要包含最后的'\\0'\n\n## C++中的const关键字\n用于表示常量。\n- 修饰变量时代表该变量只读\n- 修饰指针时用于声明本身为只读变量或者指向只读变量的指针\n\n``` c++\nconst int *p;//指向只读变量的指针，可以改变指针的指向，不能通过指针修改所指向只读变量的值\nint a = 10;\nconst int b = 20;\np = &a;//合法，可以指向普通变量\np = &b;//合法，可以指向只读变量\n*p = 30;//非法，不能通过指针修改只读变量的值\n```\n\n```c++\nint a = 10;\nint b = 20;\nint* const p = &a;//只读指针,指向a\n*p = 30;//合法，可以通过指针修改指向变量的值\np = &b;//非法，不能修改指针（即修改指针的指向）\n```\n\n## C++字节对齐\nC++字节对齐是对内存分配的一种策略。编译器会自动调整数据结构在内存中的分布。如果不对内存中的数据进行适当的对齐而只是顺序排列，会降低存取效率。\n\n优点：提高了内存访问的效率l\n\n缺点：浪费内存空间\n\n## typedef和define的区别\ndefine用于定义预处理宏，在预处理阶段进行处理，在编译之前有预处理器进行文本替换。无类型检查。全局有效。\n\ntypedef用于为现有的数据类型创建别名，在编译时进行处理。提供类型检查，保证类型安全。有作用域，仅定义它的作用域内有效。\n\n## C++中class和struct的区别\nC++兼容了C中的struct，并扩展其含义。在C中，struct只能包含成员变量，不能包含成员函数，而C++中既可包含成员变量，又可定义成员函数。类似class。\n\n不同点：\n- class中成员默认是private，struct中默认是public\n- class继承默认是private继承，struct继承默认是public继承\n- class可以用来定义模板参数，struct则不行\n\n## C++内联函数（inline）\n函数声明前加上inline，编译器会尝试用函数体替换内联函数调用处，从而避免函数调用的开销。\n\n但是编译器不一定会将所有声明为内联函数的函数都进行内联，是否执行取决于编译器的优化和是实现策略。优点是类型安全，可调试，可优化。同时注意由于函数体会被复制多次，会占用代码段空间，有些情况下会导致代码膨胀。\n\n## C++类型转换\n- static_cast\n``` c++\n//基本类型之间的转换\nint a = 42;\ndouble b = static_cast<double>(a);//将整数a转换为双精度浮点数b\n\n//指针之间的转换\nclass Base{}\nclass Derived: public Base{}\n\nBase* base_ptr = new Derived();\n//将基类的base_ptr转换为派生类的derived_ptr\nDerived* derived_ptr = static_cast<Derived*>(base_ptr);\n\nDerived derived_obj;\nBase& base_ref = derived_obj;\n//将基类的引用转换为派生类的引用\nDerived& derived_ref = static_cast<Derived&>(base_ref);\n```\nstatic_cast在编译器进行类型转换，在进行指针或引用转换时，保证转换合法。\n\n- dynamic_cast\n``` c++\nclass Base { virtual void dummy() {} };\nclass Derived : public Base { int a; };\n\nBase* base_ptr = new Derived();\n// 将基类指针base_ptr转换为派生类指针derived_ptr，如果类型兼容，则成功\nDerived* derived_ptr = dynamic_cast<Derived*>(base_ptr); \n\n//用于多态类型检查\nclass Animal { public: virtual ~Animal() {} };\nclass Dog : public Animal { public: void bark() { /* ... */ } };\nclass Cat : public Animal { public: void meow() { /* ... */ } };\n\nAnimal* animal_ptr = /* ... */;\n\n// 尝试将Animal指针转换为Dog指针\nDog* dog_ptr = dynamic_cast<Dog*>(animal_ptr);\nif (dog_ptr) {\n    dog_ptr->bark();\n}\n\n// 尝试将Animal指针转换为Cat指针\nCat* cat_ptr = dynamic_cast<Cat*>(animal_ptr);\nif (cat_ptr) {\n    cat_ptr->meow();\n}\n```\ndynamic_cast主要应用于父类与子类中的安全类型转换，在运行时执行类型检查，所以相比static_cast其更安全。\n\ndynamic_cast要想有效，基类必须有虚函数（虚函数表），这样才有可能将基类指针转换为子类。\n\n- const_cast\n``` C++\n//可以修改const属性，使得可以修改\nconst int a = 5;\nint* mutable_ptr = const_cast<int*>(&a);\n*mutable_ptr = 4;\n```\nconst_cast<new type> (expression)，new type必须是一个指针、引用或者指向对象类型成员的指针。\n\n- reinterpret_cast\n``` C++\nint a = 42;\nint *int_ptr = &a;\nchar *char_ptr = reinterpret_cast<int*>(int_ptr);\n```\n字面意义上看是重新翻译转型，就是重新解释底层bit，而不做任何类型检查。\n\n## C++面向对象三大特性\n- 封装\n\n封装就是将数据（属性）和操作这些数据的函数（方法）组合在一个类中的过程。隐藏了类的内部实现细节，仅暴露必要的接口给外部。\n\n- 继承\n\n继承是一个类从另一个类获取属性和方法的过程，允许我们创建类层次的代码结构，减少重复代码，提高代码的复用性和可维护性。\n\n- 多态\n\n多态是允许不同的类对象使用相同的接口名字，但具有不同的实现特性。\nC++中多态主要通过虚函数和抽象基类来实现。\n\n虚函数允许派生类实现基类的方法，而抽象基类包含至少一个纯虚函数，无法被实例化，只能作为其它派生类的基类。\n\n通过多态，可以编写更加通用的代码，提高代码的灵活性。\n\n## C++类初始化和析构顺序\n初始化顺序：\n\n1、首先是基类初始化顺序。如果当前的类继承自一或多个类，按照声明顺序进行初始化，但是有虚继承的话，优先虚继承。\n\n2、成员变量初始化。按照在类中声明的顺序进行初始化。\n\n3、执行该类构造函数。\n\n析构顺序和初始化顺序相反。\n\n## 深拷贝和浅拷贝\n浅拷贝（shallow copy）是一种简单的拷贝方式，仅复制对象的基本类型成员和指针成员的值，而不复制指针所指向的内存。这样会导致两个类对象使用相同的内存，产生内存泄漏等问题。一般地，默认编译器实现的拷贝构造函数是浅拷贝。\n\n深拷贝（deep copy）包含浅拷贝的情况下，还复制指针指向的内存，所以两个对象不用共享相同资源，避免潜在错误。深拷贝的实现通常需要自定义拷贝构造函数和重载=运算符。\n\n``` c++\n#include <iostream>\n#include <cstring>\n\nclass MyClass {\npublic:\n    MyClass(const char* str) {\n        data = new char[strlen(str) + 1];\n        strcpy(data, str);\n    }\n\n    // 深拷贝的拷贝构造函数\n    MyClass(const MyClass& other) {\n        data = new char[strlen(other.data) + 1];\n        strcpy(data, other.data);\n    }\n\n    // 深拷贝的赋值运算符重载\n    MyClass& operator=(const MyClass& other) {\n        if (this == &other) {\n            return *this;\n        }\n        \n        delete[] data;\n        data = new char[strlen(other.data) + 1];\n        strcpy(data, other.data);\n        \n        return *this;\n    }\n    \n   void SetString(const char* str) {\n     if (data != NULL) {\n       delete[] data;\n     }\n     data = new char[strlen(str) + 1];\n     strcpy(data, str);\n   }\n   \n    ~MyClass() {\n        delete[] data;\n    }\n\n    void print() {\n        std::cout << data << std::endl;\n    }\n\nprivate:\n    char* data;\n};\n\nint main() {\n    MyClass obj1(\"Hello, World!\");\n    MyClass obj2 = obj1; // 深拷贝\n\n    obj1.print(); // 输出：Hello, World!\n    obj2.print(); // 输出：Hello, World!\n\n    // 修改obj2中的数据，不会影响obj1\n    obj1.SetString(\"Test\");\n    obj2.print(); // 输出：Hello, World!\n    return 0;\n}\n```\n\n## C++多态实现的方式\nC++中的多态指的是一个函数或者操作在不同的对象上有不同的表现方式，主要包括虚函数、纯虚函数和模板函数。虚函数和纯虚函数实现的多态称为动态多态，模板函数、重载实现的多态称为静态多态。\n\n静态和动态的区别在于是在编译期还是运行时。\n\n虚函数是基类声明的可以被派生类重写的函数。使用指向基类的指针或者引用可以调用被派生类重写的函数，实现多态。\n\n- 通过基类指针或引用调用虚函数\n- 被调用的函数是虚函数且必须被派生类重写\n\n``` c++\nclass Shape {\n   public:\n      virtual int area() = 0;\n};\n\nclass Rectangle: public Shape {\n   public:\n      int area () { \n         cout << \"Rectangle class area :\"; \n         return (width * height); \n      }\n};\n\nclass Triangle: public Shape{\n   public:\n      int area () { \n         cout << \"Triangle class area :\"; \n         return (width * height / 2); \n      }\n};\n\nint main() {\n   Shape *shape;\n   Rectangle rec(10,7);\n   Triangle  tri(10,5);\n\n   shape = &rec;\n   shape->area();\n\n   shape = &tri;\n   shape->area();\n\n   return 0;\n}\n```\n\n模板函数可以根据传递参数的不同类型，自动生成相应类型的函数代码，从而实现多态。\n\n``` c++\ntemplate <class T>\nT GetMax (T a, T b) {\n   return (a>b?a:b);\n}\n\nint main () {\n   int i=5, j=6, k;\n   long l=10, m=5, n;\n   k=GetMax<int>(i,j);\n   n=GetMax<long>(l,m);\n   cout << k << endl;\n   cout << n << endl;\n   return 0;\n}\n```\n编译器会生成两个GetMax函数实例，参数类型分别为int和long。\n \n## C++ RAII思想\nRAII即Resource Acqusition is Initialization，资源获取即初始化。\n\nRAII将资源的生命周期与对象的作用域关联起来，核心思想是将资源（如内存、文件句柄、网络连接等）的获取和释放与对象的生命周期绑定在一起，利用栈上局部变量的自动析构来保证资源一定会被释放。\n\n一般设计一个RAII类的四个步骤：\n- 设计一个类封装资源\n- 在构造函数中执行资源的初始化，比如申请内存、打开文件、申请锁\n- 在析构函数中执行销毁资源，比如释放内存、关闭文件、释放锁\n- 使用时声明一个该类的对象\n\n``` c++\n#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream myfile(\"example.txt\"); // 换自己的文件路径\n    if (myfile.is_open()) {\n        std::cout << \"File is opened.\" << std::endl;\n        // do some work with the file\n    }\n    else {\n        std::cout << \"Failed to open the file.\" << std::endl;\n    }\n    myfile.close();\n    return 0;\n}\n```\n上述代码手动实现文件的打开与关闭，但是当程序异常退出时，可能导致打开的文件没有关闭，导致资源的泄露。这是可以利用RAII的思想进行改进，如下。\n\n```c++\n#include <iostream>\n#include <fstream>\n\nclass File {\npublic:\n    File(const char* filename) : m_handle(std::ifstream(filename)) {}\n    ~File() {\n        if (m_handle.is_open()) {\n            std::cout << \"File is closed.\" << std::endl;\n            m_handle.close();\n        }\n    }\n\n    std::ifstream& getHandle() {\n        return m_handle;\n    }\n\nprivate:\n    std::ifstream m_handle;\n};\n\nint main() {\n    File myfile(\"example.txt\");\n    if (myfile.getHandle().is_open()) {\n        std::cout << \"File is opened.\" << std::endl;\n        // do some work with the file\n    }\n    else {\n        std::cout << \"Failed to open the file.\" << std::endl;\n    }\n    return 0;\n}\n```\n定义一个File类，构造函数中实现打开文件，析构函数中实现关闭文件，这样即使程序遇到异常退出，析构函数也能保证文件的关闭，从而不会发生内存泄漏等问题。\n\nRAII思想也可以包装mutex：\n\n```c++\n#include <iostream>\n#include <mutex>\n#include <thread>\n\nclass LockGuard {\npublic:\n    explicit LockGuard(std::mutex &mtx) : mutex_(mtx) {\n        mutex_.lock();\n    }\n\n    ~LockGuard() {\n        mutex_.unlock();\n    }\n\n    // 禁止复制\n    LockGuard(const LockGuard &) = delete;\n    LockGuard &operator=(const LockGuard &) = delete;\n\nprivate:\n    std::mutex &mutex_;\n};\n\n// 互斥量\nstd::mutex mtx;\n// 多线程操作的变量\nint shared_data = 0;\n\nvoid increment() {\n    for (int i = 0; i < 10000; ++i) {\n        // 申请锁\n        LockGuard lock(mtx);\n        ++shared_data;\n        // 作用域结束后会析构 然后释放锁\n    }\n}\n\nint main() {\n    std::thread t1(increment);\n    std::thread t2(increment);\n\n    t1.join();\n    t2.join();\n\n    std::cout << \"Shared data: \" << shared_data << std::endl;\n\n    return 0;\n}\n```\n\n## C++智能指针\n- std::shared_ptr\n\n表示一个共享所有权的智能指针，它允许多个shared_ptr指向同一个对象，当最后一个shared_ptr超出作用域时，其所指向的内存才会被自动释放。\n\nstd::shared_ptr实现的关键是引用计数。shared_ptr内部存储了一个指向堆内存的指针，将计数变量存储在堆上。\n\nshared_ptr可能会导致double free问题，即同一块内存可能会被释放两次。\n解决该问题的方法：\n- 使用make_shared函数创建shared_ptr实例，而不直接使用原始指针来创建，这样就确保所有的shared_ptr共享一个引用计数\n- 对于出现循环引用的情况，使用weak_ptr\n```c++\n#include <memory>\n#include <iostream>\n\nint main() {\n    std::shared_ptr<int> ptr1(new int(10));\n    std::shared_ptr<int> ptr2 = ptr1; // 通过拷贝构造函数创建一个新的shared_ptr，此时引用计数为2\n    std::cout << *ptr1 << \" \" << *ptr2 << std::endl; // 输出10 10\n    // ptr2超出作用域时，所指向的内存不会被释放，因为此时ptr1仍然持有对该内存的引用\n    return 0;\n}\n```\n实现一个简易版本的shared_ptr\n```c++\n//实现一个简易版本的shared_ptr\n#include <iostream>\n\ntemplate <typename T>\nclass SimperSharedPtr {\npublic:\n    explicit SimperSharedPtr(T *_ptr = nullptr): ptr(_ptr), count(ptr ? new size_t(1) : nullptr){}\n\n    SimperSharedPtr(const SimperSharedPtr& other): ptr(other.ptr), count(other.count) {\n        if (count) {\n            ++ (*count);\n        }\n    }\n\n   SimperSharedPtr& operator=(const SimperSharedPtr& other) {\n        if (this != &other) {\n            release();\n            ptr = other.ptr;\n            count = other.count;\n            if (count) {\n                ++ (*count);\n            }\n        }\n        return *this;\n   } \n   \n    ~ SimperSharedPtr() {\n        release();\n    }\n\nprivate:\n    void release() {\n        if (count && -- (*count) == 0) {\n            delete count;\n            delete ptr;\n        }\n    }\n    size_t* count;\n    T* ptr;\n};\n```\n- std::unique_ptr\n\n表示一个独占所有权的智能指针，保证指向的内存只能被unique_ptr拥有。当它超过作用域时其所指向的内存会自动释放。\n```c++\n#include <memory>\n#include <iostream>\n\nint main() {\n    std::unique_ptr<int> ptr(new int(5));\n    std::cout << *ptr << std::endl; // 输出5\n    // unique_ptr在超出作用域时自动释放所拥有的内存\n    return 0;\n}\n```\n智能指针可以提高程序的安全性和可靠性，避免内存泄漏和野指针的问题。\n\n未完待续\n---","slug":"C++知识点回顾","published":1,"updated":"2024-03-11T14:48:52.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsog0001y0vmf5ec28a4","content":"<h2 id=\"C-中的sizeof关键字\"><a href=\"#C-中的sizeof关键字\" class=\"headerlink\" title=\"C++中的sizeof关键字\"></a>C++中的sizeof关键字</h2><p>是c语言中的运算符，计算一个类型/对象所占用的内存的大小。</p>\n<ul>\n<li>指针的大小是固定的。32位处理器就是4字节，64位处理器就是8字节</li>\n<li>数组当函数参数时会退化为指针，大小按指针算</li>\n<li>计算struct大小时要考虑内存对齐</li>\n<li>字符串数组大小要包含最后的’\\0’</li>\n</ul>\n<h2 id=\"C-中的const关键字\"><a href=\"#C-中的const关键字\" class=\"headerlink\" title=\"C++中的const关键字\"></a>C++中的const关键字</h2><p>用于表示常量。</p>\n<ul>\n<li>修饰变量时代表该变量只读</li>\n<li>修饰指针时用于声明本身为只读变量或者指向只读变量的指针</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> *p;<span class=\"comment\">//指向只读变量的指针，可以改变指针的指向，不能通过指针修改所指向只读变量的值</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">p = &amp;a;<span class=\"comment\">//合法，可以指向普通变量</span></span><br><span class=\"line\">p = &amp;b;<span class=\"comment\">//合法，可以指向只读变量</span></span><br><span class=\"line\">*p = <span class=\"number\">30</span>;<span class=\"comment\">//非法，不能通过指针修改只读变量的值</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> p = &amp;a;<span class=\"comment\">//只读指针,指向a</span></span><br><span class=\"line\">*p = <span class=\"number\">30</span>;<span class=\"comment\">//合法，可以通过指针修改指向变量的值</span></span><br><span class=\"line\">p = &amp;b;<span class=\"comment\">//非法，不能修改指针（即修改指针的指向）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"C-字节对齐\"><a href=\"#C-字节对齐\" class=\"headerlink\" title=\"C++字节对齐\"></a>C++字节对齐</h2><p>C++字节对齐是对内存分配的一种策略。编译器会自动调整数据结构在内存中的分布。如果不对内存中的数据进行适当的对齐而只是顺序排列，会降低存取效率。</p>\n<p>优点：提高了内存访问的效率l</p>\n<p>缺点：浪费内存空间</p>\n<h2 id=\"typedef和define的区别\"><a href=\"#typedef和define的区别\" class=\"headerlink\" title=\"typedef和define的区别\"></a>typedef和define的区别</h2><p>define用于定义预处理宏，在预处理阶段进行处理，在编译之前有预处理器进行文本替换。无类型检查。全局有效。</p>\n<p>typedef用于为现有的数据类型创建别名，在编译时进行处理。提供类型检查，保证类型安全。有作用域，仅定义它的作用域内有效。</p>\n<h2 id=\"C-中class和struct的区别\"><a href=\"#C-中class和struct的区别\" class=\"headerlink\" title=\"C++中class和struct的区别\"></a>C++中class和struct的区别</h2><p>C++兼容了C中的struct，并扩展其含义。在C中，struct只能包含成员变量，不能包含成员函数，而C++中既可包含成员变量，又可定义成员函数。类似class。</p>\n<p>不同点：</p>\n<ul>\n<li>class中成员默认是private，struct中默认是public</li>\n<li>class继承默认是private继承，struct继承默认是public继承</li>\n<li>class可以用来定义模板参数，struct则不行</li>\n</ul>\n<h2 id=\"C-内联函数（inline）\"><a href=\"#C-内联函数（inline）\" class=\"headerlink\" title=\"C++内联函数（inline）\"></a>C++内联函数（inline）</h2><p>函数声明前加上inline，编译器会尝试用函数体替换内联函数调用处，从而避免函数调用的开销。</p>\n<p>但是编译器不一定会将所有声明为内联函数的函数都进行内联，是否执行取决于编译器的优化和是实现策略。优点是类型安全，可调试，可优化。同时注意由于函数体会被复制多次，会占用代码段空间，有些情况下会导致代码膨胀。</p>\n<h2 id=\"C-类型转换\"><a href=\"#C-类型转换\" class=\"headerlink\" title=\"C++类型转换\"></a>C++类型转换</h2><ul>\n<li><p>static_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本类型之间的转换</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> b = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(a);<span class=\"comment\">//将整数a转换为双精度浮点数b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针之间的转换</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span>: <span class=\"keyword\">public</span> Base&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Base* base_ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\"><span class=\"comment\">//将基类的base_ptr转换为派生类的derived_ptr</span></span><br><span class=\"line\">Derived* derived_ptr = <span class=\"built_in\">static_cast</span>&lt;Derived*&gt;(base_ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">Derived derived_obj;</span><br><span class=\"line\">Base&amp; base_ref = derived_obj;</span><br><span class=\"line\"><span class=\"comment\">//将基类的引用转换为派生类的引用</span></span><br><span class=\"line\">Derived&amp; derived_ref = <span class=\"built_in\">static_cast</span>&lt;Derived&amp;&gt;(base_ref);</span><br></pre></td></tr></table></figure>\n<p>static_cast在编译器进行类型转换，在进行指针或引用转换时，保证转换合法。</p>\n</li>\n<li><p>dynamic_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123; <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">dummy</span><span class=\"params\">()</span> </span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123; <span class=\"type\">int</span> a; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Base* base_ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\"><span class=\"comment\">// 将基类指针base_ptr转换为派生类指针derived_ptr，如果类型兼容，则成功</span></span><br><span class=\"line\">Derived* derived_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(base_ptr); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于多态类型检查</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123; <span class=\"keyword\">public</span>: <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Animal</span>() &#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal &#123; <span class=\"keyword\">public</span>: <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal &#123; <span class=\"keyword\">public</span>: <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal* animal_ptr = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试将Animal指针转换为Dog指针</span></span><br><span class=\"line\">Dog* dog_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Dog*&gt;(animal_ptr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dog_ptr) &#123;</span><br><span class=\"line\">    dog_ptr-&gt;<span class=\"built_in\">bark</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试将Animal指针转换为Cat指针</span></span><br><span class=\"line\">Cat* cat_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Cat*&gt;(animal_ptr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cat_ptr) &#123;</span><br><span class=\"line\">    cat_ptr-&gt;<span class=\"built_in\">meow</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dynamic_cast主要应用于父类与子类中的安全类型转换，在运行时执行类型检查，所以相比static_cast其更安全。</p>\n</li>\n</ul>\n<p>dynamic_cast要想有效，基类必须有虚函数（虚函数表），这样才有可能将基类指针转换为子类。</p>\n<ul>\n<li><p>const_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以修改const属性，使得可以修改</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* mutable_ptr = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>*&gt;(&amp;a);</span><br><span class=\"line\">*mutable_ptr = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>const_cast<new type> (expression)，new type必须是一个指针、引用或者指向对象类型成员的指针。</p>\n</li>\n<li><p>reinterpret_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *int_ptr = &amp;a;</span><br><span class=\"line\"><span class=\"type\">char</span> *char_ptr = <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">int</span>*&gt;(int_ptr);</span><br></pre></td></tr></table></figure>\n<p>字面意义上看是重新翻译转型，就是重新解释底层bit，而不做任何类型检查。</p>\n</li>\n</ul>\n<h2 id=\"C-面向对象三大特性\"><a href=\"#C-面向对象三大特性\" class=\"headerlink\" title=\"C++面向对象三大特性\"></a>C++面向对象三大特性</h2><ul>\n<li>封装</li>\n</ul>\n<p>封装就是将数据（属性）和操作这些数据的函数（方法）组合在一个类中的过程。隐藏了类的内部实现细节，仅暴露必要的接口给外部。</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>继承是一个类从另一个类获取属性和方法的过程，允许我们创建类层次的代码结构，减少重复代码，提高代码的复用性和可维护性。</p>\n<ul>\n<li>多态</li>\n</ul>\n<p>多态是允许不同的类对象使用相同的接口名字，但具有不同的实现特性。<br>C++中多态主要通过虚函数和抽象基类来实现。</p>\n<p>虚函数允许派生类实现基类的方法，而抽象基类包含至少一个纯虚函数，无法被实例化，只能作为其它派生类的基类。</p>\n<p>通过多态，可以编写更加通用的代码，提高代码的灵活性。</p>\n<h2 id=\"C-类初始化和析构顺序\"><a href=\"#C-类初始化和析构顺序\" class=\"headerlink\" title=\"C++类初始化和析构顺序\"></a>C++类初始化和析构顺序</h2><p>初始化顺序：</p>\n<p>1、首先是基类初始化顺序。如果当前的类继承自一或多个类，按照声明顺序进行初始化，但是有虚继承的话，优先虚继承。</p>\n<p>2、成员变量初始化。按照在类中声明的顺序进行初始化。</p>\n<p>3、执行该类构造函数。</p>\n<p>析构顺序和初始化顺序相反。</p>\n<h2 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h2><p>浅拷贝（shallow copy）是一种简单的拷贝方式，仅复制对象的基本类型成员和指针成员的值，而不复制指针所指向的内存。这样会导致两个类对象使用相同的内存，产生内存泄漏等问题。一般地，默认编译器实现的拷贝构造函数是浅拷贝。</p>\n<p>深拷贝（deep copy）包含浅拷贝的情况下，还复制指针指向的内存，所以两个对象不用共享相同资源，避免潜在错误。深拷贝的实现通常需要自定义拷贝构造函数和重载=运算符。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* str) &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深拷贝的拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">const</span> MyClass&amp; other) &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深拷贝的赋值运算符重载</span></span><br><span class=\"line\">    MyClass&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> MyClass&amp; other) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SetString</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (data != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"built_in\">strcpy</span>(data, str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">MyClass <span class=\"title\">obj1</span><span class=\"params\">(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span></span>;</span><br><span class=\"line\">    MyClass obj2 = obj1; <span class=\"comment\">// 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">    obj1.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\">    obj2.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改obj2中的数据，不会影响obj1</span></span><br><span class=\"line\">    obj1.<span class=\"built_in\">SetString</span>(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">    obj2.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-多态实现的方式\"><a href=\"#C-多态实现的方式\" class=\"headerlink\" title=\"C++多态实现的方式\"></a>C++多态实现的方式</h2><p>C++中的多态指的是一个函数或者操作在不同的对象上有不同的表现方式，主要包括虚函数、纯虚函数和模板函数。虚函数和纯虚函数实现的多态称为动态多态，模板函数、重载实现的多态称为静态多态。</p>\n<p>静态和动态的区别在于是在编译期还是运行时。</p>\n<p>虚函数是基类声明的可以被派生类重写的函数。使用指向基类的指针或者引用可以调用被派生类重写的函数，实现多态。</p>\n<ul>\n<li>通过基类指针或引用调用虚函数</li>\n<li>被调用的函数是虚函数且必须被派生类重写</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span>: <span class=\"keyword\">public</span> Shape &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">area</span> <span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;Rectangle class area :&quot;</span>; </span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span>: <span class=\"keyword\">public</span> Shape&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">area</span> <span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;Triangle class area :&quot;</span>; </span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height / <span class=\"number\">2</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Shape *shape;</span><br><span class=\"line\">   <span class=\"function\">Rectangle <span class=\"title\">rec</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">7</span>)</span></span>;</span><br><span class=\"line\">   <span class=\"function\">Triangle  <span class=\"title\">tri</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   shape = &amp;rec;</span><br><span class=\"line\">   shape-&gt;<span class=\"built_in\">area</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   shape = &amp;tri;</span><br><span class=\"line\">   shape-&gt;<span class=\"built_in\">area</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>模板函数可以根据传递参数的不同类型，自动生成相应类型的函数代码，从而实现多态。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">GetMax</span> <span class=\"params\">(T a, T b)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (a&gt;b?a:b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> i=<span class=\"number\">5</span>, j=<span class=\"number\">6</span>, k;</span><br><span class=\"line\">   <span class=\"type\">long</span> l=<span class=\"number\">10</span>, m=<span class=\"number\">5</span>, n;</span><br><span class=\"line\">   k=<span class=\"built_in\">GetMax</span>&lt;<span class=\"type\">int</span>&gt;(i,j);</span><br><span class=\"line\">   n=<span class=\"built_in\">GetMax</span>&lt;<span class=\"type\">long</span>&gt;(l,m);</span><br><span class=\"line\">   cout &lt;&lt; k &lt;&lt; endl;</span><br><span class=\"line\">   cout &lt;&lt; n &lt;&lt; endl;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器会生成两个GetMax函数实例，参数类型分别为int和long。</p>\n<h2 id=\"C-RAII思想\"><a href=\"#C-RAII思想\" class=\"headerlink\" title=\"C++ RAII思想\"></a>C++ RAII思想</h2><p>RAII即Resource Acqusition is Initialization，资源获取即初始化。</p>\n<p>RAII将资源的生命周期与对象的作用域关联起来，核心思想是将资源（如内存、文件句柄、网络连接等）的获取和释放与对象的生命周期绑定在一起，利用栈上局部变量的自动析构来保证资源一定会被释放。</p>\n<p>一般设计一个RAII类的四个步骤：</p>\n<ul>\n<li>设计一个类封装资源</li>\n<li>在构造函数中执行资源的初始化，比如申请内存、打开文件、申请锁</li>\n<li>在析构函数中执行销毁资源，比如释放内存、关闭文件、释放锁</li>\n<li>使用时声明一个该类的对象</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::ifstream <span class=\"title\">myfile</span><span class=\"params\">(<span class=\"string\">&quot;example.txt&quot;</span>)</span></span>; <span class=\"comment\">// 换自己的文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myfile.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;File is opened.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// do some work with the file</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to open the file.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码手动实现文件的打开与关闭，但是当程序异常退出时，可能导致打开的文件没有关闭，导致资源的泄露。这是可以利用RAII的思想进行改进，如下。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">File</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">File</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* filename) : <span class=\"built_in\">m_handle</span>(std::ifstream(filename)) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">File</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_handle.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;File is closed.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            m_handle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::ifstream&amp; <span class=\"title\">getHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_handle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::ifstream m_handle;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">File <span class=\"title\">myfile</span><span class=\"params\">(<span class=\"string\">&quot;example.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myfile.<span class=\"built_in\">getHandle</span>().<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;File is opened.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// do some work with the file</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to open the file.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个File类，构造函数中实现打开文件，析构函数中实现关闭文件，这样即使程序遇到异常退出，析构函数也能保证文件的关闭，从而不会发生内存泄漏等问题。</p>\n<p>RAII思想也可以包装mutex：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LockGuard</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">LockGuard</span><span class=\"params\">(std::mutex &amp;mtx)</span> : mutex_(mtx) &#123;</span></span><br><span class=\"line\">        mutex_.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">LockGuard</span>() &#123;</span><br><span class=\"line\">        mutex_.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 禁止复制</span></span><br><span class=\"line\">    <span class=\"built_in\">LockGuard</span>(<span class=\"type\">const</span> LockGuard &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    LockGuard &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LockGuard &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::mutex &amp;mutex_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 互斥量</span></span><br><span class=\"line\">std::mutex mtx;</span><br><span class=\"line\"><span class=\"comment\">// 多线程操作的变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> shared_data = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 申请锁</span></span><br><span class=\"line\">        <span class=\"function\">LockGuard <span class=\"title\">lock</span><span class=\"params\">(mtx)</span></span>;</span><br><span class=\"line\">        ++shared_data;</span><br><span class=\"line\">        <span class=\"comment\">// 作用域结束后会析构 然后释放锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">t1</span><span class=\"params\">(increment)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">t2</span><span class=\"params\">(increment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Shared data: &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-智能指针\"><a href=\"#C-智能指针\" class=\"headerlink\" title=\"C++智能指针\"></a>C++智能指针</h2><ul>\n<li>std::shared_ptr</li>\n</ul>\n<p>表示一个共享所有权的智能指针，它允许多个shared_ptr指向同一个对象，当最后一个shared_ptr超出作用域时，其所指向的内存才会被自动释放。</p>\n<p>std::shared_ptr实现的关键是引用计数。shared_ptr内部存储了一个指向堆内存的指针，将计数变量存储在堆上。</p>\n<p>shared_ptr可能会导致double free问题，即同一块内存可能会被释放两次。<br>解决该问题的方法：</p>\n<ul>\n<li>使用make_shared函数创建shared_ptr实例，而不直接使用原始指针来创建，这样就确保所有的shared_ptr共享一个引用计数</li>\n<li>对于出现循环引用的情况，使用weak_ptr<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ptr1</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>))</span></span>;</span><br><span class=\"line\">    std::shared_ptr&lt;<span class=\"type\">int</span>&gt; ptr2 = ptr1; <span class=\"comment\">// 通过拷贝构造函数创建一个新的shared_ptr，此时引用计数为2</span></span><br><span class=\"line\">    std::cout &lt;&lt; *ptr1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *ptr2 &lt;&lt; std::endl; <span class=\"comment\">// 输出10 10</span></span><br><span class=\"line\">    <span class=\"comment\">// ptr2超出作用域时，所指向的内存不会被释放，因为此时ptr1仍然持有对该内存的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n实现一个简易版本的shared_ptr<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现一个简易版本的shared_ptr</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimperSharedPtr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">SimperSharedPtr</span><span class=\"params\">(T *_ptr = <span class=\"literal\">nullptr</span>)</span>: ptr(_ptr), count(ptr ? new size_t(<span class=\"number\">1</span>) : nullptr)&#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">SimperSharedPtr</span>(<span class=\"type\">const</span> SimperSharedPtr&amp; other): <span class=\"built_in\">ptr</span>(other.ptr), <span class=\"built_in\">count</span>(other.count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count) &#123;</span><br><span class=\"line\">            ++ (*count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   SimperSharedPtr&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> SimperSharedPtr&amp; other) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != &amp;other) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">release</span>();</span><br><span class=\"line\">            ptr = other.ptr;</span><br><span class=\"line\">            count = other.count;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count) &#123;</span><br><span class=\"line\">                ++ (*count);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">    ~ <span class=\"built_in\">SimperSharedPtr</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &amp;&amp; -- (*count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">size_t</span>* count;</span><br><span class=\"line\">    T* ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>std::unique_ptr</li>\n</ul>\n<p>表示一个独占所有权的智能指针，保证指向的内存只能被unique_ptr拥有。当它超过作用域时其所指向的内存会自动释放。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ptr</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">5</span>))</span></span>;</span><br><span class=\"line\">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl; <span class=\"comment\">// 输出5</span></span><br><span class=\"line\">    <span class=\"comment\">// unique_ptr在超出作用域时自动释放所拥有的内存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>智能指针可以提高程序的安全性和可靠性，避免内存泄漏和野指针的问题。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"C-中的sizeof关键字\"><a href=\"#C-中的sizeof关键字\" class=\"headerlink\" title=\"C++中的sizeof关键字\"></a>C++中的sizeof关键字</h2><p>是c语言中的运算符，计算一个类型/对象所占用的内存的大小。</p>\n<ul>\n<li>指针的大小是固定的。32位处理器就是4字节，64位处理器就是8字节</li>\n<li>数组当函数参数时会退化为指针，大小按指针算</li>\n<li>计算struct大小时要考虑内存对齐</li>\n<li>字符串数组大小要包含最后的’\\0’</li>\n</ul>\n<h2 id=\"C-中的const关键字\"><a href=\"#C-中的const关键字\" class=\"headerlink\" title=\"C++中的const关键字\"></a>C++中的const关键字</h2><p>用于表示常量。</p>\n<ul>\n<li>修饰变量时代表该变量只读</li>\n<li>修饰指针时用于声明本身为只读变量或者指向只读变量的指针</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> *p;<span class=\"comment\">//指向只读变量的指针，可以改变指针的指向，不能通过指针修改所指向只读变量的值</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">p = &amp;a;<span class=\"comment\">//合法，可以指向普通变量</span></span><br><span class=\"line\">p = &amp;b;<span class=\"comment\">//合法，可以指向只读变量</span></span><br><span class=\"line\">*p = <span class=\"number\">30</span>;<span class=\"comment\">//非法，不能通过指针修改只读变量的值</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* <span class=\"type\">const</span> p = &amp;a;<span class=\"comment\">//只读指针,指向a</span></span><br><span class=\"line\">*p = <span class=\"number\">30</span>;<span class=\"comment\">//合法，可以通过指针修改指向变量的值</span></span><br><span class=\"line\">p = &amp;b;<span class=\"comment\">//非法，不能修改指针（即修改指针的指向）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"C-字节对齐\"><a href=\"#C-字节对齐\" class=\"headerlink\" title=\"C++字节对齐\"></a>C++字节对齐</h2><p>C++字节对齐是对内存分配的一种策略。编译器会自动调整数据结构在内存中的分布。如果不对内存中的数据进行适当的对齐而只是顺序排列，会降低存取效率。</p>\n<p>优点：提高了内存访问的效率l</p>\n<p>缺点：浪费内存空间</p>\n<h2 id=\"typedef和define的区别\"><a href=\"#typedef和define的区别\" class=\"headerlink\" title=\"typedef和define的区别\"></a>typedef和define的区别</h2><p>define用于定义预处理宏，在预处理阶段进行处理，在编译之前有预处理器进行文本替换。无类型检查。全局有效。</p>\n<p>typedef用于为现有的数据类型创建别名，在编译时进行处理。提供类型检查，保证类型安全。有作用域，仅定义它的作用域内有效。</p>\n<h2 id=\"C-中class和struct的区别\"><a href=\"#C-中class和struct的区别\" class=\"headerlink\" title=\"C++中class和struct的区别\"></a>C++中class和struct的区别</h2><p>C++兼容了C中的struct，并扩展其含义。在C中，struct只能包含成员变量，不能包含成员函数，而C++中既可包含成员变量，又可定义成员函数。类似class。</p>\n<p>不同点：</p>\n<ul>\n<li>class中成员默认是private，struct中默认是public</li>\n<li>class继承默认是private继承，struct继承默认是public继承</li>\n<li>class可以用来定义模板参数，struct则不行</li>\n</ul>\n<h2 id=\"C-内联函数（inline）\"><a href=\"#C-内联函数（inline）\" class=\"headerlink\" title=\"C++内联函数（inline）\"></a>C++内联函数（inline）</h2><p>函数声明前加上inline，编译器会尝试用函数体替换内联函数调用处，从而避免函数调用的开销。</p>\n<p>但是编译器不一定会将所有声明为内联函数的函数都进行内联，是否执行取决于编译器的优化和是实现策略。优点是类型安全，可调试，可优化。同时注意由于函数体会被复制多次，会占用代码段空间，有些情况下会导致代码膨胀。</p>\n<h2 id=\"C-类型转换\"><a href=\"#C-类型转换\" class=\"headerlink\" title=\"C++类型转换\"></a>C++类型转换</h2><ul>\n<li><p>static_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本类型之间的转换</span></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> b = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(a);<span class=\"comment\">//将整数a转换为双精度浮点数b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针之间的转换</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span>: <span class=\"keyword\">public</span> Base&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Base* base_ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\"><span class=\"comment\">//将基类的base_ptr转换为派生类的derived_ptr</span></span><br><span class=\"line\">Derived* derived_ptr = <span class=\"built_in\">static_cast</span>&lt;Derived*&gt;(base_ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">Derived derived_obj;</span><br><span class=\"line\">Base&amp; base_ref = derived_obj;</span><br><span class=\"line\"><span class=\"comment\">//将基类的引用转换为派生类的引用</span></span><br><span class=\"line\">Derived&amp; derived_ref = <span class=\"built_in\">static_cast</span>&lt;Derived&amp;&gt;(base_ref);</span><br></pre></td></tr></table></figure>\n<p>static_cast在编译器进行类型转换，在进行指针或引用转换时，保证转换合法。</p>\n</li>\n<li><p>dynamic_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123; <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">dummy</span><span class=\"params\">()</span> </span>&#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123; <span class=\"type\">int</span> a; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Base* base_ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>();</span><br><span class=\"line\"><span class=\"comment\">// 将基类指针base_ptr转换为派生类指针derived_ptr，如果类型兼容，则成功</span></span><br><span class=\"line\">Derived* derived_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Derived*&gt;(base_ptr); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于多态类型检查</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123; <span class=\"keyword\">public</span>: <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Animal</span>() &#123;&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> : <span class=\"keyword\">public</span> Animal &#123; <span class=\"keyword\">public</span>: <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> : <span class=\"keyword\">public</span> Animal &#123; <span class=\"keyword\">public</span>: <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal* animal_ptr = <span class=\"comment\">/* ... */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试将Animal指针转换为Dog指针</span></span><br><span class=\"line\">Dog* dog_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Dog*&gt;(animal_ptr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dog_ptr) &#123;</span><br><span class=\"line\">    dog_ptr-&gt;<span class=\"built_in\">bark</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试将Animal指针转换为Cat指针</span></span><br><span class=\"line\">Cat* cat_ptr = <span class=\"built_in\">dynamic_cast</span>&lt;Cat*&gt;(animal_ptr);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cat_ptr) &#123;</span><br><span class=\"line\">    cat_ptr-&gt;<span class=\"built_in\">meow</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dynamic_cast主要应用于父类与子类中的安全类型转换，在运行时执行类型检查，所以相比static_cast其更安全。</p>\n</li>\n</ul>\n<p>dynamic_cast要想有效，基类必须有虚函数（虚函数表），这样才有可能将基类指针转换为子类。</p>\n<ul>\n<li><p>const_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以修改const属性，使得可以修改</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* mutable_ptr = <span class=\"built_in\">const_cast</span>&lt;<span class=\"type\">int</span>*&gt;(&amp;a);</span><br><span class=\"line\">*mutable_ptr = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<p>const_cast<new type> (expression)，new type必须是一个指针、引用或者指向对象类型成员的指针。</p>\n</li>\n<li><p>reinterpret_cast</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *int_ptr = &amp;a;</span><br><span class=\"line\"><span class=\"type\">char</span> *char_ptr = <span class=\"built_in\">reinterpret_cast</span>&lt;<span class=\"type\">int</span>*&gt;(int_ptr);</span><br></pre></td></tr></table></figure>\n<p>字面意义上看是重新翻译转型，就是重新解释底层bit，而不做任何类型检查。</p>\n</li>\n</ul>\n<h2 id=\"C-面向对象三大特性\"><a href=\"#C-面向对象三大特性\" class=\"headerlink\" title=\"C++面向对象三大特性\"></a>C++面向对象三大特性</h2><ul>\n<li>封装</li>\n</ul>\n<p>封装就是将数据（属性）和操作这些数据的函数（方法）组合在一个类中的过程。隐藏了类的内部实现细节，仅暴露必要的接口给外部。</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>继承是一个类从另一个类获取属性和方法的过程，允许我们创建类层次的代码结构，减少重复代码，提高代码的复用性和可维护性。</p>\n<ul>\n<li>多态</li>\n</ul>\n<p>多态是允许不同的类对象使用相同的接口名字，但具有不同的实现特性。<br>C++中多态主要通过虚函数和抽象基类来实现。</p>\n<p>虚函数允许派生类实现基类的方法，而抽象基类包含至少一个纯虚函数，无法被实例化，只能作为其它派生类的基类。</p>\n<p>通过多态，可以编写更加通用的代码，提高代码的灵活性。</p>\n<h2 id=\"C-类初始化和析构顺序\"><a href=\"#C-类初始化和析构顺序\" class=\"headerlink\" title=\"C++类初始化和析构顺序\"></a>C++类初始化和析构顺序</h2><p>初始化顺序：</p>\n<p>1、首先是基类初始化顺序。如果当前的类继承自一或多个类，按照声明顺序进行初始化，但是有虚继承的话，优先虚继承。</p>\n<p>2、成员变量初始化。按照在类中声明的顺序进行初始化。</p>\n<p>3、执行该类构造函数。</p>\n<p>析构顺序和初始化顺序相反。</p>\n<h2 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h2><p>浅拷贝（shallow copy）是一种简单的拷贝方式，仅复制对象的基本类型成员和指针成员的值，而不复制指针所指向的内存。这样会导致两个类对象使用相同的内存，产生内存泄漏等问题。一般地，默认编译器实现的拷贝构造函数是浅拷贝。</p>\n<p>深拷贝（deep copy）包含浅拷贝的情况下，还复制指针指向的内存，所以两个对象不用共享相同资源，避免潜在错误。深拷贝的实现通常需要自定义拷贝构造函数和重载=运算符。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* str) &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深拷贝的拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>(<span class=\"type\">const</span> MyClass&amp; other) &#123;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 深拷贝的赋值运算符重载</span></span><br><span class=\"line\">    MyClass&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> MyClass&amp; other) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(other.data) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(data, other.data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SetString</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (data != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">     <span class=\"built_in\">strcpy</span>(data, str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">MyClass <span class=\"title\">obj1</span><span class=\"params\">(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span></span>;</span><br><span class=\"line\">    MyClass obj2 = obj1; <span class=\"comment\">// 深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">    obj1.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\">    obj2.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改obj2中的数据，不会影响obj1</span></span><br><span class=\"line\">    obj1.<span class=\"built_in\">SetString</span>(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">    obj2.<span class=\"built_in\">print</span>(); <span class=\"comment\">// 输出：Hello, World!</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-多态实现的方式\"><a href=\"#C-多态实现的方式\" class=\"headerlink\" title=\"C++多态实现的方式\"></a>C++多态实现的方式</h2><p>C++中的多态指的是一个函数或者操作在不同的对象上有不同的表现方式，主要包括虚函数、纯虚函数和模板函数。虚函数和纯虚函数实现的多态称为动态多态，模板函数、重载实现的多态称为静态多态。</p>\n<p>静态和动态的区别在于是在编译期还是运行时。</p>\n<p>虚函数是基类声明的可以被派生类重写的函数。使用指向基类的指针或者引用可以调用被派生类重写的函数，实现多态。</p>\n<ul>\n<li>通过基类指针或引用调用虚函数</li>\n<li>被调用的函数是虚函数且必须被派生类重写</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span>: <span class=\"keyword\">public</span> Shape &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">area</span> <span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;Rectangle class area :&quot;</span>; </span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span>: <span class=\"keyword\">public</span> Shape&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">area</span> <span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;Triangle class area :&quot;</span>; </span><br><span class=\"line\">         <span class=\"keyword\">return</span> (width * height / <span class=\"number\">2</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Shape *shape;</span><br><span class=\"line\">   <span class=\"function\">Rectangle <span class=\"title\">rec</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">7</span>)</span></span>;</span><br><span class=\"line\">   <span class=\"function\">Triangle  <span class=\"title\">tri</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   shape = &amp;rec;</span><br><span class=\"line\">   shape-&gt;<span class=\"built_in\">area</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   shape = &amp;tri;</span><br><span class=\"line\">   shape-&gt;<span class=\"built_in\">area</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>模板函数可以根据传递参数的不同类型，自动生成相应类型的函数代码，从而实现多态。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">GetMax</span> <span class=\"params\">(T a, T b)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (a&gt;b?a:b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> i=<span class=\"number\">5</span>, j=<span class=\"number\">6</span>, k;</span><br><span class=\"line\">   <span class=\"type\">long</span> l=<span class=\"number\">10</span>, m=<span class=\"number\">5</span>, n;</span><br><span class=\"line\">   k=<span class=\"built_in\">GetMax</span>&lt;<span class=\"type\">int</span>&gt;(i,j);</span><br><span class=\"line\">   n=<span class=\"built_in\">GetMax</span>&lt;<span class=\"type\">long</span>&gt;(l,m);</span><br><span class=\"line\">   cout &lt;&lt; k &lt;&lt; endl;</span><br><span class=\"line\">   cout &lt;&lt; n &lt;&lt; endl;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器会生成两个GetMax函数实例，参数类型分别为int和long。</p>\n<h2 id=\"C-RAII思想\"><a href=\"#C-RAII思想\" class=\"headerlink\" title=\"C++ RAII思想\"></a>C++ RAII思想</h2><p>RAII即Resource Acqusition is Initialization，资源获取即初始化。</p>\n<p>RAII将资源的生命周期与对象的作用域关联起来，核心思想是将资源（如内存、文件句柄、网络连接等）的获取和释放与对象的生命周期绑定在一起，利用栈上局部变量的自动析构来保证资源一定会被释放。</p>\n<p>一般设计一个RAII类的四个步骤：</p>\n<ul>\n<li>设计一个类封装资源</li>\n<li>在构造函数中执行资源的初始化，比如申请内存、打开文件、申请锁</li>\n<li>在析构函数中执行销毁资源，比如释放内存、关闭文件、释放锁</li>\n<li>使用时声明一个该类的对象</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::ifstream <span class=\"title\">myfile</span><span class=\"params\">(<span class=\"string\">&quot;example.txt&quot;</span>)</span></span>; <span class=\"comment\">// 换自己的文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myfile.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;File is opened.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// do some work with the file</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to open the file.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    myfile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码手动实现文件的打开与关闭，但是当程序异常退出时，可能导致打开的文件没有关闭，导致资源的泄露。这是可以利用RAII的思想进行改进，如下。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">File</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">File</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* filename) : <span class=\"built_in\">m_handle</span>(std::ifstream(filename)) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">File</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_handle.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;File is closed.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">            m_handle.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::ifstream&amp; <span class=\"title\">getHandle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_handle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::ifstream m_handle;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">File <span class=\"title\">myfile</span><span class=\"params\">(<span class=\"string\">&quot;example.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myfile.<span class=\"built_in\">getHandle</span>().<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;File is opened.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"comment\">// do some work with the file</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Failed to open the file.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个File类，构造函数中实现打开文件，析构函数中实现关闭文件，这样即使程序遇到异常退出，析构函数也能保证文件的关闭，从而不会发生内存泄漏等问题。</p>\n<p>RAII思想也可以包装mutex：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LockGuard</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">LockGuard</span><span class=\"params\">(std::mutex &amp;mtx)</span> : mutex_(mtx) &#123;</span></span><br><span class=\"line\">        mutex_.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">LockGuard</span>() &#123;</span><br><span class=\"line\">        mutex_.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 禁止复制</span></span><br><span class=\"line\">    <span class=\"built_in\">LockGuard</span>(<span class=\"type\">const</span> LockGuard &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    LockGuard &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> LockGuard &amp;) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::mutex &amp;mutex_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 互斥量</span></span><br><span class=\"line\">std::mutex mtx;</span><br><span class=\"line\"><span class=\"comment\">// 多线程操作的变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> shared_data = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 申请锁</span></span><br><span class=\"line\">        <span class=\"function\">LockGuard <span class=\"title\">lock</span><span class=\"params\">(mtx)</span></span>;</span><br><span class=\"line\">        ++shared_data;</span><br><span class=\"line\">        <span class=\"comment\">// 作用域结束后会析构 然后释放锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">t1</span><span class=\"params\">(increment)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::thread <span class=\"title\">t2</span><span class=\"params\">(increment)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Shared data: &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-智能指针\"><a href=\"#C-智能指针\" class=\"headerlink\" title=\"C++智能指针\"></a>C++智能指针</h2><ul>\n<li>std::shared_ptr</li>\n</ul>\n<p>表示一个共享所有权的智能指针，它允许多个shared_ptr指向同一个对象，当最后一个shared_ptr超出作用域时，其所指向的内存才会被自动释放。</p>\n<p>std::shared_ptr实现的关键是引用计数。shared_ptr内部存储了一个指向堆内存的指针，将计数变量存储在堆上。</p>\n<p>shared_ptr可能会导致double free问题，即同一块内存可能会被释放两次。<br>解决该问题的方法：</p>\n<ul>\n<li>使用make_shared函数创建shared_ptr实例，而不直接使用原始指针来创建，这样就确保所有的shared_ptr共享一个引用计数</li>\n<li>对于出现循环引用的情况，使用weak_ptr<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::shared_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ptr1</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">10</span>))</span></span>;</span><br><span class=\"line\">    std::shared_ptr&lt;<span class=\"type\">int</span>&gt; ptr2 = ptr1; <span class=\"comment\">// 通过拷贝构造函数创建一个新的shared_ptr，此时引用计数为2</span></span><br><span class=\"line\">    std::cout &lt;&lt; *ptr1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *ptr2 &lt;&lt; std::endl; <span class=\"comment\">// 输出10 10</span></span><br><span class=\"line\">    <span class=\"comment\">// ptr2超出作用域时，所指向的内存不会被释放，因为此时ptr1仍然持有对该内存的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n实现一个简易版本的shared_ptr<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现一个简易版本的shared_ptr</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimperSharedPtr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">SimperSharedPtr</span><span class=\"params\">(T *_ptr = <span class=\"literal\">nullptr</span>)</span>: ptr(_ptr), count(ptr ? new size_t(<span class=\"number\">1</span>) : nullptr)&#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">SimperSharedPtr</span>(<span class=\"type\">const</span> SimperSharedPtr&amp; other): <span class=\"built_in\">ptr</span>(other.ptr), <span class=\"built_in\">count</span>(other.count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count) &#123;</span><br><span class=\"line\">            ++ (*count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   SimperSharedPtr&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> SimperSharedPtr&amp; other) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != &amp;other) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">release</span>();</span><br><span class=\"line\">            ptr = other.ptr;</span><br><span class=\"line\">            count = other.count;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count) &#123;</span><br><span class=\"line\">                ++ (*count);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">    ~ <span class=\"built_in\">SimperSharedPtr</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">release</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">release</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &amp;&amp; -- (*count) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">size_t</span>* count;</span><br><span class=\"line\">    T* ptr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>std::unique_ptr</li>\n</ul>\n<p>表示一个独占所有权的智能指针，保证指向的内存只能被unique_ptr拥有。当它超过作用域时其所指向的内存会自动释放。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ptr</span><span class=\"params\">(<span class=\"keyword\">new</span> <span class=\"type\">int</span>(<span class=\"number\">5</span>))</span></span>;</span><br><span class=\"line\">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl; <span class=\"comment\">// 输出5</span></span><br><span class=\"line\">    <span class=\"comment\">// unique_ptr在超出作用域时自动释放所拥有的内存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>智能指针可以提高程序的安全性和可靠性，避免内存泄漏和野指针的问题。</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2>"},{"title":"go网络编程","date":"2024-07-24T06:00:00.000Z","update":"2024-07-24T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n## 启动一个简单的http服务\n``` go\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/ping\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"pong\"))\n\t})\n\n\thttp.ListenAndServe(\":8091\", nil)\n}\n```\n\n&emsp;&emsp;调用http.HandleFunc方法，注册对应请求路径下的处理函数,调用http.ListenAndServe方法，启动端口号为8091的http服务。\n\n&emsp;&emsp;在浏览器输入http://localhost:8091/ping后，可以看到页面上的pong","source":"_posts/go网络编程.md","raw":"---\ntitle: go网络编程\ndate: 2024-7-24 14:00:00\nupdate: 2024-7-24 8:25:00\ntags: C++\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n## 启动一个简单的http服务\n``` go\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/ping\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"pong\"))\n\t})\n\n\thttp.ListenAndServe(\":8091\", nil)\n}\n```\n\n&emsp;&emsp;调用http.HandleFunc方法，注册对应请求路径下的处理函数,调用http.ListenAndServe方法，启动端口号为8091的http服务。\n\n&emsp;&emsp;在浏览器输入http://localhost:8091/ping后，可以看到页面上的pong","slug":"go网络编程","published":1,"updated":"2024-07-24T06:15:03.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsol0003y0vm6tayblk2","content":"<h2 id=\"启动一个简单的http服务\"><a href=\"#启动一个简单的http服务\" class=\"headerlink\" title=\"启动一个简单的http服务\"></a>启动一个简单的http服务</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t\tw.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>))</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8091&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;调用http.HandleFunc方法，注册对应请求路径下的处理函数,调用http.ListenAndServe方法，启动端口号为8091的http服务。</p>\n<p>&emsp;&emsp;在浏览器输入<a href=\"http://localhost:8091/ping后，可以看到页面上的pong\">http://localhost:8091/ping后，可以看到页面上的pong</a></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"启动一个简单的http服务\"><a href=\"#启动一个简单的http服务\" class=\"headerlink\" title=\"启动一个简单的http服务\"></a>启动一个简单的http服务</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t\tw.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>))</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8091&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;调用http.HandleFunc方法，注册对应请求路径下的处理函数,调用http.ListenAndServe方法，启动端口号为8091的http服务。</p>\n<p>&emsp;&emsp;在浏览器输入<a href=\"http://localhost:8091/ping后，可以看到页面上的pong\">http://localhost:8091/ping后，可以看到页面上的pong</a></p>\n"},{"title":"binary tree","date":"2023-08-18T10:36:00.000Z","updated":"2023-08-18T10:36:00.000Z","description":"二叉树专题","cover":"https://images6.alphacoders.com/128/thumbbig-1288241.webp","_content":"### 一、二叉树定义\n\n```c++\nstruct TreeNode{\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x){\n        val = x;\n        this.left = NULL;\n        this.right = NULL;\n    }\n};\n```\n\n```java\npublic class TreeNode{\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(){}\n    TreeNode(int val){this.val = val;}\n    TreeNode(int val,TreeNode left,TreeNode right){\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n```\n\n```python\nclass TreeNode:\n    def _init_(self,value):\n        self.value = value\n        self.left = None\n        self.right = None\n```\n\n### 二、递归\n\n1、确定递归函数的参数和返回值\n\n2、确定终止条件\n\n3、确定单层递归的逻辑\n\n递归的实现：每一次递归调用都会把函数的局部变量，参数值，返回地址等压入调用栈中，等递归返回时，从栈顶弹出上一次递归的各项参数。\n\n\n\n#### 前序遍历（递归）\n\n打印遍历节点的值，除此之外无需返回其他值，函数返回类型为void,参数vec存储节点的数值\n\n```c++\nvoid traversal(TreeNode* cur,vector<int>& vec)\n```\n\n本轮递归终止的条件是当前节点为空\n\n```C++\nif(cur == NULL) return;\n```\n\n前序遍历按照左中右顺序，先取中节点的值（单层递归）\n\n```C++\nvec.push_back(cur -> val);//中\ntraversal(cur -> left,vec);//左\ntraversal(cur -> right,vec);//右\n```\n\n前序遍历总过程：\n\n```C++\nclass solution{\n    public:\n    \tvoid traversal(TreeNode* cur,vector<int>& vec){\n                if(cur == NULL)\n                    return;\n                vec.push_back(cur -> val);\n                traversal(cur -> left,vec);\n                traversal(cur -> right,vec);\n            }\n    \tvector<int> preordertraversal(TreeNode* root){\n            vector<int> result;//初始化一个vec\n            traversal(root,result);//从根节点开始遍历\n            return result;\n        }\t\n};\n```\n\n#### 中序遍历（递归）\n\n```C++\nvoid traversal(TreeNode* cur,vector<int>& vec){\n    if(cur == NULL)\n        return;\n    traversal(cur -> left,vec);\n    vec.push_back(cur -> val);\n    traversal(cur -> right,vec);\n}\n```\n\n#### 后序遍历（递归）\n\n```c++\nvoid traversal(TreeNode* cur,vector<int>& vec){\n    if(cur == NULL)\n        return;\n    traversal(cur -> left,vec);\n    traversal(cur -> right,vec);\n    vec.push_back(cur -> val);\n}\n```\n\n\n\n### 三、迭代\n\n#### 前序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> preorderTraversal(TreeNode* root){\n            stack<TreeNode*> s;\n            vector<int> vec;\n            if(root == NULL)\n                return vec;\n            s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();\n                s.pop();\n                vec.push_back(node -> val);//栈顶节点值加入vec\n                if(node -> right)//先压入右节点，空节点不执行\n                    s.push(node -> right);\n                if(node -> left)//后压入左节点，空节点不执行\n                    s.push(node -> left);\n            }\n            return vec;\n        }\n};\n```\n\n#### 后序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    vector<int> Traversal(TreeNode* root){\n    \tstack<TreeNode*> s;\n        vector<int> vec;\n        if(root == NULL)\n            return vec;\n        s.push(root);\n        while(!s.empty()){\n            TreeNode* node = s.top();\n            s.pop();\n            vec.push_back(node -> val);\n            if(node -> left)\n                s.push(node -> left);\n            if(node -> right)\n                s.push(node -> right);//遍历顺序改为中右左\n        }\n        reverse(vec.begin(),vec.end());//逆序为左右中\n        return vec;\n\t}\n};\n```\n\n前序遍历访问节点（遍历节点）和处理节点（将节点放入vec数组中）可以进行同步处理（既处理顺序和访问顺序一致），但是中序遍历无法同步\n\n\n\n#### 中序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> inorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root == NULL)\n            \treturn vec;\n            TreeNode* cur = root;//使用指针来进行节点访问\n            while(!s.empty()){\n                if(cur != NULL){//指针访问节点，一直访问至二叉树最底层\n                    s.push(cur);//将访问节点放入栈\n                    cur = cur -> left;//左\n                }else{\n                    cur = s.top();//从栈顶弹出的数据即为需要处理的数据（放进vec数组中的数据）\n                    s.pop();\n                    vec.push_back(cur -> val);//中\n                    cur = cur -> right;//右\n                }\n            }\n        }\n};\n```\n\n中序遍历先是访问根节点，再逐步向左向下访问节点直至到达最底层，进而再开始处理节点（将节点数值放入vec数组），导致访问顺序和处理数据顺序是不一样的。\n\n\n\n\n\n### 四、二叉树的统一迭代法\n\n#### 中序遍历\n\n```C++\nclass solution{\n    public:\n    \tvector<int> inorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root != NULL)\n                s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();//将该节点弹出，避免重复操作，下面再将右中左节点加入栈\n                if(node != NULL){\n                    s.pop();\n                    if(node -> right)\n                        s.push(node -> right);//非空右节点入栈\n                    s.push(node);//中节点入栈\n                    s.push(NULL);//此时中节点未进行处理，再其后加入NULL标记（表示待处理）\n                    if(node -> left)\n                        s.push(node -> left);//非空左节点入栈\n                }else{//遇到空节点（即NULL标记）时，将下一个节点加入vec数组\n                    s.pop();//将空节点弹出\n                    node = s.top();//重新取出栈中元素\n                    s.pop();\n                    vec.push_back(node -> val);\n                }\n            }\n            return vec;\n        }\n};\n```\n\n#### 前序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<int> preorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root != NULL)\n                s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();\n                if(node != NULL){\n                    s.pop();\n                    if(node -> right)\n                        s.push(node -> right);\n                    if(node -> left)\n                        s.push(node -> left);\n                    s.push(node);\n                    s.push(NULL)\n                }else{\n                    s.pop();\n                    node = s.top();\n                    s.pop();\n                    vec.push_back(node -> val);\n                }\n                    \n            }\n        }\n};\n```\n\n#### 后序遍历\n\n```c++\nclass solution{\n    public:\n    vector<int> Traversal(TreeNode* root){\n        vector<int> vec;\n        stack<TreeNode*> s;\n        if(root != NULL)\n            s.push(root);\n        while(!s.empty()){\n            TreeNode* node = s.top();\n            if(node != NULL){\n                s.pop();\n                s.push(node);\n                s.push(NULL);\n                if(node -> right)\n                    s.push(node -> right);\n                if(node -> left)\n                    s.push(node -> left);\n                \n            }else{\n                s.pop();\n                node = s.top();\n                s.pop();\n                vec.push_back(node -> val);\n            }\n        }\n        return vec;\n    }\n};\n```\n\n到此，我们就将前中后序三种遍历用统一的代码风格写出来，关键在于加入NULL标记来表示需要处理的元素。\n\n\n\n### 五、二叉树的层序遍历\n\n层序遍历一个二叉树，就是一层一层从左往右进行遍历二叉树，需要借助数据结构遍历来实现，队列先进先出，符合一层一层遍历的逻辑，而使用栈先进后出适合深度优先遍历即递归的逻辑。\n\n层序遍历是图论里的广度优先遍历。\n\n#### 1、自上而下的层序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> levelOrder(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;//每层一个数组，每行合起来则是二维数组\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                //使用固定大小的size，而不用que.size()，因为que.size()会不断变化\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(vec);\n            }\n            return result;\n        }\n};\n#递归法\nclass solution{\n    public:\n    \tvoid order(TreeNode* cur,vector<vector<int>>& result,int depth){\n            if(cur == nullptr)\n                return;\n            if(result.size() == depth)\n                result.push_back(vector<int>());\n            result[depth].push_back(cur -> val);\n            order(cur -> left,result,depth + 1);\n            order(cur -> right,result,depth + 1);\n        }\n    \t\n    \tvector<vector<int>> levelorder(TreeNode* root){\n            vector<vector<int>> result;\n            int depth = 0;\n            order(root,result,depth);\n            return result;\n        }\n};\n```\n\n#### 2、自底向上的层序遍历（将数组逆序然后输出）\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> order(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        vec.push(node -> left);\n                    if(node -> right)\n                        vec.push(node -> right);\n                }\n                result.push_back(vec);\n            }\n            reserve(result.begin(),result.end());//反转数组\n            return result;\n        }\n};\n```\n\n#### 3、二叉树的右视图（从右看二叉树所能得到的节点值）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> rightSizeView(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<int> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(i ==z (size - 1))\n                        result.push_back(node -> val);//将每层最后一个元素放入result数组\n                    if(node -> left)\n                        que.push(node ->left);\n                    if(node -> right)\n                        que.push(node ->right);\n                } \n            }\n            return result;\n        }\n};\n```\n\n#### 4、二叉树的层平均值\n\n```c++\nclass solution{\n    public:\n    \tvector<double> averageOfLevels(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<double> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    double sum += node -> val;//统计每一层的和\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(sum / size);//将每一层均值放入result数组中\n            }\n            return result;\n        }\n};\n```\n\n#### 5、N叉树的层序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> levelOrder(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    for(int j = 0;i < node -> children.size();j ++){//将节点孩子加入队列\n                        if(node -> children[j])\n                            que.push(node -> children[j]);\n                    }\n                }\n                result.push_back(vec);\n            }\n            return result;\n        }\n};\n```\n\n#### 6、在每个二叉树行中找最大值\n\n```c++\nclass solution{\n    public:\n    \tvector<int> largestValues(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<int> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                int maxValue = INT_MIN;//现将最大值设为INT_MIN(即整数最小)\n                for(i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    //通过每一层不断比较，最终得到maxValue（即最大值）\n                    maxValue = ((node -> val) > maxValue)?node -> val:maxValue;\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(maxValue);//将每一层的最大值加入数组result\n            }\n            return result;\n        }\n};\n```\n\n\n\n#### 7、填充每一个节点的下一个右侧节点\n\n```c++\nstruct Node{\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;//指向节点的右侧节点\n};\n\nclass solution{\n    public:\n    \tTreeNode* connect(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                Node* preNode;//用来记录首节点和前一个节点\n                Node* node;//遍历节点\n                for(int i = 0;i < size;i ++){\n                    if(i == 0){\n                        preNode = que.front();\n                        que.pop();\n                        node = preNode;\n                    }else{\n                        node = que.front();\n                        que.pop();\n                        preNode -> next = node;\n                        preNode  = preNode -> next;//= node同理\n                    }\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(right);\n                }\n                node -> next = NULL;//本层最后一个节点指向NULL\n            }\n            return root;\n        }\n};\n```\n\n#### 8、二叉树的最大深度\n\n给定一个二叉树，找出其最大深度\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数（叶子节点没有子节点）\n\n```c++\nclass solution{\n    public:\n    int maxDepth(TreeNode* root){\n        queue<TreeNode*> que;\n        int depth = 0;\n        if(root != NULL)\n            que.push(root);\n        while(!que.empty()){\n            int size = que.size();\n            depth ++;//记录深度\n            for(int i = 0;i < size;i ++){\n                TreeNode* node = que.front();\n                que.pop();\n                if(node -> left)\n                    que.push(node -> left);\n                if(node -> right)\n                    que.push(node -> right);\n            }\n        }\n        return depth;\n    }\n};\n```\n\n#### 9、二叉树的最小深度\n\n```c++\nclass solution{\n    public:\n    \tint minDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                    //当节点左右孩子都为空（即叶子节点），到达最小深度\n                    if(!node -> left && !node -> right)\n                        return depth;\n                }\n            }\n            return depth;\n        }\n};\n```\n\n总结，二叉树的层序遍历，就是图论中的广度优先搜索在二叉树中的应用，需要借助队列来实现。\n\n\n\n### 六、翻转二叉树\n\n#### 1、深度优先遍历\n\n```c++\n//递归（前序遍历）\n//先进行交换左右孩子节点，然后反转左子树，然后反转右子树\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            if(root == NULL)\n                return root;\n            swap(root -> left,root -> right);//中\n            invertTree(root -> left);//左\n            invertTree(root -> right);//右\n            \n            return root;\n        }\n};\n```\n\n\n\n```c++\n//前序遍历（迭代）\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root != NULL)\n                st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();//中\n                st.pop();\n                swap(node -> left,node ->right);\n                if(node -> right)\n                    st.push(node -> right);//右\n                if(node -> left)\n                    st.push(node -> left);//左\n            }\n            return root;\n        }\n};\n```\n\n```c++\n//前序遍历（统一迭代法）\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root != NULL)\n                st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                if(node != NULL){\n                    st.pop();\n                    if(node -> right)\n                        st.push(right);\n                    if(node -> left)\n                        st.push(left);\n                    st.push(node);\n                    st.push(NULL);\n                }else{\n                    st.pop();\n                    TreeNode* node = st.top();\n                    st.pop();\n                    swap(node -> left,node ->right);//节点处理逻辑\n                }\n            }\n            return root;\n        }\n};\n```\n\n#### 2、广度优先遍历\n\n```c++\n;//层序遍历\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    swap(node -> left,node -> right);//左右子树交换\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n            }\n            return root;\n        }\n};\n```\n\n\n\n针对二叉树的问题，解题之前要想清楚究竟选择哪种遍历方式\n\n\n\n\n\n### 七、对称二叉树\n\n给定一个二叉树，检查二叉树是否镜像对称\n\n```c++\n//自己的第一遍思考\nclass solution{\n    public:\n    \tbool Tree(TreeNode* root){\n            stack<TreeNode*> que;\n            vector<int> vec;\n            int flag = 1;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                for(j = 0;j < size;j ++){\n                    if((vec[j] != vec[size - 1 -j] || vec[j] == NULL || vec[size - 1-                         1 - j] == NULL)\n                       flag =1;\n                       return flag;       \n                }\n            }\n            return flag;\n        }  \n};\n```\n\n针对自己第一次实现的想法进行改进：首先判断二叉树是否对称，不需要加入根节点（遍历则需要加入），因为是否对称只和左右子树有关。同时鉴于对队列数据结构的不熟练，调用了vector数组来储存节点数值后在数组中进行比较（考虑麻烦了），直接对称的将左右子树的节点加入到队列中，两个两个一组弹出比较。还加了flag标记来输出bool数，直接true or false即可。\n\n```c++\n//迭代\nclass solution{\n    public:\n    \tbool isSymmetric(TreeNode* root){\n            if(root == NULL)\n                return true;\n            queue<TreeNode*> que;\n            que.push(root -> left);//加入左子树头结点\n            que.push(root -> right);//加入右子树头结点\n            while(!que.empty()){\n                TreeNode* leftNode = que.front();\n                que.pop();\n                TreeNode* rightNode = que.front();\n                que.pop();\n                if(!leftNode && !leftNode)\n                    continue;\n                \n                \n                if(!leftNode || !rightNode || (leftNode -> val != rightNode -> val))\n                    return false;\n                \n                que.push(leftNode -> left);\n                que.push(rightNode -> right);\n                que.push(leftNode -> right);\n                que.push(rightNode -> left);\n            }\n            return true;\n        }\n};\n```\n\n递归\n\n1、确定递归参数和返回值\n\n比较根节点的两个子树是否是互相翻转的，进而判断这个二叉树是否对称，比较的是左右两个子树，参数就是根节点的左子树头结点和右子树头结点。\n\n返回值自然是bool类型。\n\n2、确定终止条件\n\n要比较两个节点的数值相不相等，首先要把两节点为空的情况搞清楚。\n\n* 左节点为空，右节点不为空\n* 左节点不为空，右节点为空\n* 左右节点都为空\n* 左右节点都不为空但是值不相等   \n\n3、确定单层递归的逻辑\n\n单层递归的逻辑就是两个节点都不为空且节点值相等的情况。\n\n* 比较外侧节点值是否相等：传入左节点的左孩子，右节点的右孩子\n* 比较内侧节点值是否相等：传入左节点的右孩子，右节点的左孩子\n* 如果左右都对称返回true，有一方不对称就返回false\n\n```c++\nclass solution{\n    public:\n    \tbool compare(TreeNode* left,TreeNode* right){\n            //首先排除空节点的情况\n            if(!left && right)\n                return false;\n            else if(left && !right)\n                return false;\n            else if(!left && !right)\n                return true;\n            //排除空节点后，两节点值不相等的情况\n            else if((left -> val) != (right -> val))\n                return false;\n            \n            //左子树：左，右子树：右\n            bool outside = compare(left -> left,right -> right);\n            //左子树：右，右子树：左\n            bool inside = compare(left -> right,right -> left);\n            //逻辑处理\n            bool isSame = outside && inside;\n            return isSame;\n        }\n    \tbool isSymmetric(TreeNode* root){\n            if(root == NULL)\n                return true;\n            return compare(root -> left,root -> right);\n        }\n};\n```\n\n\n\n### 八、二叉树的最大深度\n\n```c++\n//前序遍历\nclass solution{\n    public:\n    \tint result;//用来存储最大深度\n        //函数返回值为void，非int，与计算节点数不同，深度不具有累加性\n    \tvoid getDepth(TreeNode* node,int depth){//参数为当前节点，以及当前的深度\n            result = depth > result ? depth : result;//通过不断比较深度来更新深度的值\n            if(!node->left && !node->right)\n                return ;\n            if(node->left){//左\n                depth ++;//深度加一，因为向下了一层\n                getDepth(node->left,depth);\n                depth --;//回溯，因为右子树还未进行\n            }\n            if(node->right){//同理，右\n                depth ++;\n                getDepth(node->right,depth);\n                depth --;\n            }\n            return ;\n        }\n    \t\n    \tint maxDepth(TreeNode* root){\n            result = 0;\n            if(root == nullptr)\n                return result;\n            getDepth(root,1);\n            return result;\n        }\n}；\n```\n\n\n\n迭代法中层序遍历最为合适，因为遍历的层数即是二叉树的深度\n\n```c++\nclass solution{\n\tpublic:\n    \tint maxDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                     \tque.push(node -> right);\n                }\n            }\n            return depth;\n        }\n\t\n};\n```\n\nn叉树的最大深度\n\n```c++\nclass solution{\n    public:\n    \tint maxDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.front();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    for(int j = 0;j < node -> children.size();j ++){\n                        if(node -> children[j])\n                            que.push(node -> children[j]);\n                    }\n                }\n            }\n            return depth;\n        }\n        \n};\n```\n\n### 九、二叉树的最小深度\n\n最小深度是指根节点到最近叶子节点的最短路径上的节点个数\n\n```c++\nclass solution{\n    public:\n    \tint minDepth(TreeNode* root){\n        \tqueue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if((!node -> left) && (!node -> right))//左右节点都为空时到达最小深度\n                        return depth;\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                     \tque.push(node -> right);\n                }\n            }\n            return depth;\n        }\n};\n```\n\n### 十、完全二叉树的节点个数\n\n将完全二叉树当作普通二叉树看待，依旧使用普通二叉树的遍历方法来计算节点个数\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tint getNodeNums(TreeNode* root){\n            if(root == nullptr)\n                return 0;\n            int leftNodeNums = getNodeNums(root -> left);//左\n            int rightNodeNums = getNodeNums(root -> right);//右\n            int nodeNums = leftNodeNums + rightNodeNums + 1;//中\n            return nodeNums;\n        }\n    \n    \tint countNodes(TreeNode* root){\n            return getNodeNums(root);\n        }\n};\n```\n\n```c++\n//迭代法\nclass solution{\n    public:\n    \tint countNodes(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            int result = 0;//记录节点个数\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    result ++;//每遍历一个节点加一\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n            }\n            return result;\n        }\n};\n```\n\n\n\n然而，完全二叉树本省具有一些特性使得能够使用一些其它的方法来计算个数\n\n在完全二叉树中，除了最底层的节点可能没有填满之外，其余每层节点数都达到最大值，并且最下面一层节点都集中在该层最左侧的若干区域，若最底层为第h层，则该层节点个数范围为1~2^(h-1)\n\n\n\n完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。\n\n对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。\n\n对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。\n\n可以看出如果整个树不是满二叉树，就递归其左右孩子，直到遇到满二叉树为止，用公式计算这个子树（满二叉树）的节点数量。\n\n这里关键在于如何去判断一个左子树或者右子树是不是满二叉树呢？\n\n\n\n在完全二叉树中，如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。\n\n```c++\nclass solution{\n    public:\n    \tint countNodes(TreeNode* root){\n            if(root == nullptr)\n                return 0;\n            TreeNode* left = root -> left;\n            TreeNode* right = root -> right;\n            int leftDepth = 0;\n            int rightDepth = 0;\n            while(left){\n                left = left -> left;\n                leftDepth ++;\n            }\n            while(right){\n                right = right -> right;\n                rightDepth ++;\n            }\n            if(leftDepth == rightDepth)\n                return 2^(leftDepth - 1);\n            \n            return countNodes(root -> left) + countNodes(root -> right) + 1;\n                \n        }\n};\n```\n\n### 十一、平衡二叉树\n\n因为求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）\n\n\n\n一颗高度平衡的二叉树定义为：一个二叉树每个节点的左右两棵子树的高度差绝对值不超过1。\n\n根据定义可知，如果以当前节点为传入节点的二叉树已经不是二叉树了，则该二叉树不是平衡二叉树\n\nreturn -1来标记不符合平衡二叉树的规则。\n\n\n\n递归思路：\n\n1、明确递归函数的参数和返回值\n\n参数：当前传入节点。 返回值：以当前传入节点为根节点的树的高度。\n\n那么如何标记左右子树是否差值大于1呢？\n\n如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。\n\n所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。\n\n2、明确终止条件\n\n递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0\n\n3、明确单层递归的逻辑\n\n如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。\n\n分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。\n\n```c++\n//递归\nclass solution{\n    public:\n    \tint getHeight(TreeNode* node){\n            if(node == nullptr)//如果该节点是空指针，则高度为0\n                return 0;\n            //判断左右子树是否是平衡二叉树，有一个不是则非平衡二叉树\n            int leftHeight = getHeight(node->left);\n            if(leftHeight == -1)\n                return -1;\n            int rightHeight = getHeight(node->right);\n            if(LeftHeight == -1)\n                return -1;\n            \n            if(abs(leftHeight - rightHeight) > 1){//左右子树高度差不超过1\n                return -1;\n            }else{\n                //取两树高度最大者在加上根节点的高度为整颗平衡二叉树的高度\n                return max(leftHeight,rightHeight) + 1;\n            }\n        }\n        \n    \tbool isBalance(TreeNode* root){\n            return getHeight(root) == -1 ? false : true;\n        }\n};\n```\n\n```c++\n//迭代\nclass solution{\n    public:\n        //node节点的最大深度就是node的高度\n    \tint getDepth(TreeNode* node){\n            stack<TreeNode*> st;\n            if(node == nullptr)\n                return 0;\n            int depth = 0;//记录深度\n            int result = 0;//更新最大深度值\n            st.push(node);\n            while(!st.empty()){\n                TreeNode* cur = st.top();\n                if(node != NULL){\n                    st.pop();\n                    st.push(cur);\n                    st.push(NULL);\n                    depth ++;\n                    if(cur->right)\n                        st.push(cur->right);\n                    if(cur->left)\n                        st.push(cur->left);\n                }else{\n                    st.pop();\n                    node = st.top();\n                    st.pop();\n                    depth --;\n                }\n                result = result > depth ? result : depth;\n            }\n            return result;\n        }\n    \t\n    \tbool isBalance(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root == NULL)\n               return true;\n            st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                st.pop();\n                if(abs(getDepth(node->left),getDepth(node->right))>1)\n                    return false;\n                if(node->right)\n                    st.push(node->right);\n                if(node->left)\n                    st.push(node->left);\n            }\n            return true;\n        }\n};\n```\n\n求深度适合前序遍历，求高度适合后序遍历\n\n### 十二、二叉树的所有路径\n\n```c++\nclass solution{\n    public:\n    \tvoid traversal(TreeNode* node,vector<int> path,vector<string> result){\n            path.push_back(node->val);\n            if(node->left == NULL && node->right == NULL){\n                string sPath;\n                for(int i = 0;i < path.size() - 1;i++){\n                    sPath += to_string(path[i]);\n                    sPath += \"->\";\n                }\n                sPath += to_string(path[path.size() - 1]);\n                result.push_back(sPath);\n                return;\n            } \n            if(node->left){\n                traversal(node->left,path,result);\n                path.pop_back();\n            }\n            if(node->right){\n                traversal(node->right,path,result);\n                path.pop_back();\n            }\n        }\n    \n    \tvector<string> binaryTreePaths(TreeNode* root){\n            vector<int> path;\n            vector<string> result;\n            if(root == NULL)\n                return result;\n            traversal(root,path,result);\n            return result;\n        }\n};\n```\n\n\n\n### 十三、左叶子之和\n\n1、确定递归函数的参数和返回值\n\n要判断左节点值之和，首先要传入根节点，返回值则为数值之和\n\n2、确定终止条件\n\n如果遍历到空节点，左叶子值为0\n\n```c++\nif(root == NULL) return 0;\n```\n\n注意，只有当前节点遍历的是父节点，才能判断其子节点是不是左叶子。所以如果当前遍历的节点是叶子节点，那其左叶子也必定为0\n\n```c++\nif(root->left == NULL && root->right == NULL) return 0;\n```\n\n3、确定单层递归的逻辑\n\n遇到左叶子节点时，记录数值，然后通过递归求取左子树左叶子之和和右子树左叶子之和。相当于整个树的左叶子之和\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tint sumOfLeftLeaves(TreeNode* root){\n            if(root == NULL)\n                return 0;\n            if(root->left == NULL && root->right == NULL)\n                return 0;\n            \n            int LeftValue = sumOfLeftLeaves(root->left);//左\n            //当左子树只是一个左叶子节点的时候\n            if(root->left && !root->left->left && !root->left->right)\n                leftValue = root->left->val;\n            \n            int rightValue = sumOfLeftLeaves(root->right);//右\n            int sum = leftValue + rightValue;//中\n            return sum;\n        }\n};\n```\n\n```c++\n//迭代法\nclass solution{\n\tpublic:\n    \tint sumOfLeftLeaves(TreeNode* root){\n            if(root == NULL)\n                return 0;\n            stack<TreeNode*> st;\n            st.push(root);\n            int result = 0;\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                st.pop();\n                if(node->left && !node->left->left && !node->left->right)\n                    result += node->left->val;\n                if(node->right)\n                   st.push(node->right);\n                if(node->left)\n                   st.push(node->left);\n            }\n            return result;\n        }\n};\n```\n\n\n\n### 十四、找树左下角的值\n\n```c++\n//层序遍历\nclass solution{\n    public:\n    \tint findBottomLeftValue(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            int result = 0;\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    if(i == 0)\n                        result = node->val;//每层取第一个节点的值\n                    que.pop();\n                    if(node->left)\n                        que.push(node->left);\n                    if(node->right)\n                        que.push(node->right);\n                }\n            }\n            return result;//遍历完所有层后result里的值则为树左下角的值\n        }\n};\n```\n\n```c++\n//递归法\nclass solution{\n    public:\n    \t//定义全局变量\n    \tint maxDepth = INT_MIN;//记录最大深度\n    \tint result;//记录树左下角的值\n    \tvoid traversal(TreeNode* node,int depth){\n            if(!node->left && !node->left){\n                if(depth > maxDepth){\n                    maxDepth = depth;\n                    result = node->val;\n                }\n                return ;\n            }\n            if(node->left){\n                //traversal(node->left,depth + 1);\n                depth ++;\n                traversal(node->left,depth);\n                depth --;\n            }\n            if(node->right){\n                //traversal(node->right,depth + 1);\n                depth ++;\n                traversal(node->right,depth);\n                depth --;\n            }\n            return ;\n        }\n    \t\n    \tint findBottomLeftValue(TreeNode* root){\n            traversal(root,0);\n            return result;\n        }\n};\n```\n\n总结：\n\n1、递归求深度的写法，在**平衡树二叉树**中详细分析了深度应该怎么求，高度应该怎么求\n\n2、递归中隐藏了回溯，在**二叉树的所有路径** 中讲解了究竟哪里使用了回溯，哪里隐藏了回溯\n\n3、层次遍历，在**层序遍历**深度讲解了二叉树层序遍历。\n\n\n\n### 十五、路径总和I\n\n给定一个二叉树和目标和，判断该树是否存在根节点到叶子节点的路径，这条路径上的所有节点值相加等于目标和\n\n递归：\n\n1、确定函数返回值和参数\n\n需要一个指针遍历二叉树，同时需要int参数来记录目标和，使用递减的方式，当某条路径上的result递减至0且到叶子节点时，说明该二叉树存在所有节点值相加等于目标和的路径\n\n2、确定终止条件\n\n 当和递减至0且遍历到叶子节点时，存在\n\n```c++\nif(result == 0 && !cur->left && !cur->right) return true;\n```\n\n当遇到叶子节点未满足条件时，不存在\n\n```c++\nif(!cur->left && !cur->right) return false;\n```\n\n3、确定单层递归的逻辑\n\n先向左继续判断，不满足再向右继续判断，都不满足则不存在该路径\n\n```c++\nif(cur->left){\n    if(traversal(cur->left,result - cur->left->val))\n        return true;\n}\nif(cur->right){\n    if(traversal(cur->right,result - cur->right->val))\n        return true;\n}\nreturn false;\n```\n\n\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tbool traversal(TreeNode* cur,int result){//记录当前节点和目标和\n            //当和递减至0且遍历到叶子节点时，存在\n            if(result == 0 && !cur->left && !cur->right)\n                return true;\n            //当遇到叶子节点未满足条件时，不存在\n            if(!cur->left && !cur->right)\n                return false;\n            \n            if(cur->left){//左\n                if(traversal(cur->left,result - cur->left->val))//包含回溯的逻辑\n                    return true;\n            }\n            if(cur->right){//右\n                if(traversal(cur->right,result - cur->right->val))//包含回溯的逻辑\n                    return true;\n            }\n            return false;\n            /*将回溯过程体现出来代码可改为：\n            if(cur->left){\n            \tresult -= cur->left->val;\n            \tif(traversal(cur->left,result))\n            \t\treturn true;\n            \tresult += cur->left->val;\n            }\n            if(cur->right){\n            \tresult -= cur->right->val;\n            \tif(traversal(cur->right,result))\n            \t\treturn true;\n            \tresult += cur->right->val;\n            }\n            */\n        }\n    \t\n    \tbool hasPathSum(TreeNode* root,int sum){\n            if(root == NULL)\n                return false;\n            return traversal(root,sum - root->val);\n        }\n};\n```\n\n递归过程隐藏回溯，如：\n\n```c++\ntraversal(cur->left,result - cur->left->val);\n```\n\n把result - cur->left->val直接作为参数传进函数，函数结束，result的数值并没有改变\n\n```c++\n//迭代法\nclass solution{\n    public:\n    \tbool hasPathSum(TreeNode* root,int sum){\n            if(root == nullptr)\n                return false;\n            //此时栈里放的是pair<节点指针，路径数值>\t\n            stack<pair<TreeNode*,int>> st;\n            st.push(pair<TreeNode*,int>(root,root->val));\n            while(!st.empty()){\n                pair<TreeNode*,int> node = st.top();\n                st.pop();\n                //如果该节点是叶子节点，同时该路径数值等于sum，返回true\n                if(!node.first->left && !node.first->right && sum == node.second)\n                    return true;\n                //右节点，压入节点的同时，记录路径数值\n                if(node.first->right)\n                    st.push(pair<TreeNode*,int>(node.first->right,node.second +                           node.first->right->val));\n                //左节点，压入节点的同时，记录路径数值\n                if(node.first->left)\n                    st.push(pair<TreeNode*,int>(node.first->left,node.second +                           node.first->left->val));\n            }\n            return false;\n        }\n};\n```\n\n\n\n### 十六、路径总和II\n\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于目标和的路径\n\n递归：\n\n```c++\nclass solution{\n    private:\n    \tvector<vector<int>> result;//记录所有和为sum的路径\n    \tvector<int> path;//记录单条遍历的路径\n        //递归函数不需要返回值，因为要遍历整棵树\n    \tvoid traversal(TreeNode* cur,int count){\n            //遇到叶子节点且找到和为sum的路径\n            if(!cur->left && !cur->right && count == 0){\n                result.push_back(path);\n                return ;\n            }\n            \n            if(!cur->left && !cur->right)\n                return ;\n            \n            if(cur->left){//左\n                path.push_back(cur->left->val);\n                traversal(cur->left,count - cur->left->val);\n                path.pop_back();\n            }\n            if(cur->right){//右\n                path.push_back(cur->right->val);\n                traversal(cur->right,count - cur->right->val);\n                path.pop_back();\n            }\n            /*体现回溯的过程\n            if(cur->left){\n            \tpath.push_back(cur->left->val);\n            \tcount -= cur->left->val;\n            \ttraversal(cur->left,count);//递归\n            \tcount += cur->left->val;//回溯\n            \tpath.pop_back();//回溯\n            }\n            if(cur->right){\n            \tpath.push_back(cur->left->val);\n            \tcount -= cur->right->val;\n            \ttraversal(cur->right,count);//递归\n            \tcount += cur->right->val;//回溯\n            \tpath.pop_back();//回溯\n            }\n            */\n            return ;\n        }\n    \n    public:\n    \tvector<vector<int>> findPathSum(TreeNode* root,int sum){\n            result.clear();\n            path.clear();\n            if(root == NULL)\n                return result;\n            path.push_back(root->val);\n          \ttraversal(root,sum - root->val);\n            return result;\n        }\n};\n```\n\n\n\n### 十七、从中序与后序遍历序列构造二叉树\n\n根据一棵树的中序和后序遍历构造二叉树\n\n```c++\nclass solution{\n    private:\n    \tTreeNode* traversal(vector<int>& inorder,vector<int>& postorder){\n            //第一步\n            if(postorder.size() == 0)\n                return NULL;\n            //后序遍历数组的最后一个元素，就是当前的中间节点\n            int rootValue = postorder[postorder.size() - 1];\n            TreeNode* root = new TreeNode(rootValue);\n            \n            if(postorder.size() == 1)\n                return root;\n            \n            for(int delimiterIndex = 0;delimiter < inorder.size();delimiterIndex ++){\n                if(inorder[delimiterIndex] == rootValue)\n                    break;\n            }\n            \n            vector<int> leftInorder(inorder.begin(),inorder.begin()+delimiterIndex);\n            vector<int> rightInorder(inorder.begin()+delimiterIndex+1,inorder.end());\n            \n            postorder.resize(postorder.size() - 1);\n            \n            vector<int>                                                                           leftPostorder(postorder.begin(),postorder.begin()+leftInorder.size());\n            vector<int>\n            rightPostorder(postorder.begin()+leftInorder.size(),postorder.end());\n            \n            root->left = traversal(leftInorder,leftPostorder);\n            root->right = traversal(rightInorder,rightPostorder);\n            \n            return root;\n        }\n    \n    public:\n    \tTreeNode* bulidTree(vector<int>& inorder,vector<int>& postorder){\n            if(inorder == NULL || postorder == NULL)\n                return NULL;\n            return traversal(inorder,postorder);\n        }\n                        \n};\n\n```\n\n\n\n### 十八、最大二叉树\n\n给定一个不含重复元素的整数数组。最大二叉树定义如下：\n\n1、二叉树的根是数组中的最大元素\n\n2、左子树是通过数组中的最大值左边部分构造出的最大二叉树\n\n3、右子树是通过数组中的最大值左边部分构造出的最大二叉树\n\n给定的数组大小在[1,1000]之间\n\n\n\n1、确定递归函数参数和返回值\n\n参数传入的是存放元素的数组，返回该数组构造的二叉树的头节点，返回类型是指向节点的指针\n\n```c++\nTreeNode* constructMaxBinaryTree(vector<int>& nums)\n```\n\n2、确定终止条件\n\n```c++\nTreeNode* node = new TreeNode(0);\nif(nums.size() == 1){\n    node->val = nums[0];\n    return node;\n}\n```\n\n3、确定单层递归逻辑\n\n分三步：\n\n一、找到数组中最大的值与其对应的下标，最大的值构造根节点，下标用来下一步分割数组\n\n```c++\nint maxValue = 0;\nint maxValueIndex = 0;\nfor(int i = 0;i < nums.size();i ++){\n    if(nums[i] > maxValue){\n        maxValue = nums[i];\n        maxValueIndex = i;\n    }\n}\nTreenode* node = new TreeNode(0);\nnode->val = maxValue;\n```\n\n二、最大值所在下标左区间 构造左子树\n\n需要判断maxValueIndex>0,因为至少保证左区间至少有一个数值\n\n```c++\nif(maxValueIndex > 0){\n    vector<int> leftTree(nums.begin(),nums.begin()+maxValueIndex);\n    node->left = constructMaxBinaryTree(leftTree);\n}\n```\n\n三、最大值所在下标右区间 构造右子树\n\nmaxValue<(nums.size()-1),保证右区间至少有一个数值\n\n```c++\nif(maxValueIndex < (nums.size() - 1)){\n    vector<int> rightTree(nums.begin()+maxValueIndex+1,nums.end());\n    node->right = constructMaxBinaryTree(rightTree);\n}\n```\n\n\n\n```c++\nclass solution{\n    public:\n    \tTreeNode* constructMaxBinaryTree(vector<int>& nums){\n            TreeNode* node = new TreeNode(0);//构造中节点\n            //当数组只剩下一个元素，即叶子节点\n            if(nums.size() == 1){\n                node->val = nums[0];\n                return node;\n            }\n            \n            //找到数组中的最大值与其下标\n            int maxValue = 0;\n            int maxValueIndex = 0;\n            for(int i = 0;i < nums.size();i ++){\n                if(nums[i] > maxValue){\n                    maxValue = nums[i];\n                    maxValueIndex = i;\n                }\n            }\n            node->val = maxValue;\n            \n            //确保左右区间至少有一个元素\n            if(maxValueIndex > 0){\n                vector<int> left(nums.begin(),nums.begin()+maxValueIndex);\n                node->left = constructMaxBinaryTree(left);\n            }\n            if(maxValueIndex < nums.size() - 1){\n                vector<int> right(nums.begin()+maxValueIndex+1,nums.end());\n                node->right = constructMaxBinaryTree(right);\n            }   \n            return node;\n        }\n};\n```\n\n以上代码较为冗余，效率不高，每次分割数组后都要新定义vector，但是逻辑描述较为清晰\n\n优化版：\n\n```c++\nclass solution{\n    private:\n    \t//在左闭右开区间[left,rihgt)，构造二叉树\n    \tTreeNode* traversal(vector<int>& nums,int left,int right){\n            if(left >= right)\n                return nullptr;\n            //分割点下标：maxValueIndex\n            int maxValueIndex = 0;\n            for(int i = 0;i < right;i ++){\n                if(nums[i] > nums[maxValueIndex])\n                    maxValueIndex = i;\n            }\n            TreeNode* node = new TreeNode(nums[maxValueIndex]);\n            \n            //左闭右开[left,maxValueIndex)\n            node->left = traversal(nums,left,maxValueIndex);\n            \n            //左闭右开[maxValueIndex+1,right)\n            node->right = traversal(nums,maxValueIndex+1,right);\n            \n            return node;\n        }\n    public:\n    \tTreeNode* constructMaxBinaryTree(vector<int>& nums){\n            //初始左闭右开区间[0,nums.size())\n            return traversal(nums,0,nums.size());\n        }\n}\n```\n\n","source":"_posts/binary-tree.md","raw":"---\ntitle: binary tree\ndate: 2023-8-18 18:36:00\nupdated: 2023-8-18 18:36:00\ndescription: 二叉树专题\ncover: https://images6.alphacoders.com/128/thumbbig-1288241.webp\ntags: \n    - 数据结构 \n    - 二叉树\n---\n### 一、二叉树定义\n\n```c++\nstruct TreeNode{\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x){\n        val = x;\n        this.left = NULL;\n        this.right = NULL;\n    }\n};\n```\n\n```java\npublic class TreeNode{\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(){}\n    TreeNode(int val){this.val = val;}\n    TreeNode(int val,TreeNode left,TreeNode right){\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n```\n\n```python\nclass TreeNode:\n    def _init_(self,value):\n        self.value = value\n        self.left = None\n        self.right = None\n```\n\n### 二、递归\n\n1、确定递归函数的参数和返回值\n\n2、确定终止条件\n\n3、确定单层递归的逻辑\n\n递归的实现：每一次递归调用都会把函数的局部变量，参数值，返回地址等压入调用栈中，等递归返回时，从栈顶弹出上一次递归的各项参数。\n\n\n\n#### 前序遍历（递归）\n\n打印遍历节点的值，除此之外无需返回其他值，函数返回类型为void,参数vec存储节点的数值\n\n```c++\nvoid traversal(TreeNode* cur,vector<int>& vec)\n```\n\n本轮递归终止的条件是当前节点为空\n\n```C++\nif(cur == NULL) return;\n```\n\n前序遍历按照左中右顺序，先取中节点的值（单层递归）\n\n```C++\nvec.push_back(cur -> val);//中\ntraversal(cur -> left,vec);//左\ntraversal(cur -> right,vec);//右\n```\n\n前序遍历总过程：\n\n```C++\nclass solution{\n    public:\n    \tvoid traversal(TreeNode* cur,vector<int>& vec){\n                if(cur == NULL)\n                    return;\n                vec.push_back(cur -> val);\n                traversal(cur -> left,vec);\n                traversal(cur -> right,vec);\n            }\n    \tvector<int> preordertraversal(TreeNode* root){\n            vector<int> result;//初始化一个vec\n            traversal(root,result);//从根节点开始遍历\n            return result;\n        }\t\n};\n```\n\n#### 中序遍历（递归）\n\n```C++\nvoid traversal(TreeNode* cur,vector<int>& vec){\n    if(cur == NULL)\n        return;\n    traversal(cur -> left,vec);\n    vec.push_back(cur -> val);\n    traversal(cur -> right,vec);\n}\n```\n\n#### 后序遍历（递归）\n\n```c++\nvoid traversal(TreeNode* cur,vector<int>& vec){\n    if(cur == NULL)\n        return;\n    traversal(cur -> left,vec);\n    traversal(cur -> right,vec);\n    vec.push_back(cur -> val);\n}\n```\n\n\n\n### 三、迭代\n\n#### 前序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> preorderTraversal(TreeNode* root){\n            stack<TreeNode*> s;\n            vector<int> vec;\n            if(root == NULL)\n                return vec;\n            s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();\n                s.pop();\n                vec.push_back(node -> val);//栈顶节点值加入vec\n                if(node -> right)//先压入右节点，空节点不执行\n                    s.push(node -> right);\n                if(node -> left)//后压入左节点，空节点不执行\n                    s.push(node -> left);\n            }\n            return vec;\n        }\n};\n```\n\n#### 后序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    vector<int> Traversal(TreeNode* root){\n    \tstack<TreeNode*> s;\n        vector<int> vec;\n        if(root == NULL)\n            return vec;\n        s.push(root);\n        while(!s.empty()){\n            TreeNode* node = s.top();\n            s.pop();\n            vec.push_back(node -> val);\n            if(node -> left)\n                s.push(node -> left);\n            if(node -> right)\n                s.push(node -> right);//遍历顺序改为中右左\n        }\n        reverse(vec.begin(),vec.end());//逆序为左右中\n        return vec;\n\t}\n};\n```\n\n前序遍历访问节点（遍历节点）和处理节点（将节点放入vec数组中）可以进行同步处理（既处理顺序和访问顺序一致），但是中序遍历无法同步\n\n\n\n#### 中序遍历（迭代）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> inorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root == NULL)\n            \treturn vec;\n            TreeNode* cur = root;//使用指针来进行节点访问\n            while(!s.empty()){\n                if(cur != NULL){//指针访问节点，一直访问至二叉树最底层\n                    s.push(cur);//将访问节点放入栈\n                    cur = cur -> left;//左\n                }else{\n                    cur = s.top();//从栈顶弹出的数据即为需要处理的数据（放进vec数组中的数据）\n                    s.pop();\n                    vec.push_back(cur -> val);//中\n                    cur = cur -> right;//右\n                }\n            }\n        }\n};\n```\n\n中序遍历先是访问根节点，再逐步向左向下访问节点直至到达最底层，进而再开始处理节点（将节点数值放入vec数组），导致访问顺序和处理数据顺序是不一样的。\n\n\n\n\n\n### 四、二叉树的统一迭代法\n\n#### 中序遍历\n\n```C++\nclass solution{\n    public:\n    \tvector<int> inorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root != NULL)\n                s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();//将该节点弹出，避免重复操作，下面再将右中左节点加入栈\n                if(node != NULL){\n                    s.pop();\n                    if(node -> right)\n                        s.push(node -> right);//非空右节点入栈\n                    s.push(node);//中节点入栈\n                    s.push(NULL);//此时中节点未进行处理，再其后加入NULL标记（表示待处理）\n                    if(node -> left)\n                        s.push(node -> left);//非空左节点入栈\n                }else{//遇到空节点（即NULL标记）时，将下一个节点加入vec数组\n                    s.pop();//将空节点弹出\n                    node = s.top();//重新取出栈中元素\n                    s.pop();\n                    vec.push_back(node -> val);\n                }\n            }\n            return vec;\n        }\n};\n```\n\n#### 前序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<int> preorderTraversal(TreeNode* root){\n            vector<int> vec;\n            stack<TreeNode*> s;\n            if(root != NULL)\n                s.push(root);\n            while(!s.empty()){\n                TreeNode* node = s.top();\n                if(node != NULL){\n                    s.pop();\n                    if(node -> right)\n                        s.push(node -> right);\n                    if(node -> left)\n                        s.push(node -> left);\n                    s.push(node);\n                    s.push(NULL)\n                }else{\n                    s.pop();\n                    node = s.top();\n                    s.pop();\n                    vec.push_back(node -> val);\n                }\n                    \n            }\n        }\n};\n```\n\n#### 后序遍历\n\n```c++\nclass solution{\n    public:\n    vector<int> Traversal(TreeNode* root){\n        vector<int> vec;\n        stack<TreeNode*> s;\n        if(root != NULL)\n            s.push(root);\n        while(!s.empty()){\n            TreeNode* node = s.top();\n            if(node != NULL){\n                s.pop();\n                s.push(node);\n                s.push(NULL);\n                if(node -> right)\n                    s.push(node -> right);\n                if(node -> left)\n                    s.push(node -> left);\n                \n            }else{\n                s.pop();\n                node = s.top();\n                s.pop();\n                vec.push_back(node -> val);\n            }\n        }\n        return vec;\n    }\n};\n```\n\n到此，我们就将前中后序三种遍历用统一的代码风格写出来，关键在于加入NULL标记来表示需要处理的元素。\n\n\n\n### 五、二叉树的层序遍历\n\n层序遍历一个二叉树，就是一层一层从左往右进行遍历二叉树，需要借助数据结构遍历来实现，队列先进先出，符合一层一层遍历的逻辑，而使用栈先进后出适合深度优先遍历即递归的逻辑。\n\n层序遍历是图论里的广度优先遍历。\n\n#### 1、自上而下的层序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> levelOrder(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;//每层一个数组，每行合起来则是二维数组\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                //使用固定大小的size，而不用que.size()，因为que.size()会不断变化\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(vec);\n            }\n            return result;\n        }\n};\n#递归法\nclass solution{\n    public:\n    \tvoid order(TreeNode* cur,vector<vector<int>>& result,int depth){\n            if(cur == nullptr)\n                return;\n            if(result.size() == depth)\n                result.push_back(vector<int>());\n            result[depth].push_back(cur -> val);\n            order(cur -> left,result,depth + 1);\n            order(cur -> right,result,depth + 1);\n        }\n    \t\n    \tvector<vector<int>> levelorder(TreeNode* root){\n            vector<vector<int>> result;\n            int depth = 0;\n            order(root,result,depth);\n            return result;\n        }\n};\n```\n\n#### 2、自底向上的层序遍历（将数组逆序然后输出）\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> order(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        vec.push(node -> left);\n                    if(node -> right)\n                        vec.push(node -> right);\n                }\n                result.push_back(vec);\n            }\n            reserve(result.begin(),result.end());//反转数组\n            return result;\n        }\n};\n```\n\n#### 3、二叉树的右视图（从右看二叉树所能得到的节点值）\n\n```c++\nclass solution{\n    public:\n    \tvector<int> rightSizeView(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<int> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(i ==z (size - 1))\n                        result.push_back(node -> val);//将每层最后一个元素放入result数组\n                    if(node -> left)\n                        que.push(node ->left);\n                    if(node -> right)\n                        que.push(node ->right);\n                } \n            }\n            return result;\n        }\n};\n```\n\n#### 4、二叉树的层平均值\n\n```c++\nclass solution{\n    public:\n    \tvector<double> averageOfLevels(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<double> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    double sum += node -> val;//统计每一层的和\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(sum / size);//将每一层均值放入result数组中\n            }\n            return result;\n        }\n};\n```\n\n#### 5、N叉树的层序遍历\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> levelOrder(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<vector<int>> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                vector<int> vec;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    for(int j = 0;i < node -> children.size();j ++){//将节点孩子加入队列\n                        if(node -> children[j])\n                            que.push(node -> children[j]);\n                    }\n                }\n                result.push_back(vec);\n            }\n            return result;\n        }\n};\n```\n\n#### 6、在每个二叉树行中找最大值\n\n```c++\nclass solution{\n    public:\n    \tvector<int> largestValues(TreeNode* root){\n            queue<TreeNode*> que;\n            vector<int> result;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                int maxValue = INT_MIN;//现将最大值设为INT_MIN(即整数最小)\n                for(i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    //通过每一层不断比较，最终得到maxValue（即最大值）\n                    maxValue = ((node -> val) > maxValue)?node -> val:maxValue;\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                result.push_back(maxValue);//将每一层的最大值加入数组result\n            }\n            return result;\n        }\n};\n```\n\n\n\n#### 7、填充每一个节点的下一个右侧节点\n\n```c++\nstruct Node{\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;//指向节点的右侧节点\n};\n\nclass solution{\n    public:\n    \tTreeNode* connect(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                Node* preNode;//用来记录首节点和前一个节点\n                Node* node;//遍历节点\n                for(int i = 0;i < size;i ++){\n                    if(i == 0){\n                        preNode = que.front();\n                        que.pop();\n                        node = preNode;\n                    }else{\n                        node = que.front();\n                        que.pop();\n                        preNode -> next = node;\n                        preNode  = preNode -> next;//= node同理\n                    }\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(right);\n                }\n                node -> next = NULL;//本层最后一个节点指向NULL\n            }\n            return root;\n        }\n};\n```\n\n#### 8、二叉树的最大深度\n\n给定一个二叉树，找出其最大深度\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数（叶子节点没有子节点）\n\n```c++\nclass solution{\n    public:\n    int maxDepth(TreeNode* root){\n        queue<TreeNode*> que;\n        int depth = 0;\n        if(root != NULL)\n            que.push(root);\n        while(!que.empty()){\n            int size = que.size();\n            depth ++;//记录深度\n            for(int i = 0;i < size;i ++){\n                TreeNode* node = que.front();\n                que.pop();\n                if(node -> left)\n                    que.push(node -> left);\n                if(node -> right)\n                    que.push(node -> right);\n            }\n        }\n        return depth;\n    }\n};\n```\n\n#### 9、二叉树的最小深度\n\n```c++\nclass solution{\n    public:\n    \tint minDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                    //当节点左右孩子都为空（即叶子节点），到达最小深度\n                    if(!node -> left && !node -> right)\n                        return depth;\n                }\n            }\n            return depth;\n        }\n};\n```\n\n总结，二叉树的层序遍历，就是图论中的广度优先搜索在二叉树中的应用，需要借助队列来实现。\n\n\n\n### 六、翻转二叉树\n\n#### 1、深度优先遍历\n\n```c++\n//递归（前序遍历）\n//先进行交换左右孩子节点，然后反转左子树，然后反转右子树\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            if(root == NULL)\n                return root;\n            swap(root -> left,root -> right);//中\n            invertTree(root -> left);//左\n            invertTree(root -> right);//右\n            \n            return root;\n        }\n};\n```\n\n\n\n```c++\n//前序遍历（迭代）\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root != NULL)\n                st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();//中\n                st.pop();\n                swap(node -> left,node ->right);\n                if(node -> right)\n                    st.push(node -> right);//右\n                if(node -> left)\n                    st.push(node -> left);//左\n            }\n            return root;\n        }\n};\n```\n\n```c++\n//前序遍历（统一迭代法）\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root != NULL)\n                st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                if(node != NULL){\n                    st.pop();\n                    if(node -> right)\n                        st.push(right);\n                    if(node -> left)\n                        st.push(left);\n                    st.push(node);\n                    st.push(NULL);\n                }else{\n                    st.pop();\n                    TreeNode* node = st.top();\n                    st.pop();\n                    swap(node -> left,node ->right);//节点处理逻辑\n                }\n            }\n            return root;\n        }\n};\n```\n\n#### 2、广度优先遍历\n\n```c++\n;//层序遍历\nclass solution{\n    public:\n    \tTreeNode* invertTree(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    swap(node -> left,node -> right);//左右子树交换\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n            }\n            return root;\n        }\n};\n```\n\n\n\n针对二叉树的问题，解题之前要想清楚究竟选择哪种遍历方式\n\n\n\n\n\n### 七、对称二叉树\n\n给定一个二叉树，检查二叉树是否镜像对称\n\n```c++\n//自己的第一遍思考\nclass solution{\n    public:\n    \tbool Tree(TreeNode* root){\n            stack<TreeNode*> que;\n            vector<int> vec;\n            int flag = 1;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    vec.push_back(node -> val);\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n                for(j = 0;j < size;j ++){\n                    if((vec[j] != vec[size - 1 -j] || vec[j] == NULL || vec[size - 1-                         1 - j] == NULL)\n                       flag =1;\n                       return flag;       \n                }\n            }\n            return flag;\n        }  \n};\n```\n\n针对自己第一次实现的想法进行改进：首先判断二叉树是否对称，不需要加入根节点（遍历则需要加入），因为是否对称只和左右子树有关。同时鉴于对队列数据结构的不熟练，调用了vector数组来储存节点数值后在数组中进行比较（考虑麻烦了），直接对称的将左右子树的节点加入到队列中，两个两个一组弹出比较。还加了flag标记来输出bool数，直接true or false即可。\n\n```c++\n//迭代\nclass solution{\n    public:\n    \tbool isSymmetric(TreeNode* root){\n            if(root == NULL)\n                return true;\n            queue<TreeNode*> que;\n            que.push(root -> left);//加入左子树头结点\n            que.push(root -> right);//加入右子树头结点\n            while(!que.empty()){\n                TreeNode* leftNode = que.front();\n                que.pop();\n                TreeNode* rightNode = que.front();\n                que.pop();\n                if(!leftNode && !leftNode)\n                    continue;\n                \n                \n                if(!leftNode || !rightNode || (leftNode -> val != rightNode -> val))\n                    return false;\n                \n                que.push(leftNode -> left);\n                que.push(rightNode -> right);\n                que.push(leftNode -> right);\n                que.push(rightNode -> left);\n            }\n            return true;\n        }\n};\n```\n\n递归\n\n1、确定递归参数和返回值\n\n比较根节点的两个子树是否是互相翻转的，进而判断这个二叉树是否对称，比较的是左右两个子树，参数就是根节点的左子树头结点和右子树头结点。\n\n返回值自然是bool类型。\n\n2、确定终止条件\n\n要比较两个节点的数值相不相等，首先要把两节点为空的情况搞清楚。\n\n* 左节点为空，右节点不为空\n* 左节点不为空，右节点为空\n* 左右节点都为空\n* 左右节点都不为空但是值不相等   \n\n3、确定单层递归的逻辑\n\n单层递归的逻辑就是两个节点都不为空且节点值相等的情况。\n\n* 比较外侧节点值是否相等：传入左节点的左孩子，右节点的右孩子\n* 比较内侧节点值是否相等：传入左节点的右孩子，右节点的左孩子\n* 如果左右都对称返回true，有一方不对称就返回false\n\n```c++\nclass solution{\n    public:\n    \tbool compare(TreeNode* left,TreeNode* right){\n            //首先排除空节点的情况\n            if(!left && right)\n                return false;\n            else if(left && !right)\n                return false;\n            else if(!left && !right)\n                return true;\n            //排除空节点后，两节点值不相等的情况\n            else if((left -> val) != (right -> val))\n                return false;\n            \n            //左子树：左，右子树：右\n            bool outside = compare(left -> left,right -> right);\n            //左子树：右，右子树：左\n            bool inside = compare(left -> right,right -> left);\n            //逻辑处理\n            bool isSame = outside && inside;\n            return isSame;\n        }\n    \tbool isSymmetric(TreeNode* root){\n            if(root == NULL)\n                return true;\n            return compare(root -> left,root -> right);\n        }\n};\n```\n\n\n\n### 八、二叉树的最大深度\n\n```c++\n//前序遍历\nclass solution{\n    public:\n    \tint result;//用来存储最大深度\n        //函数返回值为void，非int，与计算节点数不同，深度不具有累加性\n    \tvoid getDepth(TreeNode* node,int depth){//参数为当前节点，以及当前的深度\n            result = depth > result ? depth : result;//通过不断比较深度来更新深度的值\n            if(!node->left && !node->right)\n                return ;\n            if(node->left){//左\n                depth ++;//深度加一，因为向下了一层\n                getDepth(node->left,depth);\n                depth --;//回溯，因为右子树还未进行\n            }\n            if(node->right){//同理，右\n                depth ++;\n                getDepth(node->right,depth);\n                depth --;\n            }\n            return ;\n        }\n    \t\n    \tint maxDepth(TreeNode* root){\n            result = 0;\n            if(root == nullptr)\n                return result;\n            getDepth(root,1);\n            return result;\n        }\n}；\n```\n\n\n\n迭代法中层序遍历最为合适，因为遍历的层数即是二叉树的深度\n\n```c++\nclass solution{\n\tpublic:\n    \tint maxDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                     \tque.push(node -> right);\n                }\n            }\n            return depth;\n        }\n\t\n};\n```\n\nn叉树的最大深度\n\n```c++\nclass solution{\n    public:\n    \tint maxDepth(TreeNode* root){\n            queue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.front();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    for(int j = 0;j < node -> children.size();j ++){\n                        if(node -> children[j])\n                            que.push(node -> children[j]);\n                    }\n                }\n            }\n            return depth;\n        }\n        \n};\n```\n\n### 九、二叉树的最小深度\n\n最小深度是指根节点到最近叶子节点的最短路径上的节点个数\n\n```c++\nclass solution{\n    public:\n    \tint minDepth(TreeNode* root){\n        \tqueue<TreeNode*> que;\n            int depth = 0;\n            if(root != NULL)\n                que.push(root);\n            while(!que.empty()){\n                int size = que.size();\n                depth ++;\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    if((!node -> left) && (!node -> right))//左右节点都为空时到达最小深度\n                        return depth;\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                     \tque.push(node -> right);\n                }\n            }\n            return depth;\n        }\n};\n```\n\n### 十、完全二叉树的节点个数\n\n将完全二叉树当作普通二叉树看待，依旧使用普通二叉树的遍历方法来计算节点个数\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tint getNodeNums(TreeNode* root){\n            if(root == nullptr)\n                return 0;\n            int leftNodeNums = getNodeNums(root -> left);//左\n            int rightNodeNums = getNodeNums(root -> right);//右\n            int nodeNums = leftNodeNums + rightNodeNums + 1;//中\n            return nodeNums;\n        }\n    \n    \tint countNodes(TreeNode* root){\n            return getNodeNums(root);\n        }\n};\n```\n\n```c++\n//迭代法\nclass solution{\n    public:\n    \tint countNodes(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            int result = 0;//记录节点个数\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    que.pop();\n                    result ++;//每遍历一个节点加一\n                    if(node -> left)\n                        que.push(node -> left);\n                    if(node -> right)\n                        que.push(node -> right);\n                }\n            }\n            return result;\n        }\n};\n```\n\n\n\n然而，完全二叉树本省具有一些特性使得能够使用一些其它的方法来计算个数\n\n在完全二叉树中，除了最底层的节点可能没有填满之外，其余每层节点数都达到最大值，并且最下面一层节点都集中在该层最左侧的若干区域，若最底层为第h层，则该层节点个数范围为1~2^(h-1)\n\n\n\n完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。\n\n对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。\n\n对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。\n\n可以看出如果整个树不是满二叉树，就递归其左右孩子，直到遇到满二叉树为止，用公式计算这个子树（满二叉树）的节点数量。\n\n这里关键在于如何去判断一个左子树或者右子树是不是满二叉树呢？\n\n\n\n在完全二叉树中，如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。\n\n```c++\nclass solution{\n    public:\n    \tint countNodes(TreeNode* root){\n            if(root == nullptr)\n                return 0;\n            TreeNode* left = root -> left;\n            TreeNode* right = root -> right;\n            int leftDepth = 0;\n            int rightDepth = 0;\n            while(left){\n                left = left -> left;\n                leftDepth ++;\n            }\n            while(right){\n                right = right -> right;\n                rightDepth ++;\n            }\n            if(leftDepth == rightDepth)\n                return 2^(leftDepth - 1);\n            \n            return countNodes(root -> left) + countNodes(root -> right) + 1;\n                \n        }\n};\n```\n\n### 十一、平衡二叉树\n\n因为求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）\n\n\n\n一颗高度平衡的二叉树定义为：一个二叉树每个节点的左右两棵子树的高度差绝对值不超过1。\n\n根据定义可知，如果以当前节点为传入节点的二叉树已经不是二叉树了，则该二叉树不是平衡二叉树\n\nreturn -1来标记不符合平衡二叉树的规则。\n\n\n\n递归思路：\n\n1、明确递归函数的参数和返回值\n\n参数：当前传入节点。 返回值：以当前传入节点为根节点的树的高度。\n\n那么如何标记左右子树是否差值大于1呢？\n\n如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。\n\n所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。\n\n2、明确终止条件\n\n递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0\n\n3、明确单层递归的逻辑\n\n如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。\n\n分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。\n\n```c++\n//递归\nclass solution{\n    public:\n    \tint getHeight(TreeNode* node){\n            if(node == nullptr)//如果该节点是空指针，则高度为0\n                return 0;\n            //判断左右子树是否是平衡二叉树，有一个不是则非平衡二叉树\n            int leftHeight = getHeight(node->left);\n            if(leftHeight == -1)\n                return -1;\n            int rightHeight = getHeight(node->right);\n            if(LeftHeight == -1)\n                return -1;\n            \n            if(abs(leftHeight - rightHeight) > 1){//左右子树高度差不超过1\n                return -1;\n            }else{\n                //取两树高度最大者在加上根节点的高度为整颗平衡二叉树的高度\n                return max(leftHeight,rightHeight) + 1;\n            }\n        }\n        \n    \tbool isBalance(TreeNode* root){\n            return getHeight(root) == -1 ? false : true;\n        }\n};\n```\n\n```c++\n//迭代\nclass solution{\n    public:\n        //node节点的最大深度就是node的高度\n    \tint getDepth(TreeNode* node){\n            stack<TreeNode*> st;\n            if(node == nullptr)\n                return 0;\n            int depth = 0;//记录深度\n            int result = 0;//更新最大深度值\n            st.push(node);\n            while(!st.empty()){\n                TreeNode* cur = st.top();\n                if(node != NULL){\n                    st.pop();\n                    st.push(cur);\n                    st.push(NULL);\n                    depth ++;\n                    if(cur->right)\n                        st.push(cur->right);\n                    if(cur->left)\n                        st.push(cur->left);\n                }else{\n                    st.pop();\n                    node = st.top();\n                    st.pop();\n                    depth --;\n                }\n                result = result > depth ? result : depth;\n            }\n            return result;\n        }\n    \t\n    \tbool isBalance(TreeNode* root){\n            stack<TreeNode*> st;\n            if(root == NULL)\n               return true;\n            st.push(root);\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                st.pop();\n                if(abs(getDepth(node->left),getDepth(node->right))>1)\n                    return false;\n                if(node->right)\n                    st.push(node->right);\n                if(node->left)\n                    st.push(node->left);\n            }\n            return true;\n        }\n};\n```\n\n求深度适合前序遍历，求高度适合后序遍历\n\n### 十二、二叉树的所有路径\n\n```c++\nclass solution{\n    public:\n    \tvoid traversal(TreeNode* node,vector<int> path,vector<string> result){\n            path.push_back(node->val);\n            if(node->left == NULL && node->right == NULL){\n                string sPath;\n                for(int i = 0;i < path.size() - 1;i++){\n                    sPath += to_string(path[i]);\n                    sPath += \"->\";\n                }\n                sPath += to_string(path[path.size() - 1]);\n                result.push_back(sPath);\n                return;\n            } \n            if(node->left){\n                traversal(node->left,path,result);\n                path.pop_back();\n            }\n            if(node->right){\n                traversal(node->right,path,result);\n                path.pop_back();\n            }\n        }\n    \n    \tvector<string> binaryTreePaths(TreeNode* root){\n            vector<int> path;\n            vector<string> result;\n            if(root == NULL)\n                return result;\n            traversal(root,path,result);\n            return result;\n        }\n};\n```\n\n\n\n### 十三、左叶子之和\n\n1、确定递归函数的参数和返回值\n\n要判断左节点值之和，首先要传入根节点，返回值则为数值之和\n\n2、确定终止条件\n\n如果遍历到空节点，左叶子值为0\n\n```c++\nif(root == NULL) return 0;\n```\n\n注意，只有当前节点遍历的是父节点，才能判断其子节点是不是左叶子。所以如果当前遍历的节点是叶子节点，那其左叶子也必定为0\n\n```c++\nif(root->left == NULL && root->right == NULL) return 0;\n```\n\n3、确定单层递归的逻辑\n\n遇到左叶子节点时，记录数值，然后通过递归求取左子树左叶子之和和右子树左叶子之和。相当于整个树的左叶子之和\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tint sumOfLeftLeaves(TreeNode* root){\n            if(root == NULL)\n                return 0;\n            if(root->left == NULL && root->right == NULL)\n                return 0;\n            \n            int LeftValue = sumOfLeftLeaves(root->left);//左\n            //当左子树只是一个左叶子节点的时候\n            if(root->left && !root->left->left && !root->left->right)\n                leftValue = root->left->val;\n            \n            int rightValue = sumOfLeftLeaves(root->right);//右\n            int sum = leftValue + rightValue;//中\n            return sum;\n        }\n};\n```\n\n```c++\n//迭代法\nclass solution{\n\tpublic:\n    \tint sumOfLeftLeaves(TreeNode* root){\n            if(root == NULL)\n                return 0;\n            stack<TreeNode*> st;\n            st.push(root);\n            int result = 0;\n            while(!st.empty()){\n                TreeNode* node = st.top();\n                st.pop();\n                if(node->left && !node->left->left && !node->left->right)\n                    result += node->left->val;\n                if(node->right)\n                   st.push(node->right);\n                if(node->left)\n                   st.push(node->left);\n            }\n            return result;\n        }\n};\n```\n\n\n\n### 十四、找树左下角的值\n\n```c++\n//层序遍历\nclass solution{\n    public:\n    \tint findBottomLeftValue(TreeNode* root){\n            queue<TreeNode*> que;\n            if(root != NULL)\n                que.push(root);\n            int result = 0;\n            while(!que.empty()){\n                int size = que.size();\n                for(int i = 0;i < size;i ++){\n                    TreeNode* node = que.front();\n                    if(i == 0)\n                        result = node->val;//每层取第一个节点的值\n                    que.pop();\n                    if(node->left)\n                        que.push(node->left);\n                    if(node->right)\n                        que.push(node->right);\n                }\n            }\n            return result;//遍历完所有层后result里的值则为树左下角的值\n        }\n};\n```\n\n```c++\n//递归法\nclass solution{\n    public:\n    \t//定义全局变量\n    \tint maxDepth = INT_MIN;//记录最大深度\n    \tint result;//记录树左下角的值\n    \tvoid traversal(TreeNode* node,int depth){\n            if(!node->left && !node->left){\n                if(depth > maxDepth){\n                    maxDepth = depth;\n                    result = node->val;\n                }\n                return ;\n            }\n            if(node->left){\n                //traversal(node->left,depth + 1);\n                depth ++;\n                traversal(node->left,depth);\n                depth --;\n            }\n            if(node->right){\n                //traversal(node->right,depth + 1);\n                depth ++;\n                traversal(node->right,depth);\n                depth --;\n            }\n            return ;\n        }\n    \t\n    \tint findBottomLeftValue(TreeNode* root){\n            traversal(root,0);\n            return result;\n        }\n};\n```\n\n总结：\n\n1、递归求深度的写法，在**平衡树二叉树**中详细分析了深度应该怎么求，高度应该怎么求\n\n2、递归中隐藏了回溯，在**二叉树的所有路径** 中讲解了究竟哪里使用了回溯，哪里隐藏了回溯\n\n3、层次遍历，在**层序遍历**深度讲解了二叉树层序遍历。\n\n\n\n### 十五、路径总和I\n\n给定一个二叉树和目标和，判断该树是否存在根节点到叶子节点的路径，这条路径上的所有节点值相加等于目标和\n\n递归：\n\n1、确定函数返回值和参数\n\n需要一个指针遍历二叉树，同时需要int参数来记录目标和，使用递减的方式，当某条路径上的result递减至0且到叶子节点时，说明该二叉树存在所有节点值相加等于目标和的路径\n\n2、确定终止条件\n\n 当和递减至0且遍历到叶子节点时，存在\n\n```c++\nif(result == 0 && !cur->left && !cur->right) return true;\n```\n\n当遇到叶子节点未满足条件时，不存在\n\n```c++\nif(!cur->left && !cur->right) return false;\n```\n\n3、确定单层递归的逻辑\n\n先向左继续判断，不满足再向右继续判断，都不满足则不存在该路径\n\n```c++\nif(cur->left){\n    if(traversal(cur->left,result - cur->left->val))\n        return true;\n}\nif(cur->right){\n    if(traversal(cur->right,result - cur->right->val))\n        return true;\n}\nreturn false;\n```\n\n\n\n```c++\n//递归法\nclass solution{\n    public:\n    \tbool traversal(TreeNode* cur,int result){//记录当前节点和目标和\n            //当和递减至0且遍历到叶子节点时，存在\n            if(result == 0 && !cur->left && !cur->right)\n                return true;\n            //当遇到叶子节点未满足条件时，不存在\n            if(!cur->left && !cur->right)\n                return false;\n            \n            if(cur->left){//左\n                if(traversal(cur->left,result - cur->left->val))//包含回溯的逻辑\n                    return true;\n            }\n            if(cur->right){//右\n                if(traversal(cur->right,result - cur->right->val))//包含回溯的逻辑\n                    return true;\n            }\n            return false;\n            /*将回溯过程体现出来代码可改为：\n            if(cur->left){\n            \tresult -= cur->left->val;\n            \tif(traversal(cur->left,result))\n            \t\treturn true;\n            \tresult += cur->left->val;\n            }\n            if(cur->right){\n            \tresult -= cur->right->val;\n            \tif(traversal(cur->right,result))\n            \t\treturn true;\n            \tresult += cur->right->val;\n            }\n            */\n        }\n    \t\n    \tbool hasPathSum(TreeNode* root,int sum){\n            if(root == NULL)\n                return false;\n            return traversal(root,sum - root->val);\n        }\n};\n```\n\n递归过程隐藏回溯，如：\n\n```c++\ntraversal(cur->left,result - cur->left->val);\n```\n\n把result - cur->left->val直接作为参数传进函数，函数结束，result的数值并没有改变\n\n```c++\n//迭代法\nclass solution{\n    public:\n    \tbool hasPathSum(TreeNode* root,int sum){\n            if(root == nullptr)\n                return false;\n            //此时栈里放的是pair<节点指针，路径数值>\t\n            stack<pair<TreeNode*,int>> st;\n            st.push(pair<TreeNode*,int>(root,root->val));\n            while(!st.empty()){\n                pair<TreeNode*,int> node = st.top();\n                st.pop();\n                //如果该节点是叶子节点，同时该路径数值等于sum，返回true\n                if(!node.first->left && !node.first->right && sum == node.second)\n                    return true;\n                //右节点，压入节点的同时，记录路径数值\n                if(node.first->right)\n                    st.push(pair<TreeNode*,int>(node.first->right,node.second +                           node.first->right->val));\n                //左节点，压入节点的同时，记录路径数值\n                if(node.first->left)\n                    st.push(pair<TreeNode*,int>(node.first->left,node.second +                           node.first->left->val));\n            }\n            return false;\n        }\n};\n```\n\n\n\n### 十六、路径总和II\n\n给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于目标和的路径\n\n递归：\n\n```c++\nclass solution{\n    private:\n    \tvector<vector<int>> result;//记录所有和为sum的路径\n    \tvector<int> path;//记录单条遍历的路径\n        //递归函数不需要返回值，因为要遍历整棵树\n    \tvoid traversal(TreeNode* cur,int count){\n            //遇到叶子节点且找到和为sum的路径\n            if(!cur->left && !cur->right && count == 0){\n                result.push_back(path);\n                return ;\n            }\n            \n            if(!cur->left && !cur->right)\n                return ;\n            \n            if(cur->left){//左\n                path.push_back(cur->left->val);\n                traversal(cur->left,count - cur->left->val);\n                path.pop_back();\n            }\n            if(cur->right){//右\n                path.push_back(cur->right->val);\n                traversal(cur->right,count - cur->right->val);\n                path.pop_back();\n            }\n            /*体现回溯的过程\n            if(cur->left){\n            \tpath.push_back(cur->left->val);\n            \tcount -= cur->left->val;\n            \ttraversal(cur->left,count);//递归\n            \tcount += cur->left->val;//回溯\n            \tpath.pop_back();//回溯\n            }\n            if(cur->right){\n            \tpath.push_back(cur->left->val);\n            \tcount -= cur->right->val;\n            \ttraversal(cur->right,count);//递归\n            \tcount += cur->right->val;//回溯\n            \tpath.pop_back();//回溯\n            }\n            */\n            return ;\n        }\n    \n    public:\n    \tvector<vector<int>> findPathSum(TreeNode* root,int sum){\n            result.clear();\n            path.clear();\n            if(root == NULL)\n                return result;\n            path.push_back(root->val);\n          \ttraversal(root,sum - root->val);\n            return result;\n        }\n};\n```\n\n\n\n### 十七、从中序与后序遍历序列构造二叉树\n\n根据一棵树的中序和后序遍历构造二叉树\n\n```c++\nclass solution{\n    private:\n    \tTreeNode* traversal(vector<int>& inorder,vector<int>& postorder){\n            //第一步\n            if(postorder.size() == 0)\n                return NULL;\n            //后序遍历数组的最后一个元素，就是当前的中间节点\n            int rootValue = postorder[postorder.size() - 1];\n            TreeNode* root = new TreeNode(rootValue);\n            \n            if(postorder.size() == 1)\n                return root;\n            \n            for(int delimiterIndex = 0;delimiter < inorder.size();delimiterIndex ++){\n                if(inorder[delimiterIndex] == rootValue)\n                    break;\n            }\n            \n            vector<int> leftInorder(inorder.begin(),inorder.begin()+delimiterIndex);\n            vector<int> rightInorder(inorder.begin()+delimiterIndex+1,inorder.end());\n            \n            postorder.resize(postorder.size() - 1);\n            \n            vector<int>                                                                           leftPostorder(postorder.begin(),postorder.begin()+leftInorder.size());\n            vector<int>\n            rightPostorder(postorder.begin()+leftInorder.size(),postorder.end());\n            \n            root->left = traversal(leftInorder,leftPostorder);\n            root->right = traversal(rightInorder,rightPostorder);\n            \n            return root;\n        }\n    \n    public:\n    \tTreeNode* bulidTree(vector<int>& inorder,vector<int>& postorder){\n            if(inorder == NULL || postorder == NULL)\n                return NULL;\n            return traversal(inorder,postorder);\n        }\n                        \n};\n\n```\n\n\n\n### 十八、最大二叉树\n\n给定一个不含重复元素的整数数组。最大二叉树定义如下：\n\n1、二叉树的根是数组中的最大元素\n\n2、左子树是通过数组中的最大值左边部分构造出的最大二叉树\n\n3、右子树是通过数组中的最大值左边部分构造出的最大二叉树\n\n给定的数组大小在[1,1000]之间\n\n\n\n1、确定递归函数参数和返回值\n\n参数传入的是存放元素的数组，返回该数组构造的二叉树的头节点，返回类型是指向节点的指针\n\n```c++\nTreeNode* constructMaxBinaryTree(vector<int>& nums)\n```\n\n2、确定终止条件\n\n```c++\nTreeNode* node = new TreeNode(0);\nif(nums.size() == 1){\n    node->val = nums[0];\n    return node;\n}\n```\n\n3、确定单层递归逻辑\n\n分三步：\n\n一、找到数组中最大的值与其对应的下标，最大的值构造根节点，下标用来下一步分割数组\n\n```c++\nint maxValue = 0;\nint maxValueIndex = 0;\nfor(int i = 0;i < nums.size();i ++){\n    if(nums[i] > maxValue){\n        maxValue = nums[i];\n        maxValueIndex = i;\n    }\n}\nTreenode* node = new TreeNode(0);\nnode->val = maxValue;\n```\n\n二、最大值所在下标左区间 构造左子树\n\n需要判断maxValueIndex>0,因为至少保证左区间至少有一个数值\n\n```c++\nif(maxValueIndex > 0){\n    vector<int> leftTree(nums.begin(),nums.begin()+maxValueIndex);\n    node->left = constructMaxBinaryTree(leftTree);\n}\n```\n\n三、最大值所在下标右区间 构造右子树\n\nmaxValue<(nums.size()-1),保证右区间至少有一个数值\n\n```c++\nif(maxValueIndex < (nums.size() - 1)){\n    vector<int> rightTree(nums.begin()+maxValueIndex+1,nums.end());\n    node->right = constructMaxBinaryTree(rightTree);\n}\n```\n\n\n\n```c++\nclass solution{\n    public:\n    \tTreeNode* constructMaxBinaryTree(vector<int>& nums){\n            TreeNode* node = new TreeNode(0);//构造中节点\n            //当数组只剩下一个元素，即叶子节点\n            if(nums.size() == 1){\n                node->val = nums[0];\n                return node;\n            }\n            \n            //找到数组中的最大值与其下标\n            int maxValue = 0;\n            int maxValueIndex = 0;\n            for(int i = 0;i < nums.size();i ++){\n                if(nums[i] > maxValue){\n                    maxValue = nums[i];\n                    maxValueIndex = i;\n                }\n            }\n            node->val = maxValue;\n            \n            //确保左右区间至少有一个元素\n            if(maxValueIndex > 0){\n                vector<int> left(nums.begin(),nums.begin()+maxValueIndex);\n                node->left = constructMaxBinaryTree(left);\n            }\n            if(maxValueIndex < nums.size() - 1){\n                vector<int> right(nums.begin()+maxValueIndex+1,nums.end());\n                node->right = constructMaxBinaryTree(right);\n            }   \n            return node;\n        }\n};\n```\n\n以上代码较为冗余，效率不高，每次分割数组后都要新定义vector，但是逻辑描述较为清晰\n\n优化版：\n\n```c++\nclass solution{\n    private:\n    \t//在左闭右开区间[left,rihgt)，构造二叉树\n    \tTreeNode* traversal(vector<int>& nums,int left,int right){\n            if(left >= right)\n                return nullptr;\n            //分割点下标：maxValueIndex\n            int maxValueIndex = 0;\n            for(int i = 0;i < right;i ++){\n                if(nums[i] > nums[maxValueIndex])\n                    maxValueIndex = i;\n            }\n            TreeNode* node = new TreeNode(nums[maxValueIndex]);\n            \n            //左闭右开[left,maxValueIndex)\n            node->left = traversal(nums,left,maxValueIndex);\n            \n            //左闭右开[maxValueIndex+1,right)\n            node->right = traversal(nums,maxValueIndex+1,right);\n            \n            return node;\n        }\n    public:\n    \tTreeNode* constructMaxBinaryTree(vector<int>& nums){\n            //初始左闭右开区间[0,nums.size())\n            return traversal(nums,0,nums.size());\n        }\n}\n```\n\n","slug":"binary-tree","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsop0006y0vm7wukc994","content":"<h3 id=\"一、二叉树定义\"><a href=\"#一、二叉树定义\" class=\"headerlink\" title=\"一、二叉树定义\"></a>一、二叉树定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    TreeNode *left;</span><br><span class=\"line\">    TreeNode *right;</span><br><span class=\"line\">    <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        val = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode()&#123;&#125;</span><br><span class=\"line\">    TreeNode(<span class=\"type\">int</span> val)&#123;<span class=\"built_in\">this</span>.val = val;&#125;</span><br><span class=\"line\">    TreeNode(<span class=\"type\">int</span> val,TreeNode left,TreeNode right)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self,value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、递归\"><a href=\"#二、递归\" class=\"headerlink\" title=\"二、递归\"></a>二、递归</h3><p>1、确定递归函数的参数和返回值</p>\n<p>2、确定终止条件</p>\n<p>3、确定单层递归的逻辑</p>\n<p>递归的实现：每一次递归调用都会把函数的局部变量，参数值，返回地址等压入调用栈中，等递归返回时，从栈顶弹出上一次递归的各项参数。</p>\n<h4 id=\"前序遍历（递归）\"><a href=\"#前序遍历（递归）\" class=\"headerlink\" title=\"前序遍历（递归）\"></a>前序遍历（递归）</h4><p>打印遍历节点的值，除此之外无需返回其他值，函数返回类型为void,参数vec存储节点的数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span></span><br></pre></td></tr></table></figure>\n<p>本轮递归终止的条件是当前节点为空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\n<p>前序遍历按照左中右顺序，先取中节点的值（单层递归）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);<span class=\"comment\">//中</span></span><br><span class=\"line\"><span class=\"built_in\">traversal</span>(cur -&gt; left,vec);<span class=\"comment\">//左</span></span><br><span class=\"line\"><span class=\"built_in\">traversal</span>(cur -&gt; right,vec);<span class=\"comment\">//右</span></span><br></pre></td></tr></table></figure>\n<p>前序遍历总过程：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preordertraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;<span class=\"comment\">//初始化一个vec</span></span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,result);<span class=\"comment\">//从根节点开始遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"中序遍历（递归）\"><a href=\"#中序遍历（递归）\" class=\"headerlink\" title=\"中序遍历（递归）\"></a>中序遍历（递归）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历（递归）\"><a href=\"#后序遍历（递归）\" class=\"headerlink\" title=\"后序遍历（递归）\"></a>后序遍历（递归）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、迭代\"><a href=\"#三、迭代\" class=\"headerlink\" title=\"三、迭代\"></a>三、迭代</h3><h4 id=\"前序遍历（迭代）\"><a href=\"#前序遍历（迭代）\" class=\"headerlink\" title=\"前序遍历（迭代）\"></a>前序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(node -&gt; val);<span class=\"comment\">//栈顶节点值加入vec</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)<span class=\"comment\">//先压入右节点，空节点不执行</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)<span class=\"comment\">//后压入左节点，空节点不执行</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历（迭代）\"><a href=\"#后序遍历（迭代）\" class=\"headerlink\" title=\"后序遍历（迭代）\"></a>后序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Traversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">    \tstack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//遍历顺序改为中右左</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(vec.<span class=\"built_in\">begin</span>(),vec.<span class=\"built_in\">end</span>());<span class=\"comment\">//逆序为左右中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>前序遍历访问节点（遍历节点）和处理节点（将节点放入vec数组中）可以进行同步处理（既处理顺序和访问顺序一致），但是中序遍历无法同步</p>\n<h4 id=\"中序遍历（迭代）\"><a href=\"#中序遍历（迭代）\" class=\"headerlink\" title=\"中序遍历（迭代）\"></a>中序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            \t<span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">            TreeNode* cur = root;<span class=\"comment\">//使用指针来进行节点访问</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur != <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//指针访问节点，一直访问至二叉树最底层</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(cur);<span class=\"comment\">//将访问节点放入栈</span></span><br><span class=\"line\">                    cur = cur -&gt; left;<span class=\"comment\">//左</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    cur = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//从栈顶弹出的数据即为需要处理的数据（放进vec数组中的数据）</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);<span class=\"comment\">//中</span></span><br><span class=\"line\">                    cur = cur -&gt; right;<span class=\"comment\">//右</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>中序遍历先是访问根节点，再逐步向左向下访问节点直至到达最底层，进而再开始处理节点（将节点数值放入vec数组），导致访问顺序和处理数据顺序是不一样的。</p>\n<h3 id=\"四、二叉树的统一迭代法\"><a href=\"#四、二叉树的统一迭代法\" class=\"headerlink\" title=\"四、二叉树的统一迭代法\"></a>四、二叉树的统一迭代法</h3><h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//将该节点弹出，避免重复操作，下面再将右中左节点加入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//非空右节点入栈</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node);<span class=\"comment\">//中节点入栈</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);<span class=\"comment\">//此时中节点未进行处理，再其后加入NULL标记（表示待处理）</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; left);<span class=\"comment\">//非空左节点入栈</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//遇到空节点（即NULL标记）时，将下一个节点加入vec数组</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();<span class=\"comment\">//将空节点弹出</span></span><br><span class=\"line\">                    node = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//重新取出栈中元素</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Traversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">        stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>到此，我们就将前中后序三种遍历用统一的代码风格写出来，关键在于加入NULL标记来表示需要处理的元素。</p>\n<h3 id=\"五、二叉树的层序遍历\"><a href=\"#五、二叉树的层序遍历\" class=\"headerlink\" title=\"五、二叉树的层序遍历\"></a>五、二叉树的层序遍历</h3><p>层序遍历一个二叉树，就是一层一层从左往右进行遍历二叉树，需要借助数据结构遍历来实现，队列先进先出，符合一层一层遍历的逻辑，而使用栈先进后出适合深度优先遍历即递归的逻辑。</p>\n<p>层序遍历是图论里的广度优先遍历。</p>\n<h4 id=\"1、自上而下的层序遍历\"><a href=\"#1、自上而下的层序遍历\" class=\"headerlink\" title=\"1、自上而下的层序遍历\"></a>1、自上而下的层序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;<span class=\"comment\">//每层一个数组，每行合起来则是二维数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"comment\">//使用固定大小的size，而不用que.size()，因为que.size()会不断变化</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#递归法</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">order</span><span class=\"params\">(TreeNode* cur,vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; result,<span class=\"type\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.<span class=\"built_in\">size</span>() == depth)</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">            result[depth].<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(cur -&gt; left,result,depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(cur -&gt; right,result,depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelorder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(root,result,depth);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、自底向上的层序遍历（将数组逆序然后输出）\"><a href=\"#2、自底向上的层序遍历（将数组逆序然后输出）\" class=\"headerlink\" title=\"2、自底向上的层序遍历（将数组逆序然后输出）\"></a>2、自底向上的层序遍历（将数组逆序然后输出）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">order</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        vec.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        vec.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">reserve</span>(result.<span class=\"built_in\">begin</span>(),result.<span class=\"built_in\">end</span>());<span class=\"comment\">//反转数组</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、二叉树的右视图（从右看二叉树所能得到的节点值）\"><a href=\"#3、二叉树的右视图（从右看二叉树所能得到的节点值）\" class=\"headerlink\" title=\"3、二叉树的右视图（从右看二叉树所能得到的节点值）\"></a>3、二叉树的右视图（从右看二叉树所能得到的节点值）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightSizeView</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i ==<span class=\"built_in\">z</span> (size - <span class=\"number\">1</span>))</span><br><span class=\"line\">                        result.<span class=\"built_in\">push_back</span>(node -&gt; val);<span class=\"comment\">//将每层最后一个元素放入result数组</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt;left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt;right);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、二叉树的层平均值\"><a href=\"#4、二叉树的层平均值\" class=\"headerlink\" title=\"4、二叉树的层平均值\"></a>4、二叉树的层平均值</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">averageOfLevels</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">double</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"type\">double</span> sum += node -&gt; val;<span class=\"comment\">//统计每一层的和</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(sum / size);<span class=\"comment\">//将每一层均值放入result数组中</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、N叉树的层序遍历\"><a href=\"#5、N叉树的层序遍历\" class=\"headerlink\" title=\"5、N叉树的层序遍历\"></a>5、N叉树的层序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;i &lt; node -&gt; children.<span class=\"built_in\">size</span>();j ++)&#123;<span class=\"comment\">//将节点孩子加入队列</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(node -&gt; children[j])</span><br><span class=\"line\">                            que.<span class=\"built_in\">push</span>(node -&gt; children[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、在每个二叉树行中找最大值\"><a href=\"#6、在每个二叉树行中找最大值\" class=\"headerlink\" title=\"6、在每个二叉树行中找最大值\"></a>6、在每个二叉树行中找最大值</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">largestValues</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> maxValue = INT_MIN;<span class=\"comment\">//现将最大值设为INT_MIN(即整数最小)</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    <span class=\"comment\">//通过每一层不断比较，最终得到maxValue（即最大值）</span></span><br><span class=\"line\">                    maxValue = ((node -&gt; val) &gt; maxValue)?node -&gt; val:maxValue;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(maxValue);<span class=\"comment\">//将每一层的最大值加入数组result</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"7、填充每一个节点的下一个右侧节点\"><a href=\"#7、填充每一个节点的下一个右侧节点\" class=\"headerlink\" title=\"7、填充每一个节点的下一个右侧节点\"></a>7、填充每一个节点的下一个右侧节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* left;</span><br><span class=\"line\">    Node* right;</span><br><span class=\"line\">    Node* next;<span class=\"comment\">//指向节点的右侧节点</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">connect</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                Node* preNode;<span class=\"comment\">//用来记录首节点和前一个节点</span></span><br><span class=\"line\">                Node* node;<span class=\"comment\">//遍历节点</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        preNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        node = preNode;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        preNode -&gt; next = node;</span><br><span class=\"line\">                        preNode  = preNode -&gt; next;<span class=\"comment\">//= node同理</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node -&gt; next = <span class=\"literal\">NULL</span>;<span class=\"comment\">//本层最后一个节点指向NULL</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8、二叉树的最大深度\"><a href=\"#8、二叉树的最大深度\" class=\"headerlink\" title=\"8、二叉树的最大深度\"></a>8、二叉树的最大深度</h4><p>给定一个二叉树，找出其最大深度</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数（叶子节点没有子节点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">        <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            depth ++;<span class=\"comment\">//记录深度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9、二叉树的最小深度\"><a href=\"#9、二叉树的最小深度\" class=\"headerlink\" title=\"9、二叉树的最小深度\"></a>9、二叉树的最小深度</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                    <span class=\"comment\">//当节点左右孩子都为空（即叶子节点），到达最小深度</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!node -&gt; left &amp;&amp; !node -&gt; right)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>总结，二叉树的层序遍历，就是图论中的广度优先搜索在二叉树中的应用，需要借助队列来实现。</p>\n<h3 id=\"六、翻转二叉树\"><a href=\"#六、翻转二叉树\" class=\"headerlink\" title=\"六、翻转二叉树\"></a>六、翻转二叉树</h3><h4 id=\"1、深度优先遍历\"><a href=\"#1、深度优先遍历\" class=\"headerlink\" title=\"1、深度优先遍历\"></a>1、深度优先遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归（前序遍历）</span></span><br><span class=\"line\"><span class=\"comment\">//先进行交换左右孩子节点，然后反转左子树，然后反转右子树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(root -&gt; left,root -&gt; right);<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"built_in\">invertTree</span>(root -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"built_in\">invertTree</span>(root -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历（迭代）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();<span class=\"comment\">//中</span></span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历（统一迭代法）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(left);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt;right);<span class=\"comment\">//节点处理逻辑</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、广度优先遍历\"><a href=\"#2、广度优先遍历\" class=\"headerlink\" title=\"2、广度优先遍历\"></a>2、广度优先遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;<span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt; right);<span class=\"comment\">//左右子树交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>针对二叉树的问题，解题之前要想清楚究竟选择哪种遍历方式</p>\n<h3 id=\"七、对称二叉树\"><a href=\"#七、对称二叉树\" class=\"headerlink\" title=\"七、对称二叉树\"></a>七、对称二叉树</h3><p>给定一个二叉树，检查二叉树是否镜像对称</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自己的第一遍思考</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Tree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; size;j ++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((vec[j] != vec[size - <span class=\"number\">1</span> -j] || vec[j] == <span class=\"literal\">NULL</span> || vec[size - <span class=\"number\">1</span>-                         <span class=\"number\">1</span> - j] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                       flag =<span class=\"number\">1</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> flag;       </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>针对自己第一次实现的想法进行改进：首先判断二叉树是否对称，不需要加入根节点（遍历则需要加入），因为是否对称只和左右子树有关。同时鉴于对队列数据结构的不熟练，调用了vector数组来储存节点数值后在数组中进行比较（考虑麻烦了），直接对称的将左右子树的节点加入到队列中，两个两个一组弹出比较。还加了flag标记来输出bool数，直接true or false即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root -&gt; left);<span class=\"comment\">//加入左子树头结点</span></span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root -&gt; right);<span class=\"comment\">//加入右子树头结点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* leftNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                TreeNode* rightNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!leftNode &amp;&amp; !leftNode)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!leftNode || !rightNode || (leftNode -&gt; val != rightNode -&gt; val))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(leftNode -&gt; left);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(rightNode -&gt; right);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(leftNode -&gt; right);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(rightNode -&gt; left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>递归</p>\n<p>1、确定递归参数和返回值</p>\n<p>比较根节点的两个子树是否是互相翻转的，进而判断这个二叉树是否对称，比较的是左右两个子树，参数就是根节点的左子树头结点和右子树头结点。</p>\n<p>返回值自然是bool类型。</p>\n<p>2、确定终止条件</p>\n<p>要比较两个节点的数值相不相等，首先要把两节点为空的情况搞清楚。</p>\n<ul>\n<li>左节点为空，右节点不为空</li>\n<li>左节点不为空，右节点为空</li>\n<li>左右节点都为空</li>\n<li>左右节点都不为空但是值不相等   </li>\n</ul>\n<p>3、确定单层递归的逻辑</p>\n<p>单层递归的逻辑就是两个节点都不为空且节点值相等的情况。</p>\n<ul>\n<li>比较外侧节点值是否相等：传入左节点的左孩子，右节点的右孩子</li>\n<li>比较内侧节点值是否相等：传入左节点的右孩子，右节点的左孩子</li>\n<li>如果左右都对称返回true，有一方不对称就返回false</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(TreeNode* left,TreeNode* right)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//首先排除空节点的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left &amp;&amp; right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(left &amp;&amp; !right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!left &amp;&amp; !right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">//排除空节点后，两节点值不相等的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((left -&gt; val) != (right -&gt; val))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左子树：左，右子树：右</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> outside = <span class=\"built_in\">compare</span>(left -&gt; left,right -&gt; right);</span><br><span class=\"line\">            <span class=\"comment\">//左子树：右，右子树：左</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> inside = <span class=\"built_in\">compare</span>(left -&gt; right,right -&gt; left);</span><br><span class=\"line\">            <span class=\"comment\">//逻辑处理</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> isSame = outside &amp;&amp; inside;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isSame;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">compare</span>(root -&gt; left,root -&gt; right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"八、二叉树的最大深度\"><a href=\"#八、二叉树的最大深度\" class=\"headerlink\" title=\"八、二叉树的最大深度\"></a>八、二叉树的最大深度</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"type\">int</span> result;<span class=\"comment\">//用来存储最大深度</span></span><br><span class=\"line\">        <span class=\"comment\">//函数返回值为void，非int，与计算节点数不同，深度不具有累加性</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode* node,<span class=\"type\">int</span> depth)</span></span>&#123;<span class=\"comment\">//参数为当前节点，以及当前的深度</span></span><br><span class=\"line\">            result = depth &gt; result ? depth : result;<span class=\"comment\">//通过不断比较深度来更新深度的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!node-&gt;left &amp;&amp; !node-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                depth ++;<span class=\"comment\">//深度加一，因为向下了一层</span></span><br><span class=\"line\">                <span class=\"built_in\">getDepth</span>(node-&gt;left,depth);</span><br><span class=\"line\">                depth --;<span class=\"comment\">//回溯，因为右子树还未进行</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;<span class=\"comment\">//同理，右</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">getDepth</span>(node-&gt;right,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            <span class=\"built_in\">getDepth</span>(root,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n<p>迭代法中层序遍历最为合适，因为遍历的层数即是二叉树的深度</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                     \tque.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>n叉树的最大深度</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; node -&gt; children.<span class=\"built_in\">size</span>();j ++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(node -&gt; children[j])</span><br><span class=\"line\">                            que.<span class=\"built_in\">push</span>(node -&gt; children[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九、二叉树的最小深度\"><a href=\"#九、二叉树的最小深度\" class=\"headerlink\" title=\"九、二叉树的最小深度\"></a>九、二叉树的最小深度</h3><p>最小深度是指根节点到最近叶子节点的最短路径上的节点个数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        \tqueue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((!node -&gt; left) &amp;&amp; (!node -&gt; right))<span class=\"comment\">//左右节点都为空时到达最小深度</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                     \tque.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十、完全二叉树的节点个数\"><a href=\"#十、完全二叉树的节点个数\" class=\"headerlink\" title=\"十、完全二叉树的节点个数\"></a>十、完全二叉树的节点个数</h3><p>将完全二叉树当作普通二叉树看待，依旧使用普通二叉树的遍历方法来计算节点个数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getNodeNums</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> leftNodeNums = <span class=\"built_in\">getNodeNums</span>(root -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"type\">int</span> rightNodeNums = <span class=\"built_in\">getNodeNums</span>(root -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            <span class=\"type\">int</span> nodeNums = leftNodeNums + rightNodeNums + <span class=\"number\">1</span>;<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> nodeNums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">getNodeNums</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;<span class=\"comment\">//记录节点个数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    result ++;<span class=\"comment\">//每遍历一个节点加一</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而，完全二叉树本省具有一些特性使得能够使用一些其它的方法来计算个数</p>\n<p>在完全二叉树中，除了最底层的节点可能没有填满之外，其余每层节点数都达到最大值，并且最下面一层节点都集中在该层最左侧的若干区域，若最底层为第h层，则该层节点个数范围为1~2^(h-1)</p>\n<p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。</p>\n<p>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。</p>\n<p>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</p>\n<p>可以看出如果整个树不是满二叉树，就递归其左右孩子，直到遇到满二叉树为止，用公式计算这个子树（满二叉树）的节点数量。</p>\n<p>这里关键在于如何去判断一个左子树或者右子树是不是满二叉树呢？</p>\n<p>在完全二叉树中，如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            TreeNode* left = root -&gt; left;</span><br><span class=\"line\">            TreeNode* right = root -&gt; right;</span><br><span class=\"line\">            <span class=\"type\">int</span> leftDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> rightDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left)&#123;</span><br><span class=\"line\">                left = left -&gt; left;</span><br><span class=\"line\">                leftDepth ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(right)&#123;</span><br><span class=\"line\">                right = right -&gt; right;</span><br><span class=\"line\">                rightDepth ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftDepth == rightDepth)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>^(leftDepth - <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">countNodes</span>(root -&gt; left) + <span class=\"built_in\">countNodes</span>(root -&gt; right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十一、平衡二叉树\"><a href=\"#十一、平衡二叉树\" class=\"headerlink\" title=\"十一、平衡二叉树\"></a>十一、平衡二叉树</h3><p>因为求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）</p>\n<p>一颗高度平衡的二叉树定义为：一个二叉树每个节点的左右两棵子树的高度差绝对值不超过1。</p>\n<p>根据定义可知，如果以当前节点为传入节点的二叉树已经不是二叉树了，则该二叉树不是平衡二叉树</p>\n<p>return -1来标记不符合平衡二叉树的规则。</p>\n<p>递归思路：</p>\n<p>1、明确递归函数的参数和返回值</p>\n<p>参数：当前传入节点。 返回值：以当前传入节点为根节点的树的高度。</p>\n<p>那么如何标记左右子树是否差值大于1呢？</p>\n<p>如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。</p>\n<p>所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</p>\n<p>2、明确终止条件</p>\n<p>递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0</p>\n<p>3、明确单层递归的逻辑</p>\n<p>如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。</p>\n<p>分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">(TreeNode* node)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//如果该节点是空指针，则高度为0</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断左右子树是否是平衡二叉树，有一个不是则非平衡二叉树</span></span><br><span class=\"line\">            <span class=\"type\">int</span> leftHeight = <span class=\"built_in\">getHeight</span>(node-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftHeight == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> rightHeight = <span class=\"built_in\">getHeight</span>(node-&gt;right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(LeftHeight == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)&#123;<span class=\"comment\">//左右子树高度差不超过1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//取两树高度最大者在加上根节点的高度为整颗平衡二叉树的高度</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(leftHeight,rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isBalance</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">getHeight</span>(root) == <span class=\"number\">-1</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"comment\">//node节点的最大深度就是node的高度</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode* node)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;<span class=\"comment\">//记录深度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;<span class=\"comment\">//更新最大深度值</span></span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* cur = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    depth ++;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cur-&gt;right)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(cur-&gt;right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cur-&gt;left)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    depth --;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result = result &gt; depth ? result : depth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isBalance</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(<span class=\"built_in\">getDepth</span>(node-&gt;left),<span class=\"built_in\">getDepth</span>(node-&gt;right))&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>求深度适合前序遍历，求高度适合后序遍历</p>\n<h3 id=\"十二、二叉树的所有路径\"><a href=\"#十二、二叉树的所有路径\" class=\"headerlink\" title=\"十二、二叉树的所有路径\"></a>十二、二叉树的所有路径</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* node,vector&lt;<span class=\"type\">int</span>&gt; path,vector&lt;string&gt; result)</span></span>&#123;</span><br><span class=\"line\">            path.<span class=\"built_in\">push_back</span>(node-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; node-&gt;right == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                string sPath;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; path.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                    sPath += <span class=\"built_in\">to_string</span>(path[i]);</span><br><span class=\"line\">                    sPath += <span class=\"string\">&quot;-&gt;&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sPath += <span class=\"built_in\">to_string</span>(path[path.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(sPath);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;left,path,result);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;right,path,result);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;string&gt; <span class=\"title\">binaryTreePaths</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; path;</span><br><span class=\"line\">            vector&lt;string&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,path,result);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十三、左叶子之和\"><a href=\"#十三、左叶子之和\" class=\"headerlink\" title=\"十三、左叶子之和\"></a>十三、左叶子之和</h3><p>1、确定递归函数的参数和返回值</p>\n<p>要判断左节点值之和，首先要传入根节点，返回值则为数值之和</p>\n<p>2、确定终止条件</p>\n<p>如果遍历到空节点，左叶子值为0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>注意，只有当前节点遍历的是父节点，才能判断其子节点是不是左叶子。所以如果当前遍历的节点是叶子节点，那其左叶子也必定为0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归的逻辑</p>\n<p>遇到左叶子节点时，记录数值，然后通过递归求取左子树左叶子之和和右子树左叶子之和。相当于整个树的左叶子之和</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> LeftValue = <span class=\"built_in\">sumOfLeftLeaves</span>(root-&gt;left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"comment\">//当左子树只是一个左叶子节点的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right)</span><br><span class=\"line\">                leftValue = root-&gt;left-&gt;val;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> rightValue = <span class=\"built_in\">sumOfLeftLeaves</span>(root-&gt;right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            <span class=\"type\">int</span> sum = leftValue + rightValue;<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left &amp;&amp; !node-&gt;left-&gt;left &amp;&amp; !node-&gt;left-&gt;right)</span><br><span class=\"line\">                    result += node-&gt;left-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                   st.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                   st.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十四、找树左下角的值\"><a href=\"#十四、找树左下角的值\" class=\"headerlink\" title=\"十四、找树左下角的值\"></a>十四、找树左下角的值</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findBottomLeftValue</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        result = node-&gt;val;<span class=\"comment\">//每层取第一个节点的值</span></span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;<span class=\"comment\">//遍历完所有层后result里的值则为树左下角的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">//定义全局变量</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> maxDepth = INT_MIN;<span class=\"comment\">//记录最大深度</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> result;<span class=\"comment\">//记录树左下角的值</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* node,<span class=\"type\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!node-&gt;left &amp;&amp; !node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(depth &gt; maxDepth)&#123;</span><br><span class=\"line\">                    maxDepth = depth;</span><br><span class=\"line\">                    result = node-&gt;val;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//traversal(node-&gt;left,depth + 1);</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;left,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//traversal(node-&gt;right,depth + 1);</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;right,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findBottomLeftValue</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>1、递归求深度的写法，在<strong>平衡树二叉树</strong>中详细分析了深度应该怎么求，高度应该怎么求</p>\n<p>2、递归中隐藏了回溯，在<strong>二叉树的所有路径</strong> 中讲解了究竟哪里使用了回溯，哪里隐藏了回溯</p>\n<p>3、层次遍历，在<strong>层序遍历</strong>深度讲解了二叉树层序遍历。</p>\n<h3 id=\"十五、路径总和I\"><a href=\"#十五、路径总和I\" class=\"headerlink\" title=\"十五、路径总和I\"></a>十五、路径总和I</h3><p>给定一个二叉树和目标和，判断该树是否存在根节点到叶子节点的路径，这条路径上的所有节点值相加等于目标和</p>\n<p>递归：</p>\n<p>1、确定函数返回值和参数</p>\n<p>需要一个指针遍历二叉树，同时需要int参数来记录目标和，使用递减的方式，当某条路径上的result递减至0且到叶子节点时，说明该二叉树存在所有节点值相加等于目标和的路径</p>\n<p>2、确定终止条件</p>\n<p> 当和递减至0且遍历到叶子节点时，存在</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(result == <span class=\"number\">0</span> &amp;&amp; !cur-&gt;left &amp;&amp; !cur-&gt;right) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>当遇到叶子节点未满足条件时，不存在</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归的逻辑</p>\n<p>先向左继续判断，不满足再向右继续判断，都不满足则不存在该路径</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cur-&gt;left)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(cur-&gt;right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;right,result - cur-&gt;right-&gt;val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,<span class=\"type\">int</span> result)</span></span>&#123;<span class=\"comment\">//记录当前节点和目标和</span></span><br><span class=\"line\">            <span class=\"comment\">//当和递减至0且遍历到叶子节点时，存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result == <span class=\"number\">0</span> &amp;&amp; !cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">//当遇到叶子节点未满足条件时，不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val))<span class=\"comment\">//包含回溯的逻辑</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;right)&#123;<span class=\"comment\">//右</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;right,result - cur-&gt;right-&gt;val))<span class=\"comment\">//包含回溯的逻辑</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">/*将回溯过程体现出来代码可改为：</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;left)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult -= cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \tif(traversal(cur-&gt;left,result))</span></span><br><span class=\"line\"><span class=\"comment\">            \t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult += cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;right)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult -= cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \tif(traversal(cur-&gt;right,result))</span></span><br><span class=\"line\"><span class=\"comment\">            \t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult += cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode* root,<span class=\"type\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(root,sum - root-&gt;val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>递归过程隐藏回溯，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val);</span><br></pre></td></tr></table></figure>\n<p>把result - cur-&gt;left-&gt;val直接作为参数传进函数，函数结束，result的数值并没有改变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode* root,<span class=\"type\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//此时栈里放的是pair&lt;节点指针，路径数值&gt;\t</span></span><br><span class=\"line\">            stack&lt;pair&lt;TreeNode*,<span class=\"type\">int</span>&gt;&gt; st;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(root,root-&gt;val));</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                pair&lt;TreeNode*,<span class=\"type\">int</span>&gt; node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"comment\">//如果该节点是叶子节点，同时该路径数值等于sum，返回true</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!node.first-&gt;left &amp;&amp; !node.first-&gt;right &amp;&amp; sum == node.second)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//右节点，压入节点的同时，记录路径数值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.first-&gt;right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(node.first-&gt;right,node.second +                           node.first-&gt;right-&gt;val));</span><br><span class=\"line\">                <span class=\"comment\">//左节点，压入节点的同时，记录路径数值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.first-&gt;left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(node.first-&gt;left,node.second +                           node.first-&gt;left-&gt;val));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十六、路径总和II\"><a href=\"#十六、路径总和II\" class=\"headerlink\" title=\"十六、路径总和II\"></a>十六、路径总和II</h3><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于目标和的路径</p>\n<p>递归：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;<span class=\"comment\">//记录所有和为sum的路径</span></span><br><span class=\"line\">    \tvector&lt;<span class=\"type\">int</span>&gt; path;<span class=\"comment\">//记录单条遍历的路径</span></span><br><span class=\"line\">        <span class=\"comment\">//递归函数不需要返回值，因为要遍历整棵树</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,<span class=\"type\">int</span> count)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遇到叶子节点且找到和为sum的路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(path);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                path.<span class=\"built_in\">push_back</span>(cur-&gt;left-&gt;val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur-&gt;left,count - cur-&gt;left-&gt;val);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;right)&#123;<span class=\"comment\">//右</span></span><br><span class=\"line\">                path.<span class=\"built_in\">push_back</span>(cur-&gt;right-&gt;val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur-&gt;right,count - cur-&gt;right-&gt;val);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*体现回溯的过程</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;left)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.push_back(cur-&gt;left-&gt;val);</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount -= cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \ttraversal(cur-&gt;left,count);//递归</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount += cur-&gt;left-&gt;val;//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.pop_back();//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;right)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.push_back(cur-&gt;left-&gt;val);</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount -= cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \ttraversal(cur-&gt;right,count);//递归</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount += cur-&gt;right-&gt;val;//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.pop_back();//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">findPathSum</span>(TreeNode* root,<span class=\"type\">int</span> sum)&#123;</span><br><span class=\"line\">            result.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            path.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            path.<span class=\"built_in\">push_back</span>(root-&gt;val);</span><br><span class=\"line\">          \t<span class=\"built_in\">traversal</span>(root,sum - root-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十七、从中序与后序遍历序列构造二叉树\"><a href=\"#十七、从中序与后序遍历序列构造二叉树\" class=\"headerlink\" title=\"十七、从中序与后序遍历序列构造二叉树\"></a>十七、从中序与后序遍历序列构造二叉树</h3><p>根据一棵树的中序和后序遍历构造二叉树</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">traversal</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; inorder,vector&lt;<span class=\"type\">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第一步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(postorder.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"comment\">//后序遍历数组的最后一个元素，就是当前的中间节点</span></span><br><span class=\"line\">            <span class=\"type\">int</span> rootValue = postorder[postorder.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>];</span><br><span class=\"line\">            TreeNode* root = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(rootValue);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(postorder.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> delimiterIndex = <span class=\"number\">0</span>;delimiter &lt; inorder.<span class=\"built_in\">size</span>();delimiterIndex ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(inorder[delimiterIndex] == rootValue)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftInorder</span><span class=\"params\">(inorder.begin(),inorder.begin()+delimiterIndex)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightInorder</span><span class=\"params\">(inorder.begin()+delimiterIndex+<span class=\"number\">1</span>,inorder.end())</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            postorder.<span class=\"built_in\">resize</span>(postorder.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt;                                                                           <span class=\"title\">leftPostorder</span><span class=\"params\">(postorder.begin(),postorder.begin()+leftInorder.size())</span></span>;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">rightPostorder</span><span class=\"params\">(postorder.begin()+leftInorder.size(),postorder.end())</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">traversal</span>(leftInorder,leftPostorder);</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">traversal</span>(rightInorder,rightPostorder);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">bulidTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; inorder,vector&lt;<span class=\"type\">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inorder == <span class=\"literal\">NULL</span> || postorder == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(inorder,postorder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"十八、最大二叉树\"><a href=\"#十八、最大二叉树\" class=\"headerlink\" title=\"十八、最大二叉树\"></a>十八、最大二叉树</h3><p>给定一个不含重复元素的整数数组。最大二叉树定义如下：</p>\n<p>1、二叉树的根是数组中的最大元素</p>\n<p>2、左子树是通过数组中的最大值左边部分构造出的最大二叉树</p>\n<p>3、右子树是通过数组中的最大值左边部分构造出的最大二叉树</p>\n<p>给定的数组大小在[1,1000]之间</p>\n<p>1、确定递归函数参数和返回值</p>\n<p>参数传入的是存放元素的数组，返回该数组构造的二叉树的头节点，返回类型是指向节点的指针</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span></span><br></pre></td></tr></table></figure>\n<p>2、确定终止条件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    node-&gt;val = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归逻辑</p>\n<p>分三步：</p>\n<p>一、找到数组中最大的值与其对应的下标，最大的值构造根节点，下标用来下一步分割数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i] &gt; maxValue)&#123;</span><br><span class=\"line\">        maxValue = nums[i];</span><br><span class=\"line\">        maxValueIndex = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Treenode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">node-&gt;val = maxValue;</span><br></pre></td></tr></table></figure>\n<p>二、最大值所在下标左区间 构造左子树</p>\n<p>需要判断maxValueIndex&gt;0,因为至少保证左区间至少有一个数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(maxValueIndex &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftTree</span><span class=\"params\">(nums.begin(),nums.begin()+maxValueIndex)</span></span>;</span><br><span class=\"line\">    node-&gt;left = <span class=\"built_in\">constructMaxBinaryTree</span>(leftTree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、最大值所在下标右区间 构造右子树</p>\n<p>maxValue&lt;(nums.size()-1),保证右区间至少有一个数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(maxValueIndex &lt; (nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightTree</span><span class=\"params\">(nums.begin()+maxValueIndex+<span class=\"number\">1</span>,nums.end())</span></span>;</span><br><span class=\"line\">    node-&gt;right = <span class=\"built_in\">constructMaxBinaryTree</span>(rightTree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);<span class=\"comment\">//构造中节点</span></span><br><span class=\"line\">            <span class=\"comment\">//当数组只剩下一个元素，即叶子节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                node-&gt;val = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//找到数组中的最大值与其下标</span></span><br><span class=\"line\">            <span class=\"type\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] &gt; maxValue)&#123;</span><br><span class=\"line\">                    maxValue = nums[i];</span><br><span class=\"line\">                    maxValueIndex = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node-&gt;val = maxValue;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//确保左右区间至少有一个元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxValueIndex &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(nums.begin(),nums.begin()+maxValueIndex)</span></span>;</span><br><span class=\"line\">                node-&gt;left = <span class=\"built_in\">constructMaxBinaryTree</span>(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxValueIndex &lt; nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">right</span><span class=\"params\">(nums.begin()+maxValueIndex+<span class=\"number\">1</span>,nums.end())</span></span>;</span><br><span class=\"line\">                node-&gt;right = <span class=\"built_in\">constructMaxBinaryTree</span>(right);</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上代码较为冗余，效率不高，每次分割数组后都要新定义vector，但是逻辑描述较为清晰</p>\n<p>优化版：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">//在左闭右开区间[left,rihgt)，构造二叉树</span></span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">traversal</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">//分割点下标：maxValueIndex</span></span><br><span class=\"line\">            <span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; right;i ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] &gt; nums[maxValueIndex])</span><br><span class=\"line\">                    maxValueIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(nums[maxValueIndex]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左闭右开[left,maxValueIndex)</span></span><br><span class=\"line\">            node-&gt;left = <span class=\"built_in\">traversal</span>(nums,left,maxValueIndex);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左闭右开[maxValueIndex+1,right)</span></span><br><span class=\"line\">            node-&gt;right = <span class=\"built_in\">traversal</span>(nums,maxValueIndex+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始左闭右开区间[0,nums.size())</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(nums,<span class=\"number\">0</span>,nums.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"一、二叉树定义\"><a href=\"#一、二叉树定义\" class=\"headerlink\" title=\"一、二叉树定义\"></a>一、二叉树定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    TreeNode *left;</span><br><span class=\"line\">    TreeNode *right;</span><br><span class=\"line\">    <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        val = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode()&#123;&#125;</span><br><span class=\"line\">    TreeNode(<span class=\"type\">int</span> val)&#123;<span class=\"built_in\">this</span>.val = val;&#125;</span><br><span class=\"line\">    TreeNode(<span class=\"type\">int</span> val,TreeNode left,TreeNode right)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_init_</span>(<span class=\"params\">self,value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、递归\"><a href=\"#二、递归\" class=\"headerlink\" title=\"二、递归\"></a>二、递归</h3><p>1、确定递归函数的参数和返回值</p>\n<p>2、确定终止条件</p>\n<p>3、确定单层递归的逻辑</p>\n<p>递归的实现：每一次递归调用都会把函数的局部变量，参数值，返回地址等压入调用栈中，等递归返回时，从栈顶弹出上一次递归的各项参数。</p>\n<h4 id=\"前序遍历（递归）\"><a href=\"#前序遍历（递归）\" class=\"headerlink\" title=\"前序遍历（递归）\"></a>前序遍历（递归）</h4><p>打印遍历节点的值，除此之外无需返回其他值，函数返回类型为void,参数vec存储节点的数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span></span><br></pre></td></tr></table></figure>\n<p>本轮递归终止的条件是当前节点为空</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\n<p>前序遍历按照左中右顺序，先取中节点的值（单层递归）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);<span class=\"comment\">//中</span></span><br><span class=\"line\"><span class=\"built_in\">traversal</span>(cur -&gt; left,vec);<span class=\"comment\">//左</span></span><br><span class=\"line\"><span class=\"built_in\">traversal</span>(cur -&gt; right,vec);<span class=\"comment\">//右</span></span><br></pre></td></tr></table></figure>\n<p>前序遍历总过程：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preordertraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;<span class=\"comment\">//初始化一个vec</span></span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,result);<span class=\"comment\">//从根节点开始遍历</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"中序遍历（递归）\"><a href=\"#中序遍历（递归）\" class=\"headerlink\" title=\"中序遍历（递归）\"></a>中序遍历（递归）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历（递归）\"><a href=\"#后序遍历（递归）\" class=\"headerlink\" title=\"后序遍历（递归）\"></a>后序遍历（递归）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,vector&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; left,vec);</span><br><span class=\"line\">    <span class=\"built_in\">traversal</span>(cur -&gt; right,vec);</span><br><span class=\"line\">    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、迭代\"><a href=\"#三、迭代\" class=\"headerlink\" title=\"三、迭代\"></a>三、迭代</h3><h4 id=\"前序遍历（迭代）\"><a href=\"#前序遍历（迭代）\" class=\"headerlink\" title=\"前序遍历（迭代）\"></a>前序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(node -&gt; val);<span class=\"comment\">//栈顶节点值加入vec</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)<span class=\"comment\">//先压入右节点，空节点不执行</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)<span class=\"comment\">//后压入左节点，空节点不执行</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历（迭代）\"><a href=\"#后序遍历（迭代）\" class=\"headerlink\" title=\"后序遍历（迭代）\"></a>后序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Traversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">    \tstack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//遍历顺序改为中右左</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(vec.<span class=\"built_in\">begin</span>(),vec.<span class=\"built_in\">end</span>());<span class=\"comment\">//逆序为左右中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>前序遍历访问节点（遍历节点）和处理节点（将节点放入vec数组中）可以进行同步处理（既处理顺序和访问顺序一致），但是中序遍历无法同步</p>\n<h4 id=\"中序遍历（迭代）\"><a href=\"#中序遍历（迭代）\" class=\"headerlink\" title=\"中序遍历（迭代）\"></a>中序遍历（迭代）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            \t<span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">            TreeNode* cur = root;<span class=\"comment\">//使用指针来进行节点访问</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cur != <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//指针访问节点，一直访问至二叉树最底层</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(cur);<span class=\"comment\">//将访问节点放入栈</span></span><br><span class=\"line\">                    cur = cur -&gt; left;<span class=\"comment\">//左</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    cur = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//从栈顶弹出的数据即为需要处理的数据（放进vec数组中的数据）</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(cur -&gt; val);<span class=\"comment\">//中</span></span><br><span class=\"line\">                    cur = cur -&gt; right;<span class=\"comment\">//右</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>中序遍历先是访问根节点，再逐步向左向下访问节点直至到达最底层，进而再开始处理节点（将节点数值放入vec数组），导致访问顺序和处理数据顺序是不一样的。</p>\n<h3 id=\"四、二叉树的统一迭代法\"><a href=\"#四、二叉树的统一迭代法\" class=\"headerlink\" title=\"四、二叉树的统一迭代法\"></a>四、二叉树的统一迭代法</h3><h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//将该节点弹出，避免重复操作，下面再将右中左节点加入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//非空右节点入栈</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node);<span class=\"comment\">//中节点入栈</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);<span class=\"comment\">//此时中节点未进行处理，再其后加入NULL标记（表示待处理）</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; left);<span class=\"comment\">//非空左节点入栈</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//遇到空节点（即NULL标记）时，将下一个节点加入vec数组</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();<span class=\"comment\">//将空节点弹出</span></span><br><span class=\"line\">                    node = s.<span class=\"built_in\">top</span>();<span class=\"comment\">//重新取出栈中元素</span></span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Traversal</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">        stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            TreeNode* node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                node = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>到此，我们就将前中后序三种遍历用统一的代码风格写出来，关键在于加入NULL标记来表示需要处理的元素。</p>\n<h3 id=\"五、二叉树的层序遍历\"><a href=\"#五、二叉树的层序遍历\" class=\"headerlink\" title=\"五、二叉树的层序遍历\"></a>五、二叉树的层序遍历</h3><p>层序遍历一个二叉树，就是一层一层从左往右进行遍历二叉树，需要借助数据结构遍历来实现，队列先进先出，符合一层一层遍历的逻辑，而使用栈先进后出适合深度优先遍历即递归的逻辑。</p>\n<p>层序遍历是图论里的广度优先遍历。</p>\n<h4 id=\"1、自上而下的层序遍历\"><a href=\"#1、自上而下的层序遍历\" class=\"headerlink\" title=\"1、自上而下的层序遍历\"></a>1、自上而下的层序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;<span class=\"comment\">//每层一个数组，每行合起来则是二维数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"comment\">//使用固定大小的size，而不用que.size()，因为que.size()会不断变化</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#递归法</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">order</span><span class=\"params\">(TreeNode* cur,vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; result,<span class=\"type\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result.<span class=\"built_in\">size</span>() == depth)</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">            result[depth].<span class=\"built_in\">push_back</span>(cur -&gt; val);</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(cur -&gt; left,result,depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(cur -&gt; right,result,depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelorder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">order</span>(root,result,depth);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、自底向上的层序遍历（将数组逆序然后输出）\"><a href=\"#2、自底向上的层序遍历（将数组逆序然后输出）\" class=\"headerlink\" title=\"2、自底向上的层序遍历（将数组逆序然后输出）\"></a>2、自底向上的层序遍历（将数组逆序然后输出）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">order</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        vec.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        vec.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">reserve</span>(result.<span class=\"built_in\">begin</span>(),result.<span class=\"built_in\">end</span>());<span class=\"comment\">//反转数组</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、二叉树的右视图（从右看二叉树所能得到的节点值）\"><a href=\"#3、二叉树的右视图（从右看二叉树所能得到的节点值）\" class=\"headerlink\" title=\"3、二叉树的右视图（从右看二叉树所能得到的节点值）\"></a>3、二叉树的右视图（从右看二叉树所能得到的节点值）</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightSizeView</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i ==<span class=\"built_in\">z</span> (size - <span class=\"number\">1</span>))</span><br><span class=\"line\">                        result.<span class=\"built_in\">push_back</span>(node -&gt; val);<span class=\"comment\">//将每层最后一个元素放入result数组</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt;left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt;right);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、二叉树的层平均值\"><a href=\"#4、二叉树的层平均值\" class=\"headerlink\" title=\"4、二叉树的层平均值\"></a>4、二叉树的层平均值</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">averageOfLevels</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">double</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"type\">double</span> sum += node -&gt; val;<span class=\"comment\">//统计每一层的和</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(sum / size);<span class=\"comment\">//将每一层均值放入result数组中</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、N叉树的层序遍历\"><a href=\"#5、N叉树的层序遍历\" class=\"headerlink\" title=\"5、N叉树的层序遍历\"></a>5、N叉树的层序遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">levelOrder</span>(TreeNode* root)&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;i &lt; node -&gt; children.<span class=\"built_in\">size</span>();j ++)&#123;<span class=\"comment\">//将节点孩子加入队列</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(node -&gt; children[j])</span><br><span class=\"line\">                            que.<span class=\"built_in\">push</span>(node -&gt; children[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(vec);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6、在每个二叉树行中找最大值\"><a href=\"#6、在每个二叉树行中找最大值\" class=\"headerlink\" title=\"6、在每个二叉树行中找最大值\"></a>6、在每个二叉树行中找最大值</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">largestValues</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> maxValue = INT_MIN;<span class=\"comment\">//现将最大值设为INT_MIN(即整数最小)</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    <span class=\"comment\">//通过每一层不断比较，最终得到maxValue（即最大值）</span></span><br><span class=\"line\">                    maxValue = ((node -&gt; val) &gt; maxValue)?node -&gt; val:maxValue;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(maxValue);<span class=\"comment\">//将每一层的最大值加入数组result</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"7、填充每一个节点的下一个右侧节点\"><a href=\"#7、填充每一个节点的下一个右侧节点\" class=\"headerlink\" title=\"7、填充每一个节点的下一个右侧节点\"></a>7、填充每一个节点的下一个右侧节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* left;</span><br><span class=\"line\">    Node* right;</span><br><span class=\"line\">    Node* next;<span class=\"comment\">//指向节点的右侧节点</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">connect</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                Node* preNode;<span class=\"comment\">//用来记录首节点和前一个节点</span></span><br><span class=\"line\">                Node* node;<span class=\"comment\">//遍历节点</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        preNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        node = preNode;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                        preNode -&gt; next = node;</span><br><span class=\"line\">                        preNode  = preNode -&gt; next;<span class=\"comment\">//= node同理</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node -&gt; next = <span class=\"literal\">NULL</span>;<span class=\"comment\">//本层最后一个节点指向NULL</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8、二叉树的最大深度\"><a href=\"#8、二叉树的最大深度\" class=\"headerlink\" title=\"8、二叉树的最大深度\"></a>8、二叉树的最大深度</h4><p>给定一个二叉树，找出其最大深度</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数（叶子节点没有子节点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">        <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            depth ++;<span class=\"comment\">//记录深度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9、二叉树的最小深度\"><a href=\"#9、二叉树的最小深度\" class=\"headerlink\" title=\"9、二叉树的最小深度\"></a>9、二叉树的最小深度</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                    <span class=\"comment\">//当节点左右孩子都为空（即叶子节点），到达最小深度</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!node -&gt; left &amp;&amp; !node -&gt; right)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>总结，二叉树的层序遍历，就是图论中的广度优先搜索在二叉树中的应用，需要借助队列来实现。</p>\n<h3 id=\"六、翻转二叉树\"><a href=\"#六、翻转二叉树\" class=\"headerlink\" title=\"六、翻转二叉树\"></a>六、翻转二叉树</h3><h4 id=\"1、深度优先遍历\"><a href=\"#1、深度优先遍历\" class=\"headerlink\" title=\"1、深度优先遍历\"></a>1、深度优先遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归（前序遍历）</span></span><br><span class=\"line\"><span class=\"comment\">//先进行交换左右孩子节点，然后反转左子树，然后反转右子树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(root -&gt; left,root -&gt; right);<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"built_in\">invertTree</span>(root -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"built_in\">invertTree</span>(root -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历（迭代）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();<span class=\"comment\">//中</span></span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历（统一迭代法）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(left);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt;right);<span class=\"comment\">//节点处理逻辑</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、广度优先遍历\"><a href=\"#2、广度优先遍历\" class=\"headerlink\" title=\"2、广度优先遍历\"></a>2、广度优先遍历</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;<span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">invertTree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(node -&gt; left,node -&gt; right);<span class=\"comment\">//左右子树交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>针对二叉树的问题，解题之前要想清楚究竟选择哪种遍历方式</p>\n<h3 id=\"七、对称二叉树\"><a href=\"#七、对称二叉树\" class=\"headerlink\" title=\"七、对称二叉树\"></a>七、对称二叉树</h3><p>给定一个二叉树，检查二叉树是否镜像对称</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自己的第一遍思考</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Tree</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">            <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    vec.<span class=\"built_in\">push_back</span>(node -&gt; val);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; size;j ++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((vec[j] != vec[size - <span class=\"number\">1</span> -j] || vec[j] == <span class=\"literal\">NULL</span> || vec[size - <span class=\"number\">1</span>-                         <span class=\"number\">1</span> - j] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                       flag =<span class=\"number\">1</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> flag;       </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>针对自己第一次实现的想法进行改进：首先判断二叉树是否对称，不需要加入根节点（遍历则需要加入），因为是否对称只和左右子树有关。同时鉴于对队列数据结构的不熟练，调用了vector数组来储存节点数值后在数组中进行比较（考虑麻烦了），直接对称的将左右子树的节点加入到队列中，两个两个一组弹出比较。还加了flag标记来输出bool数，直接true or false即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root -&gt; left);<span class=\"comment\">//加入左子树头结点</span></span><br><span class=\"line\">            que.<span class=\"built_in\">push</span>(root -&gt; right);<span class=\"comment\">//加入右子树头结点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* leftNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                TreeNode* rightNode = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!leftNode &amp;&amp; !leftNode)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!leftNode || !rightNode || (leftNode -&gt; val != rightNode -&gt; val))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(leftNode -&gt; left);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(rightNode -&gt; right);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(leftNode -&gt; right);</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(rightNode -&gt; left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>递归</p>\n<p>1、确定递归参数和返回值</p>\n<p>比较根节点的两个子树是否是互相翻转的，进而判断这个二叉树是否对称，比较的是左右两个子树，参数就是根节点的左子树头结点和右子树头结点。</p>\n<p>返回值自然是bool类型。</p>\n<p>2、确定终止条件</p>\n<p>要比较两个节点的数值相不相等，首先要把两节点为空的情况搞清楚。</p>\n<ul>\n<li>左节点为空，右节点不为空</li>\n<li>左节点不为空，右节点为空</li>\n<li>左右节点都为空</li>\n<li>左右节点都不为空但是值不相等   </li>\n</ul>\n<p>3、确定单层递归的逻辑</p>\n<p>单层递归的逻辑就是两个节点都不为空且节点值相等的情况。</p>\n<ul>\n<li>比较外侧节点值是否相等：传入左节点的左孩子，右节点的右孩子</li>\n<li>比较内侧节点值是否相等：传入左节点的右孩子，右节点的左孩子</li>\n<li>如果左右都对称返回true，有一方不对称就返回false</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(TreeNode* left,TreeNode* right)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//首先排除空节点的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!left &amp;&amp; right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(left &amp;&amp; !right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!left &amp;&amp; !right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">//排除空节点后，两节点值不相等的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((left -&gt; val) != (right -&gt; val))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左子树：左，右子树：右</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> outside = <span class=\"built_in\">compare</span>(left -&gt; left,right -&gt; right);</span><br><span class=\"line\">            <span class=\"comment\">//左子树：右，右子树：左</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> inside = <span class=\"built_in\">compare</span>(left -&gt; right,right -&gt; left);</span><br><span class=\"line\">            <span class=\"comment\">//逻辑处理</span></span><br><span class=\"line\">            <span class=\"type\">bool</span> isSame = outside &amp;&amp; inside;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isSame;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">compare</span>(root -&gt; left,root -&gt; right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"八、二叉树的最大深度\"><a href=\"#八、二叉树的最大深度\" class=\"headerlink\" title=\"八、二叉树的最大深度\"></a>八、二叉树的最大深度</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"type\">int</span> result;<span class=\"comment\">//用来存储最大深度</span></span><br><span class=\"line\">        <span class=\"comment\">//函数返回值为void，非int，与计算节点数不同，深度不具有累加性</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode* node,<span class=\"type\">int</span> depth)</span></span>&#123;<span class=\"comment\">//参数为当前节点，以及当前的深度</span></span><br><span class=\"line\">            result = depth &gt; result ? depth : result;<span class=\"comment\">//通过不断比较深度来更新深度的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!node-&gt;left &amp;&amp; !node-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                depth ++;<span class=\"comment\">//深度加一，因为向下了一层</span></span><br><span class=\"line\">                <span class=\"built_in\">getDepth</span>(node-&gt;left,depth);</span><br><span class=\"line\">                depth --;<span class=\"comment\">//回溯，因为右子树还未进行</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;<span class=\"comment\">//同理，右</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">getDepth</span>(node-&gt;right,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            <span class=\"built_in\">getDepth</span>(root,<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n<p>迭代法中层序遍历最为合适，因为遍历的层数即是二叉树的深度</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                     \tque.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>n叉树的最大深度</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt; node -&gt; children.<span class=\"built_in\">size</span>();j ++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(node -&gt; children[j])</span><br><span class=\"line\">                            que.<span class=\"built_in\">push</span>(node -&gt; children[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"九、二叉树的最小深度\"><a href=\"#九、二叉树的最小深度\" class=\"headerlink\" title=\"九、二叉树的最小深度\"></a>九、二叉树的最小深度</h3><p>最小深度是指根节点到最近叶子节点的最短路径上的节点个数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDepth</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">        \tqueue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((!node -&gt; left) &amp;&amp; (!node -&gt; right))<span class=\"comment\">//左右节点都为空时到达最小深度</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                     \tque.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十、完全二叉树的节点个数\"><a href=\"#十、完全二叉树的节点个数\" class=\"headerlink\" title=\"十、完全二叉树的节点个数\"></a>十、完全二叉树的节点个数</h3><p>将完全二叉树当作普通二叉树看待，依旧使用普通二叉树的遍历方法来计算节点个数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getNodeNums</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> leftNodeNums = <span class=\"built_in\">getNodeNums</span>(root -&gt; left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"type\">int</span> rightNodeNums = <span class=\"built_in\">getNodeNums</span>(root -&gt; right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            <span class=\"type\">int</span> nodeNums = leftNodeNums + rightNodeNums + <span class=\"number\">1</span>;<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> nodeNums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">getNodeNums</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;<span class=\"comment\">//记录节点个数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    result ++;<span class=\"comment\">//每遍历一个节点加一</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node -&gt; right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node -&gt; right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而，完全二叉树本省具有一些特性使得能够使用一些其它的方法来计算个数</p>\n<p>在完全二叉树中，除了最底层的节点可能没有填满之外，其余每层节点数都达到最大值，并且最下面一层节点都集中在该层最左侧的若干区域，若最底层为第h层，则该层节点个数范围为1~2^(h-1)</p>\n<p>完全二叉树只有两种情况，情况一：就是满二叉树，情况二：最后一层叶子节点没有满。</p>\n<p>对于情况一，可以直接用 2^树深度 - 1 来计算，注意这里根节点深度为1。</p>\n<p>对于情况二，分别递归左孩子，和右孩子，递归到某一深度一定会有左孩子或者右孩子为满二叉树，然后依然可以按照情况1来计算。</p>\n<p>可以看出如果整个树不是满二叉树，就递归其左右孩子，直到遇到满二叉树为止，用公式计算这个子树（满二叉树）的节点数量。</p>\n<p>这里关键在于如何去判断一个左子树或者右子树是不是满二叉树呢？</p>\n<p>在完全二叉树中，如果递归向左遍历的深度等于递归向右遍历的深度，那说明就是满二叉树。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countNodes</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            TreeNode* left = root -&gt; left;</span><br><span class=\"line\">            TreeNode* right = root -&gt; right;</span><br><span class=\"line\">            <span class=\"type\">int</span> leftDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> rightDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left)&#123;</span><br><span class=\"line\">                left = left -&gt; left;</span><br><span class=\"line\">                leftDepth ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(right)&#123;</span><br><span class=\"line\">                right = right -&gt; right;</span><br><span class=\"line\">                rightDepth ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftDepth == rightDepth)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>^(leftDepth - <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">countNodes</span>(root -&gt; left) + <span class=\"built_in\">countNodes</span>(root -&gt; right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十一、平衡二叉树\"><a href=\"#十一、平衡二叉树\" class=\"headerlink\" title=\"十一、平衡二叉树\"></a>十一、平衡二叉树</h3><p>因为求深度可以从上到下去查 所以需要前序遍历（中左右），而高度只能从下到上去查，所以只能后序遍历（左右中）</p>\n<p>一颗高度平衡的二叉树定义为：一个二叉树每个节点的左右两棵子树的高度差绝对值不超过1。</p>\n<p>根据定义可知，如果以当前节点为传入节点的二叉树已经不是二叉树了，则该二叉树不是平衡二叉树</p>\n<p>return -1来标记不符合平衡二叉树的规则。</p>\n<p>递归思路：</p>\n<p>1、明确递归函数的参数和返回值</p>\n<p>参数：当前传入节点。 返回值：以当前传入节点为根节点的树的高度。</p>\n<p>那么如何标记左右子树是否差值大于1呢？</p>\n<p>如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。</p>\n<p>所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</p>\n<p>2、明确终止条件</p>\n<p>递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0</p>\n<p>3、明确单层递归的逻辑</p>\n<p>如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。</p>\n<p>分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">(TreeNode* node)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node == <span class=\"literal\">nullptr</span>)<span class=\"comment\">//如果该节点是空指针，则高度为0</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//判断左右子树是否是平衡二叉树，有一个不是则非平衡二叉树</span></span><br><span class=\"line\">            <span class=\"type\">int</span> leftHeight = <span class=\"built_in\">getHeight</span>(node-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(leftHeight == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> rightHeight = <span class=\"built_in\">getHeight</span>(node-&gt;right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(LeftHeight == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(leftHeight - rightHeight) &gt; <span class=\"number\">1</span>)&#123;<span class=\"comment\">//左右子树高度差不超过1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//取两树高度最大者在加上根节点的高度为整颗平衡二叉树的高度</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(leftHeight,rightHeight) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isBalance</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">getHeight</span>(root) == <span class=\"number\">-1</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"comment\">//node节点的最大深度就是node的高度</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode* node)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> depth = <span class=\"number\">0</span>;<span class=\"comment\">//记录深度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;<span class=\"comment\">//更新最大深度值</span></span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* cur = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    depth ++;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cur-&gt;right)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(cur-&gt;right);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cur-&gt;left)</span><br><span class=\"line\">                        st.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                    st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    depth --;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                result = result &gt; depth ? result : depth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isBalance</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(<span class=\"built_in\">getDepth</span>(node-&gt;left),<span class=\"built_in\">getDepth</span>(node-&gt;right))&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>求深度适合前序遍历，求高度适合后序遍历</p>\n<h3 id=\"十二、二叉树的所有路径\"><a href=\"#十二、二叉树的所有路径\" class=\"headerlink\" title=\"十二、二叉树的所有路径\"></a>十二、二叉树的所有路径</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* node,vector&lt;<span class=\"type\">int</span>&gt; path,vector&lt;string&gt; result)</span></span>&#123;</span><br><span class=\"line\">            path.<span class=\"built_in\">push_back</span>(node-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; node-&gt;right == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">                string sPath;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; path.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                    sPath += <span class=\"built_in\">to_string</span>(path[i]);</span><br><span class=\"line\">                    sPath += <span class=\"string\">&quot;-&gt;&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sPath += <span class=\"built_in\">to_string</span>(path[path.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(sPath);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;left,path,result);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;right,path,result);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;string&gt; <span class=\"title\">binaryTreePaths</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; path;</span><br><span class=\"line\">            vector&lt;string&gt; result;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,path,result);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十三、左叶子之和\"><a href=\"#十三、左叶子之和\" class=\"headerlink\" title=\"十三、左叶子之和\"></a>十三、左叶子之和</h3><p>1、确定递归函数的参数和返回值</p>\n<p>要判断左节点值之和，首先要传入根节点，返回值则为数值之和</p>\n<p>2、确定终止条件</p>\n<p>如果遍历到空节点，左叶子值为0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>注意，只有当前节点遍历的是父节点，才能判断其子节点是不是左叶子。所以如果当前遍历的节点是叶子节点，那其左叶子也必定为0</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归的逻辑</p>\n<p>遇到左叶子节点时，记录数值，然后通过递归求取左子树左叶子之和和右子树左叶子之和。相当于整个树的左叶子之和</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> LeftValue = <span class=\"built_in\">sumOfLeftLeaves</span>(root-&gt;left);<span class=\"comment\">//左</span></span><br><span class=\"line\">            <span class=\"comment\">//当左子树只是一个左叶子节点的时候</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right)</span><br><span class=\"line\">                leftValue = root-&gt;left-&gt;val;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> rightValue = <span class=\"built_in\">sumOfLeftLeaves</span>(root-&gt;right);<span class=\"comment\">//右</span></span><br><span class=\"line\">            <span class=\"type\">int</span> sum = leftValue + rightValue;<span class=\"comment\">//中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            stack&lt;TreeNode*&gt; st;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                TreeNode* node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left &amp;&amp; !node-&gt;left-&gt;left &amp;&amp; !node-&gt;left-&gt;right)</span><br><span class=\"line\">                    result += node-&gt;left-&gt;val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                   st.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                   st.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十四、找树左下角的值\"><a href=\"#十四、找树左下角的值\" class=\"headerlink\" title=\"十四、找树左下角的值\"></a>十四、找树左下角的值</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findBottomLeftValue</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            queue&lt;TreeNode*&gt; que;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">            <span class=\"type\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> size = que.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;</span><br><span class=\"line\">                    TreeNode* node = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        result = node-&gt;val;<span class=\"comment\">//每层取第一个节点的值</span></span><br><span class=\"line\">                    que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node-&gt;left)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(node-&gt;right)</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;<span class=\"comment\">//遍历完所有层后result里的值则为树左下角的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">//定义全局变量</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> maxDepth = INT_MIN;<span class=\"comment\">//记录最大深度</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> result;<span class=\"comment\">//记录树左下角的值</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* node,<span class=\"type\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!node-&gt;left &amp;&amp; !node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(depth &gt; maxDepth)&#123;</span><br><span class=\"line\">                    maxDepth = depth;</span><br><span class=\"line\">                    result = node-&gt;val;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;left)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//traversal(node-&gt;left,depth + 1);</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;left,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node-&gt;right)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//traversal(node-&gt;right,depth + 1);</span></span><br><span class=\"line\">                depth ++;</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(node-&gt;right,depth);</span><br><span class=\"line\">                depth --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findBottomLeftValue</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">traversal</span>(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>1、递归求深度的写法，在<strong>平衡树二叉树</strong>中详细分析了深度应该怎么求，高度应该怎么求</p>\n<p>2、递归中隐藏了回溯，在<strong>二叉树的所有路径</strong> 中讲解了究竟哪里使用了回溯，哪里隐藏了回溯</p>\n<p>3、层次遍历，在<strong>层序遍历</strong>深度讲解了二叉树层序遍历。</p>\n<h3 id=\"十五、路径总和I\"><a href=\"#十五、路径总和I\" class=\"headerlink\" title=\"十五、路径总和I\"></a>十五、路径总和I</h3><p>给定一个二叉树和目标和，判断该树是否存在根节点到叶子节点的路径，这条路径上的所有节点值相加等于目标和</p>\n<p>递归：</p>\n<p>1、确定函数返回值和参数</p>\n<p>需要一个指针遍历二叉树，同时需要int参数来记录目标和，使用递减的方式，当某条路径上的result递减至0且到叶子节点时，说明该二叉树存在所有节点值相加等于目标和的路径</p>\n<p>2、确定终止条件</p>\n<p> 当和递减至0且遍历到叶子节点时，存在</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(result == <span class=\"number\">0</span> &amp;&amp; !cur-&gt;left &amp;&amp; !cur-&gt;right) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>当遇到叶子节点未满足条件时，不存在</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归的逻辑</p>\n<p>先向左继续判断，不满足再向右继续判断，都不满足则不存在该路径</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cur-&gt;left)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(cur-&gt;right)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;right,result - cur-&gt;right-&gt;val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,<span class=\"type\">int</span> result)</span></span>&#123;<span class=\"comment\">//记录当前节点和目标和</span></span><br><span class=\"line\">            <span class=\"comment\">//当和递减至0且遍历到叶子节点时，存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result == <span class=\"number\">0</span> &amp;&amp; !cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">//当遇到叶子节点未满足条件时，不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val))<span class=\"comment\">//包含回溯的逻辑</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;right)&#123;<span class=\"comment\">//右</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">traversal</span>(cur-&gt;right,result - cur-&gt;right-&gt;val))<span class=\"comment\">//包含回溯的逻辑</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">/*将回溯过程体现出来代码可改为：</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;left)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult -= cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \tif(traversal(cur-&gt;left,result))</span></span><br><span class=\"line\"><span class=\"comment\">            \t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult += cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;right)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult -= cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \tif(traversal(cur-&gt;right,result))</span></span><br><span class=\"line\"><span class=\"comment\">            \t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">            \tresult += cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode* root,<span class=\"type\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(root,sum - root-&gt;val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>递归过程隐藏回溯，如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">traversal</span>(cur-&gt;left,result - cur-&gt;left-&gt;val);</span><br></pre></td></tr></table></figure>\n<p>把result - cur-&gt;left-&gt;val直接作为参数传进函数，函数结束，result的数值并没有改变</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//迭代法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(TreeNode* root,<span class=\"type\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//此时栈里放的是pair&lt;节点指针，路径数值&gt;\t</span></span><br><span class=\"line\">            stack&lt;pair&lt;TreeNode*,<span class=\"type\">int</span>&gt;&gt; st;</span><br><span class=\"line\">            st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(root,root-&gt;val));</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                pair&lt;TreeNode*,<span class=\"type\">int</span>&gt; node = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"comment\">//如果该节点是叶子节点，同时该路径数值等于sum，返回true</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!node.first-&gt;left &amp;&amp; !node.first-&gt;right &amp;&amp; sum == node.second)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">//右节点，压入节点的同时，记录路径数值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.first-&gt;right)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(node.first-&gt;right,node.second +                           node.first-&gt;right-&gt;val));</span><br><span class=\"line\">                <span class=\"comment\">//左节点，压入节点的同时，记录路径数值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.first-&gt;left)</span><br><span class=\"line\">                    st.<span class=\"built_in\">push</span>(<span class=\"built_in\">pair</span>&lt;TreeNode*,<span class=\"type\">int</span>&gt;(node.first-&gt;left,node.second +                           node.first-&gt;left-&gt;val));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十六、路径总和II\"><a href=\"#十六、路径总和II\" class=\"headerlink\" title=\"十六、路径总和II\"></a>十六、路径总和II</h3><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于目标和的路径</p>\n<p>递归：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;<span class=\"comment\">//记录所有和为sum的路径</span></span><br><span class=\"line\">    \tvector&lt;<span class=\"type\">int</span>&gt; path;<span class=\"comment\">//记录单条遍历的路径</span></span><br><span class=\"line\">        <span class=\"comment\">//递归函数不需要返回值，因为要遍历整棵树</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">traversal</span><span class=\"params\">(TreeNode* cur,<span class=\"type\">int</span> count)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遇到叶子节点且找到和为sum的路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                result.<span class=\"built_in\">push_back</span>(path);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!cur-&gt;left &amp;&amp; !cur-&gt;right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;left)&#123;<span class=\"comment\">//左</span></span><br><span class=\"line\">                path.<span class=\"built_in\">push_back</span>(cur-&gt;left-&gt;val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur-&gt;left,count - cur-&gt;left-&gt;val);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;right)&#123;<span class=\"comment\">//右</span></span><br><span class=\"line\">                path.<span class=\"built_in\">push_back</span>(cur-&gt;right-&gt;val);</span><br><span class=\"line\">                <span class=\"built_in\">traversal</span>(cur-&gt;right,count - cur-&gt;right-&gt;val);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/*体现回溯的过程</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;left)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.push_back(cur-&gt;left-&gt;val);</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount -= cur-&gt;left-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \ttraversal(cur-&gt;left,count);//递归</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount += cur-&gt;left-&gt;val;//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.pop_back();//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if(cur-&gt;right)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.push_back(cur-&gt;left-&gt;val);</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount -= cur-&gt;right-&gt;val;</span></span><br><span class=\"line\"><span class=\"comment\">            \ttraversal(cur-&gt;right,count);//递归</span></span><br><span class=\"line\"><span class=\"comment\">            \tcount += cur-&gt;right-&gt;val;//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            \tpath.pop_back();//回溯</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">findPathSum</span>(TreeNode* root,<span class=\"type\">int</span> sum)&#123;</span><br><span class=\"line\">            result.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            path.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            path.<span class=\"built_in\">push_back</span>(root-&gt;val);</span><br><span class=\"line\">          \t<span class=\"built_in\">traversal</span>(root,sum - root-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"十七、从中序与后序遍历序列构造二叉树\"><a href=\"#十七、从中序与后序遍历序列构造二叉树\" class=\"headerlink\" title=\"十七、从中序与后序遍历序列构造二叉树\"></a>十七、从中序与后序遍历序列构造二叉树</h3><p>根据一棵树的中序和后序遍历构造二叉树</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">traversal</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; inorder,vector&lt;<span class=\"type\">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第一步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(postorder.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"comment\">//后序遍历数组的最后一个元素，就是当前的中间节点</span></span><br><span class=\"line\">            <span class=\"type\">int</span> rootValue = postorder[postorder.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>];</span><br><span class=\"line\">            TreeNode* root = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(rootValue);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(postorder.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> delimiterIndex = <span class=\"number\">0</span>;delimiter &lt; inorder.<span class=\"built_in\">size</span>();delimiterIndex ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(inorder[delimiterIndex] == rootValue)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftInorder</span><span class=\"params\">(inorder.begin(),inorder.begin()+delimiterIndex)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightInorder</span><span class=\"params\">(inorder.begin()+delimiterIndex+<span class=\"number\">1</span>,inorder.end())</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            postorder.<span class=\"built_in\">resize</span>(postorder.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt;                                                                           <span class=\"title\">leftPostorder</span><span class=\"params\">(postorder.begin(),postorder.begin()+leftInorder.size())</span></span>;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">rightPostorder</span><span class=\"params\">(postorder.begin()+leftInorder.size(),postorder.end())</span></span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            root-&gt;left = <span class=\"built_in\">traversal</span>(leftInorder,leftPostorder);</span><br><span class=\"line\">            root-&gt;right = <span class=\"built_in\">traversal</span>(rightInorder,rightPostorder);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">bulidTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; inorder,vector&lt;<span class=\"type\">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(inorder == <span class=\"literal\">NULL</span> || postorder == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(inorder,postorder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"十八、最大二叉树\"><a href=\"#十八、最大二叉树\" class=\"headerlink\" title=\"十八、最大二叉树\"></a>十八、最大二叉树</h3><p>给定一个不含重复元素的整数数组。最大二叉树定义如下：</p>\n<p>1、二叉树的根是数组中的最大元素</p>\n<p>2、左子树是通过数组中的最大值左边部分构造出的最大二叉树</p>\n<p>3、右子树是通过数组中的最大值左边部分构造出的最大二叉树</p>\n<p>给定的数组大小在[1,1000]之间</p>\n<p>1、确定递归函数参数和返回值</p>\n<p>参数传入的是存放元素的数组，返回该数组构造的二叉树的头节点，返回类型是指向节点的指针</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span></span><br></pre></td></tr></table></figure>\n<p>2、确定终止条件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    node-&gt;val = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、确定单层递归逻辑</p>\n<p>分三步：</p>\n<p>一、找到数组中最大的值与其对应的下标，最大的值构造根节点，下标用来下一步分割数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i] &gt; maxValue)&#123;</span><br><span class=\"line\">        maxValue = nums[i];</span><br><span class=\"line\">        maxValueIndex = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Treenode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">node-&gt;val = maxValue;</span><br></pre></td></tr></table></figure>\n<p>二、最大值所在下标左区间 构造左子树</p>\n<p>需要判断maxValueIndex&gt;0,因为至少保证左区间至少有一个数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(maxValueIndex &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftTree</span><span class=\"params\">(nums.begin(),nums.begin()+maxValueIndex)</span></span>;</span><br><span class=\"line\">    node-&gt;left = <span class=\"built_in\">constructMaxBinaryTree</span>(leftTree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、最大值所在下标右区间 构造右子树</p>\n<p>maxValue&lt;(nums.size()-1),保证右区间至少有一个数值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(maxValueIndex &lt; (nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightTree</span><span class=\"params\">(nums.begin()+maxValueIndex+<span class=\"number\">1</span>,nums.end())</span></span>;</span><br><span class=\"line\">    node-&gt;right = <span class=\"built_in\">constructMaxBinaryTree</span>(rightTree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(<span class=\"number\">0</span>);<span class=\"comment\">//构造中节点</span></span><br><span class=\"line\">            <span class=\"comment\">//当数组只剩下一个元素，即叶子节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                node-&gt;val = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//找到数组中的最大值与其下标</span></span><br><span class=\"line\">            <span class=\"type\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] &gt; maxValue)&#123;</span><br><span class=\"line\">                    maxValue = nums[i];</span><br><span class=\"line\">                    maxValueIndex = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node-&gt;val = maxValue;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//确保左右区间至少有一个元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxValueIndex &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(nums.begin(),nums.begin()+maxValueIndex)</span></span>;</span><br><span class=\"line\">                node-&gt;left = <span class=\"built_in\">constructMaxBinaryTree</span>(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maxValueIndex &lt; nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">right</span><span class=\"params\">(nums.begin()+maxValueIndex+<span class=\"number\">1</span>,nums.end())</span></span>;</span><br><span class=\"line\">                node-&gt;right = <span class=\"built_in\">constructMaxBinaryTree</span>(right);</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上代码较为冗余，效率不高，每次分割数组后都要新定义vector，但是逻辑描述较为清晰</p>\n<p>优化版：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">//在左闭右开区间[left,rihgt)，构造二叉树</span></span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">traversal</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left &gt;= right)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"comment\">//分割点下标：maxValueIndex</span></span><br><span class=\"line\">            <span class=\"type\">int</span> maxValueIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; right;i ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] &gt; nums[maxValueIndex])</span><br><span class=\"line\">                    maxValueIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(nums[maxValueIndex]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左闭右开[left,maxValueIndex)</span></span><br><span class=\"line\">            node-&gt;left = <span class=\"built_in\">traversal</span>(nums,left,maxValueIndex);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//左闭右开[maxValueIndex+1,right)</span></span><br><span class=\"line\">            node-&gt;right = <span class=\"built_in\">traversal</span>(nums,maxValueIndex+<span class=\"number\">1</span>,right);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">TreeNode* <span class=\"title\">constructMaxBinaryTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始左闭右开区间[0,nums.size())</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">traversal</span>(nums,<span class=\"number\">0</span>,nums.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"redis知识点总结","date":"2024-02-01T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n## Golang内存模型\ngolang内存分配参考了tcmalloc的思路，即thread cache malloc。tcmalloc分为ThreadCache、CentralCache和PageHeap三个层次。\n\nThreadCache是对每一个线程的缓存，分配时不需要加锁，因为是每一个线程独有的，速度较快。其对每一个size class维护一个freeList，缓存没有被分配的空闲对象。\n\nCentralCache也对每个size class维护一个freeList，但是是被多个线程共享的，分配时需要加锁。\n\n当CentralCache不够分配时，就会像PageHeap申请内存，这部分内存可能来自PageHeap的缓存，也有可能是PageHeap向操作系统申请的新内存。\n\ntcmalloc减少了在多线程的环境下，争夺锁所产生的开销，原因主要有二：1、在ThreadCache层面，此时是被每个线程单独占有的，不需要申请锁，加快了速度；2、由于是一次性向操作系统申请了一大块内存，就不需要频繁的系统调用来申请内存（系统调用需要上下文切换，开销比价大），加快了内存分配的效率。\n\nGolang内存管理组件主要包括mspan、mcache、mcentral、mheap。\n\n当程序初始化的时候，每个processor会给微对象和小对象分配mcache，其中包含内存管理单元mspan。内存管理单元分为很多特定大小的类（从8B到32KB），当向mcache中内存大小不够的时候，就会向mcentral中申请内存，mcentral就会根据对应的mspan的类型进行分配。mcentral又属于mheap，mheap负责向操作系统申请内存。\n\n### mspan\nmspan是Golang内存分配的基本单元。有67种类型。\n- 微对象。大小为（0， 16B），会先从微型分配器中分配，再依次尝试mcache、mcentral、mheap\n- 小对象。大小为【16B、32KB】，申请顺序依次为mcache、mcentral、mheap\n- 大对象。大小32KB以上，直接在mheap上分配\n\nmspan结构体中包含prev和next两个指针，用于访问双向链表中的前驱和后继节点（指的是在freeList中）\n\nspan直译为跨度，可以理解为一段连续的内存。mspan包含多个大小为8KB的页，这里的页并非操作系统中的页，是它们大小的整数倍。\n\n结构体中还包含spanclass字段，用来表示mspan的类型和大小，go中一共有67种span类型，每个spanclass存储特定大小的对象，所有的数据会预先计算出来并存储下来，便于查找，以空间换时间。除开这67种spanclass，还有0号spanclass，用来管理大于32KB的对象。\n\n### mcache\ngo中的线程缓存，其与go中的processor绑定，每个线程都会分配一个mcache处理微对象和小对象，是每个线程独有的，不需要加锁。   \n\nmcache在初始化时不包含mspan，只有当第一次申请内存时，会向上一级组件申请获得mspan\n\n### mcentral\n是Golang中的中心缓存，和mcache的区别是被多个线程共享，访问mcentral中的内存管理单元需要使用互斥锁。\n\n每个mcentral会管理某个spanclass的内存管理单元，会分为两类，一个是包含空闲对象的内存管理单元，一个是不包含空闲管理对象的内存管理单元。\n\n### mheap\n内存分配的核心组件。包含mcentral和heapArena，堆上所有的mspan都是由mheap而来。\n- allspans：已经分配的所有mspan\n- arenas：heapArena数组，用于管理一个个内存块\n- central：mcentral数组，用于管理对应spanclass的mspan\n\n### 总结\nGo的内存分配器根据对象的大小：分为微对象、小对象和大对象，分别采取不同的分配策略。\n\n总体分配流程：32KB以上的对象，直接从mheap中进行分配；小于等于16KB的对象从mcache中的微型分配器中进行分配；剩下的小对象的话，首先计算对象的大小，然后mcache分配对应规格的mspan，如果mcache中没有对应规格的mspan，就会向mcentral中申请，若mcentral中也没有，就会继续向mheap申请，如果mheap中也没有，就会向操作系统进行申请。\n\n## Golang map实现原理\n算法上基于hash实现key的映射和寻址；在数据结构上基于桶数组实现key-value对的存储。\n\n流程：\n- 通过hash取得key的hash值；\n- hash值对数组长度取模，确定所属的桶；\n- 在桶中插入key-value对；\n\nhash的性质保证了相同的hash值必然会映射到同一个桶中，通过在桶中遍历确定对应的key-value对。控制每个桶中key-value对的数量，保证map的几项操作都限制在常数级别的时间复杂度内。\n\nmap中，会对长度为2的整数次幂的桶数组进行key-value对的存储。每个桶固定存储8个kv对，当超过8个，就会创建桶链表。\n\n由于hash冲突的存在，不同的key值可能会映射到相同的桶。解决hash冲突的方法一般有两种：拉链法和开放寻址法。\n\n### 拉链法\n将命中同一个桶中的元素通过链表的方式进行链接，便于动态扩展。\n\n### 开放寻址法\n当再次命中同一个桶中是，会以一定的探测策略，寻找空闲的位置。\n\n\n\nGolang map在实现hash冲突时，结合了拉链法和开放寻址法两种。以写流程举例：\n- 桶数组中的每个桶，严格意义上讲是一个桶单链表，链表上的每个节点都是一个桶\n- 每个桶可以固定存储8个kv对\n- 当key命中一个桶时，首先根据开放寻址法找到一个空闲的位置，如果当前桶节点没有空闲位置，通过桶节点的溢出指针到达下一个桶节点，重复上一个步骤\n- 如果遍历到链表尾部仍然没有找到空闲位置，就新建一个桶节点，将kv对存储在其中\n\n### map扩容\n如果map中桶数组的长度不变的话，当插入的kv对达到一定数量的时候，每个索引下挂载的kv对数量就会过多，操作的常数时间复杂度就会逐渐退化成线性复杂度。此时就需要对桶数组进行扩容。\n\nmap扩容机制核心包括：\n- 扩容分为增量扩容和等量扩容；\n- 当桶内kv总数/桶数组的长度 > 6.5时发生增量扩容，桶数组的长度增长为原值的两倍；\n- 当桶内溢出桶的数量大于等于2^B时（B为桶数组长度的指数，因为是2的整数次幂），发生等量扩容，桶的长度保持为原值；\n- 采用渐进扩容，当桶被实际操作时，由使用者完成数据迁移，避免一次性的全量数据迁移导致的性能抖动；\n\n## Golang channel实现原理\nGolang channel底层的核心数据结构包括一个环形数组（维护两个指针：一个是写入时的index，一个是读取时的index）、一个阻塞的读协程队列、一个阻塞的写协程队列（双向链表）。\n\n根据类型，channel分为无缓冲型、有缓冲元素为struct型、有缓冲元素为pointer型。\n- 如果是无缓冲型，仅申请一个大小为默认值96的空间；\n- 如果是有缓冲的struct型，一次性分配好96 + mem大小的空间，并且调整chan的buf（环形数组）指向mem的起始位置；\n- 如果是有缓冲的pointer型，分别申请chan和buf的空间，两者无需连续；\n\n### 写流程\n针对写操作，对于未初始化的channel，写入操作会发生死锁，对于已经关闭的channel，写入操作会导致panic。\n\n如果写时存在阻塞读协程（说明channel当前为空），首先加锁，然后从阻塞读协程队列中取出一个goroutine的封装对象，再者会基于memmove方法，将写入元素直接拷贝给对应取出的goroutine，然后解锁，最后唤醒阻塞的读协程。\n\n如果写时无阻塞读协程但环形缓冲区仍有空间，加锁，将当前写入元素添加到环形缓冲区当中对应的位置（有特定的维护的index），然后将index后移，解锁，返回。\n\n如果写时无阻塞读协程且环形缓冲区无空闲空间，加锁，构造封装当前goroutine的对象，将当前对象添加到当前channel的阻塞写协程队列中，然后挂起当前协程，如果协程被唤醒，（说明有对应读协程），最后解锁。\n\n### 读流程\n如果读空channel，会挂起，引发死锁。\n\n如果channel已经关闭，并且内部没有元素，直接解锁返回即可\n\n如果读时有阻塞的写协程（说明当前的环形缓冲区已满或无缓冲），首先加锁，然后从写阻塞队列中获取一个写协程，如果无缓冲区，直接读取写协程的元素，唤醒写协程，如果存在缓冲区，则读取缓冲区头部的元素，再将写协程的元素添加到环形缓冲区的尾部并唤醒写协程，最后解锁返回。\n\n如果读时无阻塞写协程且缓冲区有元素，加锁，获得缓冲区首部元素，将index++，解锁返回。\n\n如果读时无阻塞写协程且缓冲区无元素，加锁，构造当前读goroutine的对象，添加到读阻塞协程队列，挂起当前协程，（如果协程从挂起状态中被唤醒，说明有元素写入），最后解锁。\n\n### 非阻塞模式\n非阻塞模式下，读/写channel方法通过一个bool型的响应参数，用来标识是否读取/写入成功。\n- 所有使得当前goroutine被挂起的操作，在非阻塞模式下都会返回false；\n- 所有使得当前goroutine会进入死锁的操作，在非阻塞模式下都会返回false；\n- 所有能立即完成读取/写入操作的条件下，非阻塞模式下会返回true；\n\n只有在select语句组成的多路复用分支中，与channel的交互会变成非阻塞模式。\n\n## Golang new和make的区别\nnew可以创建任何类型的变量，而make指可以创建引用类型（如切片、映射、通道）的变量，这是因为make会对变量进行初始化，而new不会。\n\nnew总是返回一个指向新内存的指针，而make返回的是引用类型的实例，即已经初始化后的变量。\n\nnew分配的内存会进行零值初始化，这意味着对于非指针类型，new返回的是该类型的零值，对于指针类型，new返回的是空指针。而make会为引用类型分配内存并初始化，例如为切片分配初始长度和容量，为映射分配哈希表等。","source":"_posts/golang知识点回顾.md","raw":"---\ntitle: redis知识点总结\ndate: 2024-2-1 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: redis\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n## Golang内存模型\ngolang内存分配参考了tcmalloc的思路，即thread cache malloc。tcmalloc分为ThreadCache、CentralCache和PageHeap三个层次。\n\nThreadCache是对每一个线程的缓存，分配时不需要加锁，因为是每一个线程独有的，速度较快。其对每一个size class维护一个freeList，缓存没有被分配的空闲对象。\n\nCentralCache也对每个size class维护一个freeList，但是是被多个线程共享的，分配时需要加锁。\n\n当CentralCache不够分配时，就会像PageHeap申请内存，这部分内存可能来自PageHeap的缓存，也有可能是PageHeap向操作系统申请的新内存。\n\ntcmalloc减少了在多线程的环境下，争夺锁所产生的开销，原因主要有二：1、在ThreadCache层面，此时是被每个线程单独占有的，不需要申请锁，加快了速度；2、由于是一次性向操作系统申请了一大块内存，就不需要频繁的系统调用来申请内存（系统调用需要上下文切换，开销比价大），加快了内存分配的效率。\n\nGolang内存管理组件主要包括mspan、mcache、mcentral、mheap。\n\n当程序初始化的时候，每个processor会给微对象和小对象分配mcache，其中包含内存管理单元mspan。内存管理单元分为很多特定大小的类（从8B到32KB），当向mcache中内存大小不够的时候，就会向mcentral中申请内存，mcentral就会根据对应的mspan的类型进行分配。mcentral又属于mheap，mheap负责向操作系统申请内存。\n\n### mspan\nmspan是Golang内存分配的基本单元。有67种类型。\n- 微对象。大小为（0， 16B），会先从微型分配器中分配，再依次尝试mcache、mcentral、mheap\n- 小对象。大小为【16B、32KB】，申请顺序依次为mcache、mcentral、mheap\n- 大对象。大小32KB以上，直接在mheap上分配\n\nmspan结构体中包含prev和next两个指针，用于访问双向链表中的前驱和后继节点（指的是在freeList中）\n\nspan直译为跨度，可以理解为一段连续的内存。mspan包含多个大小为8KB的页，这里的页并非操作系统中的页，是它们大小的整数倍。\n\n结构体中还包含spanclass字段，用来表示mspan的类型和大小，go中一共有67种span类型，每个spanclass存储特定大小的对象，所有的数据会预先计算出来并存储下来，便于查找，以空间换时间。除开这67种spanclass，还有0号spanclass，用来管理大于32KB的对象。\n\n### mcache\ngo中的线程缓存，其与go中的processor绑定，每个线程都会分配一个mcache处理微对象和小对象，是每个线程独有的，不需要加锁。   \n\nmcache在初始化时不包含mspan，只有当第一次申请内存时，会向上一级组件申请获得mspan\n\n### mcentral\n是Golang中的中心缓存，和mcache的区别是被多个线程共享，访问mcentral中的内存管理单元需要使用互斥锁。\n\n每个mcentral会管理某个spanclass的内存管理单元，会分为两类，一个是包含空闲对象的内存管理单元，一个是不包含空闲管理对象的内存管理单元。\n\n### mheap\n内存分配的核心组件。包含mcentral和heapArena，堆上所有的mspan都是由mheap而来。\n- allspans：已经分配的所有mspan\n- arenas：heapArena数组，用于管理一个个内存块\n- central：mcentral数组，用于管理对应spanclass的mspan\n\n### 总结\nGo的内存分配器根据对象的大小：分为微对象、小对象和大对象，分别采取不同的分配策略。\n\n总体分配流程：32KB以上的对象，直接从mheap中进行分配；小于等于16KB的对象从mcache中的微型分配器中进行分配；剩下的小对象的话，首先计算对象的大小，然后mcache分配对应规格的mspan，如果mcache中没有对应规格的mspan，就会向mcentral中申请，若mcentral中也没有，就会继续向mheap申请，如果mheap中也没有，就会向操作系统进行申请。\n\n## Golang map实现原理\n算法上基于hash实现key的映射和寻址；在数据结构上基于桶数组实现key-value对的存储。\n\n流程：\n- 通过hash取得key的hash值；\n- hash值对数组长度取模，确定所属的桶；\n- 在桶中插入key-value对；\n\nhash的性质保证了相同的hash值必然会映射到同一个桶中，通过在桶中遍历确定对应的key-value对。控制每个桶中key-value对的数量，保证map的几项操作都限制在常数级别的时间复杂度内。\n\nmap中，会对长度为2的整数次幂的桶数组进行key-value对的存储。每个桶固定存储8个kv对，当超过8个，就会创建桶链表。\n\n由于hash冲突的存在，不同的key值可能会映射到相同的桶。解决hash冲突的方法一般有两种：拉链法和开放寻址法。\n\n### 拉链法\n将命中同一个桶中的元素通过链表的方式进行链接，便于动态扩展。\n\n### 开放寻址法\n当再次命中同一个桶中是，会以一定的探测策略，寻找空闲的位置。\n\n\n\nGolang map在实现hash冲突时，结合了拉链法和开放寻址法两种。以写流程举例：\n- 桶数组中的每个桶，严格意义上讲是一个桶单链表，链表上的每个节点都是一个桶\n- 每个桶可以固定存储8个kv对\n- 当key命中一个桶时，首先根据开放寻址法找到一个空闲的位置，如果当前桶节点没有空闲位置，通过桶节点的溢出指针到达下一个桶节点，重复上一个步骤\n- 如果遍历到链表尾部仍然没有找到空闲位置，就新建一个桶节点，将kv对存储在其中\n\n### map扩容\n如果map中桶数组的长度不变的话，当插入的kv对达到一定数量的时候，每个索引下挂载的kv对数量就会过多，操作的常数时间复杂度就会逐渐退化成线性复杂度。此时就需要对桶数组进行扩容。\n\nmap扩容机制核心包括：\n- 扩容分为增量扩容和等量扩容；\n- 当桶内kv总数/桶数组的长度 > 6.5时发生增量扩容，桶数组的长度增长为原值的两倍；\n- 当桶内溢出桶的数量大于等于2^B时（B为桶数组长度的指数，因为是2的整数次幂），发生等量扩容，桶的长度保持为原值；\n- 采用渐进扩容，当桶被实际操作时，由使用者完成数据迁移，避免一次性的全量数据迁移导致的性能抖动；\n\n## Golang channel实现原理\nGolang channel底层的核心数据结构包括一个环形数组（维护两个指针：一个是写入时的index，一个是读取时的index）、一个阻塞的读协程队列、一个阻塞的写协程队列（双向链表）。\n\n根据类型，channel分为无缓冲型、有缓冲元素为struct型、有缓冲元素为pointer型。\n- 如果是无缓冲型，仅申请一个大小为默认值96的空间；\n- 如果是有缓冲的struct型，一次性分配好96 + mem大小的空间，并且调整chan的buf（环形数组）指向mem的起始位置；\n- 如果是有缓冲的pointer型，分别申请chan和buf的空间，两者无需连续；\n\n### 写流程\n针对写操作，对于未初始化的channel，写入操作会发生死锁，对于已经关闭的channel，写入操作会导致panic。\n\n如果写时存在阻塞读协程（说明channel当前为空），首先加锁，然后从阻塞读协程队列中取出一个goroutine的封装对象，再者会基于memmove方法，将写入元素直接拷贝给对应取出的goroutine，然后解锁，最后唤醒阻塞的读协程。\n\n如果写时无阻塞读协程但环形缓冲区仍有空间，加锁，将当前写入元素添加到环形缓冲区当中对应的位置（有特定的维护的index），然后将index后移，解锁，返回。\n\n如果写时无阻塞读协程且环形缓冲区无空闲空间，加锁，构造封装当前goroutine的对象，将当前对象添加到当前channel的阻塞写协程队列中，然后挂起当前协程，如果协程被唤醒，（说明有对应读协程），最后解锁。\n\n### 读流程\n如果读空channel，会挂起，引发死锁。\n\n如果channel已经关闭，并且内部没有元素，直接解锁返回即可\n\n如果读时有阻塞的写协程（说明当前的环形缓冲区已满或无缓冲），首先加锁，然后从写阻塞队列中获取一个写协程，如果无缓冲区，直接读取写协程的元素，唤醒写协程，如果存在缓冲区，则读取缓冲区头部的元素，再将写协程的元素添加到环形缓冲区的尾部并唤醒写协程，最后解锁返回。\n\n如果读时无阻塞写协程且缓冲区有元素，加锁，获得缓冲区首部元素，将index++，解锁返回。\n\n如果读时无阻塞写协程且缓冲区无元素，加锁，构造当前读goroutine的对象，添加到读阻塞协程队列，挂起当前协程，（如果协程从挂起状态中被唤醒，说明有元素写入），最后解锁。\n\n### 非阻塞模式\n非阻塞模式下，读/写channel方法通过一个bool型的响应参数，用来标识是否读取/写入成功。\n- 所有使得当前goroutine被挂起的操作，在非阻塞模式下都会返回false；\n- 所有使得当前goroutine会进入死锁的操作，在非阻塞模式下都会返回false；\n- 所有能立即完成读取/写入操作的条件下，非阻塞模式下会返回true；\n\n只有在select语句组成的多路复用分支中，与channel的交互会变成非阻塞模式。\n\n## Golang new和make的区别\nnew可以创建任何类型的变量，而make指可以创建引用类型（如切片、映射、通道）的变量，这是因为make会对变量进行初始化，而new不会。\n\nnew总是返回一个指向新内存的指针，而make返回的是引用类型的实例，即已经初始化后的变量。\n\nnew分配的内存会进行零值初始化，这意味着对于非指针类型，new返回的是该类型的零值，对于指针类型，new返回的是空指针。而make会为引用类型分配内存并初始化，例如为切片分配初始长度和容量，为映射分配哈希表等。","slug":"golang知识点回顾","published":1,"updated":"2024-03-24T15:56:39.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsoq0008y0vmcr2u75kz","content":"<h2 id=\"Golang内存模型\"><a href=\"#Golang内存模型\" class=\"headerlink\" title=\"Golang内存模型\"></a>Golang内存模型</h2><p>golang内存分配参考了tcmalloc的思路，即thread cache malloc。tcmalloc分为ThreadCache、CentralCache和PageHeap三个层次。</p>\n<p>ThreadCache是对每一个线程的缓存，分配时不需要加锁，因为是每一个线程独有的，速度较快。其对每一个size class维护一个freeList，缓存没有被分配的空闲对象。</p>\n<p>CentralCache也对每个size class维护一个freeList，但是是被多个线程共享的，分配时需要加锁。</p>\n<p>当CentralCache不够分配时，就会像PageHeap申请内存，这部分内存可能来自PageHeap的缓存，也有可能是PageHeap向操作系统申请的新内存。</p>\n<p>tcmalloc减少了在多线程的环境下，争夺锁所产生的开销，原因主要有二：1、在ThreadCache层面，此时是被每个线程单独占有的，不需要申请锁，加快了速度；2、由于是一次性向操作系统申请了一大块内存，就不需要频繁的系统调用来申请内存（系统调用需要上下文切换，开销比价大），加快了内存分配的效率。</p>\n<p>Golang内存管理组件主要包括mspan、mcache、mcentral、mheap。</p>\n<p>当程序初始化的时候，每个processor会给微对象和小对象分配mcache，其中包含内存管理单元mspan。内存管理单元分为很多特定大小的类（从8B到32KB），当向mcache中内存大小不够的时候，就会向mcentral中申请内存，mcentral就会根据对应的mspan的类型进行分配。mcentral又属于mheap，mheap负责向操作系统申请内存。</p>\n<h3 id=\"mspan\"><a href=\"#mspan\" class=\"headerlink\" title=\"mspan\"></a>mspan</h3><p>mspan是Golang内存分配的基本单元。有67种类型。</p>\n<ul>\n<li>微对象。大小为（0， 16B），会先从微型分配器中分配，再依次尝试mcache、mcentral、mheap</li>\n<li>小对象。大小为【16B、32KB】，申请顺序依次为mcache、mcentral、mheap</li>\n<li>大对象。大小32KB以上，直接在mheap上分配</li>\n</ul>\n<p>mspan结构体中包含prev和next两个指针，用于访问双向链表中的前驱和后继节点（指的是在freeList中）</p>\n<p>span直译为跨度，可以理解为一段连续的内存。mspan包含多个大小为8KB的页，这里的页并非操作系统中的页，是它们大小的整数倍。</p>\n<p>结构体中还包含spanclass字段，用来表示mspan的类型和大小，go中一共有67种span类型，每个spanclass存储特定大小的对象，所有的数据会预先计算出来并存储下来，便于查找，以空间换时间。除开这67种spanclass，还有0号spanclass，用来管理大于32KB的对象。</p>\n<h3 id=\"mcache\"><a href=\"#mcache\" class=\"headerlink\" title=\"mcache\"></a>mcache</h3><p>go中的线程缓存，其与go中的processor绑定，每个线程都会分配一个mcache处理微对象和小对象，是每个线程独有的，不需要加锁。   </p>\n<p>mcache在初始化时不包含mspan，只有当第一次申请内存时，会向上一级组件申请获得mspan</p>\n<h3 id=\"mcentral\"><a href=\"#mcentral\" class=\"headerlink\" title=\"mcentral\"></a>mcentral</h3><p>是Golang中的中心缓存，和mcache的区别是被多个线程共享，访问mcentral中的内存管理单元需要使用互斥锁。</p>\n<p>每个mcentral会管理某个spanclass的内存管理单元，会分为两类，一个是包含空闲对象的内存管理单元，一个是不包含空闲管理对象的内存管理单元。</p>\n<h3 id=\"mheap\"><a href=\"#mheap\" class=\"headerlink\" title=\"mheap\"></a>mheap</h3><p>内存分配的核心组件。包含mcentral和heapArena，堆上所有的mspan都是由mheap而来。</p>\n<ul>\n<li>allspans：已经分配的所有mspan</li>\n<li>arenas：heapArena数组，用于管理一个个内存块</li>\n<li>central：mcentral数组，用于管理对应spanclass的mspan</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Go的内存分配器根据对象的大小：分为微对象、小对象和大对象，分别采取不同的分配策略。</p>\n<p>总体分配流程：32KB以上的对象，直接从mheap中进行分配；小于等于16KB的对象从mcache中的微型分配器中进行分配；剩下的小对象的话，首先计算对象的大小，然后mcache分配对应规格的mspan，如果mcache中没有对应规格的mspan，就会向mcentral中申请，若mcentral中也没有，就会继续向mheap申请，如果mheap中也没有，就会向操作系统进行申请。</p>\n<h2 id=\"Golang-map实现原理\"><a href=\"#Golang-map实现原理\" class=\"headerlink\" title=\"Golang map实现原理\"></a>Golang map实现原理</h2><p>算法上基于hash实现key的映射和寻址；在数据结构上基于桶数组实现key-value对的存储。</p>\n<p>流程：</p>\n<ul>\n<li>通过hash取得key的hash值；</li>\n<li>hash值对数组长度取模，确定所属的桶；</li>\n<li>在桶中插入key-value对；</li>\n</ul>\n<p>hash的性质保证了相同的hash值必然会映射到同一个桶中，通过在桶中遍历确定对应的key-value对。控制每个桶中key-value对的数量，保证map的几项操作都限制在常数级别的时间复杂度内。</p>\n<p>map中，会对长度为2的整数次幂的桶数组进行key-value对的存储。每个桶固定存储8个kv对，当超过8个，就会创建桶链表。</p>\n<p>由于hash冲突的存在，不同的key值可能会映射到相同的桶。解决hash冲突的方法一般有两种：拉链法和开放寻址法。</p>\n<h3 id=\"拉链法\"><a href=\"#拉链法\" class=\"headerlink\" title=\"拉链法\"></a>拉链法</h3><p>将命中同一个桶中的元素通过链表的方式进行链接，便于动态扩展。</p>\n<h3 id=\"开放寻址法\"><a href=\"#开放寻址法\" class=\"headerlink\" title=\"开放寻址法\"></a>开放寻址法</h3><p>当再次命中同一个桶中是，会以一定的探测策略，寻找空闲的位置。</p>\n<p>Golang map在实现hash冲突时，结合了拉链法和开放寻址法两种。以写流程举例：</p>\n<ul>\n<li>桶数组中的每个桶，严格意义上讲是一个桶单链表，链表上的每个节点都是一个桶</li>\n<li>每个桶可以固定存储8个kv对</li>\n<li>当key命中一个桶时，首先根据开放寻址法找到一个空闲的位置，如果当前桶节点没有空闲位置，通过桶节点的溢出指针到达下一个桶节点，重复上一个步骤</li>\n<li>如果遍历到链表尾部仍然没有找到空闲位置，就新建一个桶节点，将kv对存储在其中</li>\n</ul>\n<h3 id=\"map扩容\"><a href=\"#map扩容\" class=\"headerlink\" title=\"map扩容\"></a>map扩容</h3><p>如果map中桶数组的长度不变的话，当插入的kv对达到一定数量的时候，每个索引下挂载的kv对数量就会过多，操作的常数时间复杂度就会逐渐退化成线性复杂度。此时就需要对桶数组进行扩容。</p>\n<p>map扩容机制核心包括：</p>\n<ul>\n<li>扩容分为增量扩容和等量扩容；</li>\n<li>当桶内kv总数/桶数组的长度 &gt; 6.5时发生增量扩容，桶数组的长度增长为原值的两倍；</li>\n<li>当桶内溢出桶的数量大于等于2^B时（B为桶数组长度的指数，因为是2的整数次幂），发生等量扩容，桶的长度保持为原值；</li>\n<li>采用渐进扩容，当桶被实际操作时，由使用者完成数据迁移，避免一次性的全量数据迁移导致的性能抖动；</li>\n</ul>\n<h2 id=\"Golang-channel实现原理\"><a href=\"#Golang-channel实现原理\" class=\"headerlink\" title=\"Golang channel实现原理\"></a>Golang channel实现原理</h2><p>Golang channel底层的核心数据结构包括一个环形数组（维护两个指针：一个是写入时的index，一个是读取时的index）、一个阻塞的读协程队列、一个阻塞的写协程队列（双向链表）。</p>\n<p>根据类型，channel分为无缓冲型、有缓冲元素为struct型、有缓冲元素为pointer型。</p>\n<ul>\n<li>如果是无缓冲型，仅申请一个大小为默认值96的空间；</li>\n<li>如果是有缓冲的struct型，一次性分配好96 + mem大小的空间，并且调整chan的buf（环形数组）指向mem的起始位置；</li>\n<li>如果是有缓冲的pointer型，分别申请chan和buf的空间，两者无需连续；</li>\n</ul>\n<h3 id=\"写流程\"><a href=\"#写流程\" class=\"headerlink\" title=\"写流程\"></a>写流程</h3><p>针对写操作，对于未初始化的channel，写入操作会发生死锁，对于已经关闭的channel，写入操作会导致panic。</p>\n<p>如果写时存在阻塞读协程（说明channel当前为空），首先加锁，然后从阻塞读协程队列中取出一个goroutine的封装对象，再者会基于memmove方法，将写入元素直接拷贝给对应取出的goroutine，然后解锁，最后唤醒阻塞的读协程。</p>\n<p>如果写时无阻塞读协程但环形缓冲区仍有空间，加锁，将当前写入元素添加到环形缓冲区当中对应的位置（有特定的维护的index），然后将index后移，解锁，返回。</p>\n<p>如果写时无阻塞读协程且环形缓冲区无空闲空间，加锁，构造封装当前goroutine的对象，将当前对象添加到当前channel的阻塞写协程队列中，然后挂起当前协程，如果协程被唤醒，（说明有对应读协程），最后解锁。</p>\n<h3 id=\"读流程\"><a href=\"#读流程\" class=\"headerlink\" title=\"读流程\"></a>读流程</h3><p>如果读空channel，会挂起，引发死锁。</p>\n<p>如果channel已经关闭，并且内部没有元素，直接解锁返回即可</p>\n<p>如果读时有阻塞的写协程（说明当前的环形缓冲区已满或无缓冲），首先加锁，然后从写阻塞队列中获取一个写协程，如果无缓冲区，直接读取写协程的元素，唤醒写协程，如果存在缓冲区，则读取缓冲区头部的元素，再将写协程的元素添加到环形缓冲区的尾部并唤醒写协程，最后解锁返回。</p>\n<p>如果读时无阻塞写协程且缓冲区有元素，加锁，获得缓冲区首部元素，将index++，解锁返回。</p>\n<p>如果读时无阻塞写协程且缓冲区无元素，加锁，构造当前读goroutine的对象，添加到读阻塞协程队列，挂起当前协程，（如果协程从挂起状态中被唤醒，说明有元素写入），最后解锁。</p>\n<h3 id=\"非阻塞模式\"><a href=\"#非阻塞模式\" class=\"headerlink\" title=\"非阻塞模式\"></a>非阻塞模式</h3><p>非阻塞模式下，读/写channel方法通过一个bool型的响应参数，用来标识是否读取/写入成功。</p>\n<ul>\n<li>所有使得当前goroutine被挂起的操作，在非阻塞模式下都会返回false；</li>\n<li>所有使得当前goroutine会进入死锁的操作，在非阻塞模式下都会返回false；</li>\n<li>所有能立即完成读取/写入操作的条件下，非阻塞模式下会返回true；</li>\n</ul>\n<p>只有在select语句组成的多路复用分支中，与channel的交互会变成非阻塞模式。</p>\n<h2 id=\"Golang-new和make的区别\"><a href=\"#Golang-new和make的区别\" class=\"headerlink\" title=\"Golang new和make的区别\"></a>Golang new和make的区别</h2><p>new可以创建任何类型的变量，而make指可以创建引用类型（如切片、映射、通道）的变量，这是因为make会对变量进行初始化，而new不会。</p>\n<p>new总是返回一个指向新内存的指针，而make返回的是引用类型的实例，即已经初始化后的变量。</p>\n<p>new分配的内存会进行零值初始化，这意味着对于非指针类型，new返回的是该类型的零值，对于指针类型，new返回的是空指针。而make会为引用类型分配内存并初始化，例如为切片分配初始长度和容量，为映射分配哈希表等。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"Golang内存模型\"><a href=\"#Golang内存模型\" class=\"headerlink\" title=\"Golang内存模型\"></a>Golang内存模型</h2><p>golang内存分配参考了tcmalloc的思路，即thread cache malloc。tcmalloc分为ThreadCache、CentralCache和PageHeap三个层次。</p>\n<p>ThreadCache是对每一个线程的缓存，分配时不需要加锁，因为是每一个线程独有的，速度较快。其对每一个size class维护一个freeList，缓存没有被分配的空闲对象。</p>\n<p>CentralCache也对每个size class维护一个freeList，但是是被多个线程共享的，分配时需要加锁。</p>\n<p>当CentralCache不够分配时，就会像PageHeap申请内存，这部分内存可能来自PageHeap的缓存，也有可能是PageHeap向操作系统申请的新内存。</p>\n<p>tcmalloc减少了在多线程的环境下，争夺锁所产生的开销，原因主要有二：1、在ThreadCache层面，此时是被每个线程单独占有的，不需要申请锁，加快了速度；2、由于是一次性向操作系统申请了一大块内存，就不需要频繁的系统调用来申请内存（系统调用需要上下文切换，开销比价大），加快了内存分配的效率。</p>\n<p>Golang内存管理组件主要包括mspan、mcache、mcentral、mheap。</p>\n<p>当程序初始化的时候，每个processor会给微对象和小对象分配mcache，其中包含内存管理单元mspan。内存管理单元分为很多特定大小的类（从8B到32KB），当向mcache中内存大小不够的时候，就会向mcentral中申请内存，mcentral就会根据对应的mspan的类型进行分配。mcentral又属于mheap，mheap负责向操作系统申请内存。</p>\n<h3 id=\"mspan\"><a href=\"#mspan\" class=\"headerlink\" title=\"mspan\"></a>mspan</h3><p>mspan是Golang内存分配的基本单元。有67种类型。</p>\n<ul>\n<li>微对象。大小为（0， 16B），会先从微型分配器中分配，再依次尝试mcache、mcentral、mheap</li>\n<li>小对象。大小为【16B、32KB】，申请顺序依次为mcache、mcentral、mheap</li>\n<li>大对象。大小32KB以上，直接在mheap上分配</li>\n</ul>\n<p>mspan结构体中包含prev和next两个指针，用于访问双向链表中的前驱和后继节点（指的是在freeList中）</p>\n<p>span直译为跨度，可以理解为一段连续的内存。mspan包含多个大小为8KB的页，这里的页并非操作系统中的页，是它们大小的整数倍。</p>\n<p>结构体中还包含spanclass字段，用来表示mspan的类型和大小，go中一共有67种span类型，每个spanclass存储特定大小的对象，所有的数据会预先计算出来并存储下来，便于查找，以空间换时间。除开这67种spanclass，还有0号spanclass，用来管理大于32KB的对象。</p>\n<h3 id=\"mcache\"><a href=\"#mcache\" class=\"headerlink\" title=\"mcache\"></a>mcache</h3><p>go中的线程缓存，其与go中的processor绑定，每个线程都会分配一个mcache处理微对象和小对象，是每个线程独有的，不需要加锁。   </p>\n<p>mcache在初始化时不包含mspan，只有当第一次申请内存时，会向上一级组件申请获得mspan</p>\n<h3 id=\"mcentral\"><a href=\"#mcentral\" class=\"headerlink\" title=\"mcentral\"></a>mcentral</h3><p>是Golang中的中心缓存，和mcache的区别是被多个线程共享，访问mcentral中的内存管理单元需要使用互斥锁。</p>\n<p>每个mcentral会管理某个spanclass的内存管理单元，会分为两类，一个是包含空闲对象的内存管理单元，一个是不包含空闲管理对象的内存管理单元。</p>\n<h3 id=\"mheap\"><a href=\"#mheap\" class=\"headerlink\" title=\"mheap\"></a>mheap</h3><p>内存分配的核心组件。包含mcentral和heapArena，堆上所有的mspan都是由mheap而来。</p>\n<ul>\n<li>allspans：已经分配的所有mspan</li>\n<li>arenas：heapArena数组，用于管理一个个内存块</li>\n<li>central：mcentral数组，用于管理对应spanclass的mspan</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Go的内存分配器根据对象的大小：分为微对象、小对象和大对象，分别采取不同的分配策略。</p>\n<p>总体分配流程：32KB以上的对象，直接从mheap中进行分配；小于等于16KB的对象从mcache中的微型分配器中进行分配；剩下的小对象的话，首先计算对象的大小，然后mcache分配对应规格的mspan，如果mcache中没有对应规格的mspan，就会向mcentral中申请，若mcentral中也没有，就会继续向mheap申请，如果mheap中也没有，就会向操作系统进行申请。</p>\n<h2 id=\"Golang-map实现原理\"><a href=\"#Golang-map实现原理\" class=\"headerlink\" title=\"Golang map实现原理\"></a>Golang map实现原理</h2><p>算法上基于hash实现key的映射和寻址；在数据结构上基于桶数组实现key-value对的存储。</p>\n<p>流程：</p>\n<ul>\n<li>通过hash取得key的hash值；</li>\n<li>hash值对数组长度取模，确定所属的桶；</li>\n<li>在桶中插入key-value对；</li>\n</ul>\n<p>hash的性质保证了相同的hash值必然会映射到同一个桶中，通过在桶中遍历确定对应的key-value对。控制每个桶中key-value对的数量，保证map的几项操作都限制在常数级别的时间复杂度内。</p>\n<p>map中，会对长度为2的整数次幂的桶数组进行key-value对的存储。每个桶固定存储8个kv对，当超过8个，就会创建桶链表。</p>\n<p>由于hash冲突的存在，不同的key值可能会映射到相同的桶。解决hash冲突的方法一般有两种：拉链法和开放寻址法。</p>\n<h3 id=\"拉链法\"><a href=\"#拉链法\" class=\"headerlink\" title=\"拉链法\"></a>拉链法</h3><p>将命中同一个桶中的元素通过链表的方式进行链接，便于动态扩展。</p>\n<h3 id=\"开放寻址法\"><a href=\"#开放寻址法\" class=\"headerlink\" title=\"开放寻址法\"></a>开放寻址法</h3><p>当再次命中同一个桶中是，会以一定的探测策略，寻找空闲的位置。</p>\n<p>Golang map在实现hash冲突时，结合了拉链法和开放寻址法两种。以写流程举例：</p>\n<ul>\n<li>桶数组中的每个桶，严格意义上讲是一个桶单链表，链表上的每个节点都是一个桶</li>\n<li>每个桶可以固定存储8个kv对</li>\n<li>当key命中一个桶时，首先根据开放寻址法找到一个空闲的位置，如果当前桶节点没有空闲位置，通过桶节点的溢出指针到达下一个桶节点，重复上一个步骤</li>\n<li>如果遍历到链表尾部仍然没有找到空闲位置，就新建一个桶节点，将kv对存储在其中</li>\n</ul>\n<h3 id=\"map扩容\"><a href=\"#map扩容\" class=\"headerlink\" title=\"map扩容\"></a>map扩容</h3><p>如果map中桶数组的长度不变的话，当插入的kv对达到一定数量的时候，每个索引下挂载的kv对数量就会过多，操作的常数时间复杂度就会逐渐退化成线性复杂度。此时就需要对桶数组进行扩容。</p>\n<p>map扩容机制核心包括：</p>\n<ul>\n<li>扩容分为增量扩容和等量扩容；</li>\n<li>当桶内kv总数/桶数组的长度 &gt; 6.5时发生增量扩容，桶数组的长度增长为原值的两倍；</li>\n<li>当桶内溢出桶的数量大于等于2^B时（B为桶数组长度的指数，因为是2的整数次幂），发生等量扩容，桶的长度保持为原值；</li>\n<li>采用渐进扩容，当桶被实际操作时，由使用者完成数据迁移，避免一次性的全量数据迁移导致的性能抖动；</li>\n</ul>\n<h2 id=\"Golang-channel实现原理\"><a href=\"#Golang-channel实现原理\" class=\"headerlink\" title=\"Golang channel实现原理\"></a>Golang channel实现原理</h2><p>Golang channel底层的核心数据结构包括一个环形数组（维护两个指针：一个是写入时的index，一个是读取时的index）、一个阻塞的读协程队列、一个阻塞的写协程队列（双向链表）。</p>\n<p>根据类型，channel分为无缓冲型、有缓冲元素为struct型、有缓冲元素为pointer型。</p>\n<ul>\n<li>如果是无缓冲型，仅申请一个大小为默认值96的空间；</li>\n<li>如果是有缓冲的struct型，一次性分配好96 + mem大小的空间，并且调整chan的buf（环形数组）指向mem的起始位置；</li>\n<li>如果是有缓冲的pointer型，分别申请chan和buf的空间，两者无需连续；</li>\n</ul>\n<h3 id=\"写流程\"><a href=\"#写流程\" class=\"headerlink\" title=\"写流程\"></a>写流程</h3><p>针对写操作，对于未初始化的channel，写入操作会发生死锁，对于已经关闭的channel，写入操作会导致panic。</p>\n<p>如果写时存在阻塞读协程（说明channel当前为空），首先加锁，然后从阻塞读协程队列中取出一个goroutine的封装对象，再者会基于memmove方法，将写入元素直接拷贝给对应取出的goroutine，然后解锁，最后唤醒阻塞的读协程。</p>\n<p>如果写时无阻塞读协程但环形缓冲区仍有空间，加锁，将当前写入元素添加到环形缓冲区当中对应的位置（有特定的维护的index），然后将index后移，解锁，返回。</p>\n<p>如果写时无阻塞读协程且环形缓冲区无空闲空间，加锁，构造封装当前goroutine的对象，将当前对象添加到当前channel的阻塞写协程队列中，然后挂起当前协程，如果协程被唤醒，（说明有对应读协程），最后解锁。</p>\n<h3 id=\"读流程\"><a href=\"#读流程\" class=\"headerlink\" title=\"读流程\"></a>读流程</h3><p>如果读空channel，会挂起，引发死锁。</p>\n<p>如果channel已经关闭，并且内部没有元素，直接解锁返回即可</p>\n<p>如果读时有阻塞的写协程（说明当前的环形缓冲区已满或无缓冲），首先加锁，然后从写阻塞队列中获取一个写协程，如果无缓冲区，直接读取写协程的元素，唤醒写协程，如果存在缓冲区，则读取缓冲区头部的元素，再将写协程的元素添加到环形缓冲区的尾部并唤醒写协程，最后解锁返回。</p>\n<p>如果读时无阻塞写协程且缓冲区有元素，加锁，获得缓冲区首部元素，将index++，解锁返回。</p>\n<p>如果读时无阻塞写协程且缓冲区无元素，加锁，构造当前读goroutine的对象，添加到读阻塞协程队列，挂起当前协程，（如果协程从挂起状态中被唤醒，说明有元素写入），最后解锁。</p>\n<h3 id=\"非阻塞模式\"><a href=\"#非阻塞模式\" class=\"headerlink\" title=\"非阻塞模式\"></a>非阻塞模式</h3><p>非阻塞模式下，读/写channel方法通过一个bool型的响应参数，用来标识是否读取/写入成功。</p>\n<ul>\n<li>所有使得当前goroutine被挂起的操作，在非阻塞模式下都会返回false；</li>\n<li>所有使得当前goroutine会进入死锁的操作，在非阻塞模式下都会返回false；</li>\n<li>所有能立即完成读取/写入操作的条件下，非阻塞模式下会返回true；</li>\n</ul>\n<p>只有在select语句组成的多路复用分支中，与channel的交互会变成非阻塞模式。</p>\n<h2 id=\"Golang-new和make的区别\"><a href=\"#Golang-new和make的区别\" class=\"headerlink\" title=\"Golang new和make的区别\"></a>Golang new和make的区别</h2><p>new可以创建任何类型的变量，而make指可以创建引用类型（如切片、映射、通道）的变量，这是因为make会对变量进行初始化，而new不会。</p>\n<p>new总是返回一个指向新内存的指针，而make返回的是引用类型的实例，即已经初始化后的变量。</p>\n<p>new分配的内存会进行零值初始化，这意味着对于非指针类型，new返回的是该类型的零值，对于指针类型，new返回的是空指针。而make会为引用类型分配内存并初始化，例如为切片分配初始长度和容量，为映射分配哈希表等。</p>\n"},{"title":"redis知识点总结","date":"2024-02-01T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n## redis简介\n&emsp;&emsp;redis是一种基于内存的数据库。\n\n## redis如何避免缓存雪崩、击穿、穿透？\n1、 缓存雪崩\n\n&emsp;&emsp;通常为了保持缓存和数据库中数据的一致性。会给缓存中的key设置过期时间。当缓存数据过期后，用户访问的数据不在缓存中，就会去访问数据库，然后将数据更新到redis，使得后续能够直接命中缓存。\n\n&emsp;&emsp;当大量缓存数据在同一时间失效，这时如果有大量的用户请求过来，都无法在redis中命中，这些请求只能都去访问数据库，极大加重数据库的压力，严重的话可能导致数据库崩溃，导致整个系统瘫痪，这样的问题称作缓存雪崩。\n\n针对缓存崩溃问题，一般有两种解决方案：\n- 随机化缓存时间。这样可以降低集体缓存数据过期的概率\n- 设置缓存不过期。通过后台服务来更新缓存，这样缓存不会过期，也就不会导致缓存雪崩\n\n2、缓存击穿\n\n&emsp;&emsp;当热点数据过期，然后大量的用户请求该热点数据，此时无法在缓存中命中，就会转去访问数据库，数据库很容易被高并发的请求冲垮，这就是缓存击穿的问题。\n\n解决方案：\n- 互斥锁，保证同一时刻只有一个业务线程请求缓存，如果本次未能获取锁，要么等待锁释放再访问缓存，要么直接返回空值或者默认值。\n- 不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据要过期之前通知后台线程更新缓存以及重新设立过期时间。\n\n3、 缓存穿透\n\n&emsp;&emsp;当发生上述两种情况，数据库中仍然持有要访问的数据，一旦缓存中重新恢复数据，数据库的压力就会减轻。\n\n假设一种情况，当访问的数据既不在缓存中，也不在数据库中，这时如果有大量类似的请求过来，数据库的压力就会骤增，这就是缓存穿透的问题。\n\n针对缓存穿透问题，一般有三种解决方案：\n- 限制非法访问请求。在API入口处对请求参数进行检查，如果判断是恶意请求就直接返回错误，避免访问缓存和数据库\n- 设置空值或者默认值。当发现缓存穿透的问题时，可以针对查询的数据，在缓存中设置空值或者默认值，这样后续请求就可以读到空值或者默认值返回给应用，而不会继续查询数据库\n- 使用布隆过滤器。可以在写入数据库时布隆过滤器用来判断数据是否存在（假阳性）。这样即使发生了缓存穿透，也只是对缓存和布隆过滤器的大量访问，而不会涉及到大量查询数据库的操作，进而避免了缓存穿透。同时，redis本身也是支持布隆过滤器的。\n\n## redis中的缓存更新策略\nredis中使用Cache Aside策略。应用程序直接与缓存和数据库进行交互，负责维护缓存，该策略可以细分为读策略和写策略。\n\n写策略：\n- 先更新数据库中的数据\n- 再删除缓存中的数据\n\n读策略：\n- 读取的数据直接命中缓存，直接返回\n- 未命中，从数据库中读数据，然后写回缓存，并返回给用户\n\nCache Aside适合读多写少的场景","source":"_posts/redis.md","raw":"---\ntitle: redis知识点总结\ndate: 2024-2-1 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: redis\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n## redis简介\n&emsp;&emsp;redis是一种基于内存的数据库。\n\n## redis如何避免缓存雪崩、击穿、穿透？\n1、 缓存雪崩\n\n&emsp;&emsp;通常为了保持缓存和数据库中数据的一致性。会给缓存中的key设置过期时间。当缓存数据过期后，用户访问的数据不在缓存中，就会去访问数据库，然后将数据更新到redis，使得后续能够直接命中缓存。\n\n&emsp;&emsp;当大量缓存数据在同一时间失效，这时如果有大量的用户请求过来，都无法在redis中命中，这些请求只能都去访问数据库，极大加重数据库的压力，严重的话可能导致数据库崩溃，导致整个系统瘫痪，这样的问题称作缓存雪崩。\n\n针对缓存崩溃问题，一般有两种解决方案：\n- 随机化缓存时间。这样可以降低集体缓存数据过期的概率\n- 设置缓存不过期。通过后台服务来更新缓存，这样缓存不会过期，也就不会导致缓存雪崩\n\n2、缓存击穿\n\n&emsp;&emsp;当热点数据过期，然后大量的用户请求该热点数据，此时无法在缓存中命中，就会转去访问数据库，数据库很容易被高并发的请求冲垮，这就是缓存击穿的问题。\n\n解决方案：\n- 互斥锁，保证同一时刻只有一个业务线程请求缓存，如果本次未能获取锁，要么等待锁释放再访问缓存，要么直接返回空值或者默认值。\n- 不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据要过期之前通知后台线程更新缓存以及重新设立过期时间。\n\n3、 缓存穿透\n\n&emsp;&emsp;当发生上述两种情况，数据库中仍然持有要访问的数据，一旦缓存中重新恢复数据，数据库的压力就会减轻。\n\n假设一种情况，当访问的数据既不在缓存中，也不在数据库中，这时如果有大量类似的请求过来，数据库的压力就会骤增，这就是缓存穿透的问题。\n\n针对缓存穿透问题，一般有三种解决方案：\n- 限制非法访问请求。在API入口处对请求参数进行检查，如果判断是恶意请求就直接返回错误，避免访问缓存和数据库\n- 设置空值或者默认值。当发现缓存穿透的问题时，可以针对查询的数据，在缓存中设置空值或者默认值，这样后续请求就可以读到空值或者默认值返回给应用，而不会继续查询数据库\n- 使用布隆过滤器。可以在写入数据库时布隆过滤器用来判断数据是否存在（假阳性）。这样即使发生了缓存穿透，也只是对缓存和布隆过滤器的大量访问，而不会涉及到大量查询数据库的操作，进而避免了缓存穿透。同时，redis本身也是支持布隆过滤器的。\n\n## redis中的缓存更新策略\nredis中使用Cache Aside策略。应用程序直接与缓存和数据库进行交互，负责维护缓存，该策略可以细分为读策略和写策略。\n\n写策略：\n- 先更新数据库中的数据\n- 再删除缓存中的数据\n\n读策略：\n- 读取的数据直接命中缓存，直接返回\n- 未命中，从数据库中读数据，然后写回缓存，并返回给用户\n\nCache Aside适合读多写少的场景","slug":"redis","published":1,"updated":"2024-03-25T06:45:56.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsos000ay0vmd1pqbu7z","content":"<h2 id=\"redis简介\"><a href=\"#redis简介\" class=\"headerlink\" title=\"redis简介\"></a>redis简介</h2><p>&emsp;&emsp;redis是一种基于内存的数据库。</p>\n<h2 id=\"redis如何避免缓存雪崩、击穿、穿透？\"><a href=\"#redis如何避免缓存雪崩、击穿、穿透？\" class=\"headerlink\" title=\"redis如何避免缓存雪崩、击穿、穿透？\"></a>redis如何避免缓存雪崩、击穿、穿透？</h2><p>1、 缓存雪崩</p>\n<p>&emsp;&emsp;通常为了保持缓存和数据库中数据的一致性。会给缓存中的key设置过期时间。当缓存数据过期后，用户访问的数据不在缓存中，就会去访问数据库，然后将数据更新到redis，使得后续能够直接命中缓存。</p>\n<p>&emsp;&emsp;当大量缓存数据在同一时间失效，这时如果有大量的用户请求过来，都无法在redis中命中，这些请求只能都去访问数据库，极大加重数据库的压力，严重的话可能导致数据库崩溃，导致整个系统瘫痪，这样的问题称作缓存雪崩。</p>\n<p>针对缓存崩溃问题，一般有两种解决方案：</p>\n<ul>\n<li>随机化缓存时间。这样可以降低集体缓存数据过期的概率</li>\n<li>设置缓存不过期。通过后台服务来更新缓存，这样缓存不会过期，也就不会导致缓存雪崩</li>\n</ul>\n<p>2、缓存击穿</p>\n<p>&emsp;&emsp;当热点数据过期，然后大量的用户请求该热点数据，此时无法在缓存中命中，就会转去访问数据库，数据库很容易被高并发的请求冲垮，这就是缓存击穿的问题。</p>\n<p>解决方案：</p>\n<ul>\n<li>互斥锁，保证同一时刻只有一个业务线程请求缓存，如果本次未能获取锁，要么等待锁释放再访问缓存，要么直接返回空值或者默认值。</li>\n<li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据要过期之前通知后台线程更新缓存以及重新设立过期时间。</li>\n</ul>\n<p>3、 缓存穿透</p>\n<p>&emsp;&emsp;当发生上述两种情况，数据库中仍然持有要访问的数据，一旦缓存中重新恢复数据，数据库的压力就会减轻。</p>\n<p>假设一种情况，当访问的数据既不在缓存中，也不在数据库中，这时如果有大量类似的请求过来，数据库的压力就会骤增，这就是缓存穿透的问题。</p>\n<p>针对缓存穿透问题，一般有三种解决方案：</p>\n<ul>\n<li>限制非法访问请求。在API入口处对请求参数进行检查，如果判断是恶意请求就直接返回错误，避免访问缓存和数据库</li>\n<li>设置空值或者默认值。当发现缓存穿透的问题时，可以针对查询的数据，在缓存中设置空值或者默认值，这样后续请求就可以读到空值或者默认值返回给应用，而不会继续查询数据库</li>\n<li>使用布隆过滤器。可以在写入数据库时布隆过滤器用来判断数据是否存在（假阳性）。这样即使发生了缓存穿透，也只是对缓存和布隆过滤器的大量访问，而不会涉及到大量查询数据库的操作，进而避免了缓存穿透。同时，redis本身也是支持布隆过滤器的。</li>\n</ul>\n<h2 id=\"redis中的缓存更新策略\"><a href=\"#redis中的缓存更新策略\" class=\"headerlink\" title=\"redis中的缓存更新策略\"></a>redis中的缓存更新策略</h2><p>redis中使用Cache Aside策略。应用程序直接与缓存和数据库进行交互，负责维护缓存，该策略可以细分为读策略和写策略。</p>\n<p>写策略：</p>\n<ul>\n<li>先更新数据库中的数据</li>\n<li>再删除缓存中的数据</li>\n</ul>\n<p>读策略：</p>\n<ul>\n<li>读取的数据直接命中缓存，直接返回</li>\n<li>未命中，从数据库中读数据，然后写回缓存，并返回给用户</li>\n</ul>\n<p>Cache Aside适合读多写少的场景</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h2 id=\"redis简介\"><a href=\"#redis简介\" class=\"headerlink\" title=\"redis简介\"></a>redis简介</h2><p>&emsp;&emsp;redis是一种基于内存的数据库。</p>\n<h2 id=\"redis如何避免缓存雪崩、击穿、穿透？\"><a href=\"#redis如何避免缓存雪崩、击穿、穿透？\" class=\"headerlink\" title=\"redis如何避免缓存雪崩、击穿、穿透？\"></a>redis如何避免缓存雪崩、击穿、穿透？</h2><p>1、 缓存雪崩</p>\n<p>&emsp;&emsp;通常为了保持缓存和数据库中数据的一致性。会给缓存中的key设置过期时间。当缓存数据过期后，用户访问的数据不在缓存中，就会去访问数据库，然后将数据更新到redis，使得后续能够直接命中缓存。</p>\n<p>&emsp;&emsp;当大量缓存数据在同一时间失效，这时如果有大量的用户请求过来，都无法在redis中命中，这些请求只能都去访问数据库，极大加重数据库的压力，严重的话可能导致数据库崩溃，导致整个系统瘫痪，这样的问题称作缓存雪崩。</p>\n<p>针对缓存崩溃问题，一般有两种解决方案：</p>\n<ul>\n<li>随机化缓存时间。这样可以降低集体缓存数据过期的概率</li>\n<li>设置缓存不过期。通过后台服务来更新缓存，这样缓存不会过期，也就不会导致缓存雪崩</li>\n</ul>\n<p>2、缓存击穿</p>\n<p>&emsp;&emsp;当热点数据过期，然后大量的用户请求该热点数据，此时无法在缓存中命中，就会转去访问数据库，数据库很容易被高并发的请求冲垮，这就是缓存击穿的问题。</p>\n<p>解决方案：</p>\n<ul>\n<li>互斥锁，保证同一时刻只有一个业务线程请求缓存，如果本次未能获取锁，要么等待锁释放再访问缓存，要么直接返回空值或者默认值。</li>\n<li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据要过期之前通知后台线程更新缓存以及重新设立过期时间。</li>\n</ul>\n<p>3、 缓存穿透</p>\n<p>&emsp;&emsp;当发生上述两种情况，数据库中仍然持有要访问的数据，一旦缓存中重新恢复数据，数据库的压力就会减轻。</p>\n<p>假设一种情况，当访问的数据既不在缓存中，也不在数据库中，这时如果有大量类似的请求过来，数据库的压力就会骤增，这就是缓存穿透的问题。</p>\n<p>针对缓存穿透问题，一般有三种解决方案：</p>\n<ul>\n<li>限制非法访问请求。在API入口处对请求参数进行检查，如果判断是恶意请求就直接返回错误，避免访问缓存和数据库</li>\n<li>设置空值或者默认值。当发现缓存穿透的问题时，可以针对查询的数据，在缓存中设置空值或者默认值，这样后续请求就可以读到空值或者默认值返回给应用，而不会继续查询数据库</li>\n<li>使用布隆过滤器。可以在写入数据库时布隆过滤器用来判断数据是否存在（假阳性）。这样即使发生了缓存穿透，也只是对缓存和布隆过滤器的大量访问，而不会涉及到大量查询数据库的操作，进而避免了缓存穿透。同时，redis本身也是支持布隆过滤器的。</li>\n</ul>\n<h2 id=\"redis中的缓存更新策略\"><a href=\"#redis中的缓存更新策略\" class=\"headerlink\" title=\"redis中的缓存更新策略\"></a>redis中的缓存更新策略</h2><p>redis中使用Cache Aside策略。应用程序直接与缓存和数据库进行交互，负责维护缓存，该策略可以细分为读策略和写策略。</p>\n<p>写策略：</p>\n<ul>\n<li>先更新数据库中的数据</li>\n<li>再删除缓存中的数据</li>\n</ul>\n<p>读策略：</p>\n<ul>\n<li>读取的数据直接命中缓存，直接返回</li>\n<li>未命中，从数据库中读数据，然后写回缓存，并返回给用户</li>\n</ul>\n<p>Cache Aside适合读多写少的场景</p>\n"},{"title":"Raft论文笔记","date":"2024-02-01T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n### 前置知识\n组织机器使其状态达成一致并允许局部失败的算法称为一致性算法。目的是为了保证集群中所有节点状态一致。\n对节点的指令分为两种：读和写，只有写操作会改变节点的状态，所以为了一致，要把写指令同步给所有节点。\n\n\n\n","source":"_posts/raft.md","raw":"---\ntitle: Raft论文笔记\ndate: 2024-2-1 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: 分布式系统、一致性算法\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n### 前置知识\n组织机器使其状态达成一致并允许局部失败的算法称为一致性算法。目的是为了保证集群中所有节点状态一致。\n对节点的指令分为两种：读和写，只有写操作会改变节点的状态，所以为了一致，要把写指令同步给所有节点。\n\n\n\n","slug":"raft","published":1,"updated":"2024-03-07T15:17:50.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsou000ey0vma1i7dknx","content":"<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>组织机器使其状态达成一致并允许局部失败的算法称为一致性算法。目的是为了保证集群中所有节点状态一致。<br>对节点的指令分为两种：读和写，只有写操作会改变节点的状态，所以为了一致，要把写指令同步给所有节点。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>组织机器使其状态达成一致并允许局部失败的算法称为一致性算法。目的是为了保证集群中所有节点状态一致。<br>对节点的指令分为两种：读和写，只有写操作会改变节点的状态，所以为了一致，要把写指令同步给所有节点。</p>\n"},{"title":"array","date":"2023-08-19T14:19:00.000Z","update":"2023-08-19T14:19:00.000Z","description":"数组专题","cover":"https://images7.alphacoders.com/132/thumbbig-1320332.webp","_content":"\n数组是存放在连续内存空间上的相同类型数据的集合\n\nvector底层实现是array，严格讲vector是容器而不是数组\n\n数组元素不能删除，只能覆盖\n\nc++中二维数组在地址空间上是连续的\n\n\n\n### 一、二分查找\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n第一种写法：（左闭右闭）\n\n```c++\nclass solution{\n    public:\n    \tint search(vector<int>& nums,int target){\n            int left = 0;\n            int right = nums.size() - 1;\n            while(left <= right){//左闭右闭区间，允许left=right\n                int middle = (left + right) / 2;\n                if(nums[middle] > target){//target在左区间，[left,middle-1]\n                    right = middle - 1;\n                }else if(nums[middle] < target){//target在右区间,[middle+1,right]\n                    left = middle + 1;\n                }else{//target在middle处\n                    return middle;\n                }\n            }\n            return -1;//目标值不存在\n        }\n};\n```\n\n第二种写法：（左闭右开）\n\n```c++\nclass solution{\n    public:\n    \tint search(vector<int>& nums,int target){\n            int left = 0;\n            int right = nums.size() - 1;\n            while(left < right){\n                int middle = (left + right) / 2;\n                if(nums[middle] > target){\n                    right = middle;//唯一不同之处在于target位于[left,middle)\n                }else if(nums[middle] < target){//[middle+1,right)\n                    left = middle + 1; \n                }else{\n                    return middle;\n                }\n            }\n            return -1;\n        }\n};\n```\n\n区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。\n\n\n\n### 二、移除元素\n\n给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n暴力解法：\n\n```c++\nclass solution{\n    public:\n    \tint removeElement(vector<int>& nums,int val){\n            int size = nums.size();\n            for(int i = 0;i < size;i ++){//遍历数组\n                if(nums[i] == val){\n                    for(int j = i;j < size - 1;j ++){//执行移动操作\n                        nums[j] = nums[j + 1];//后面元素覆盖前一个元素\n                    }\n                }\n                i --;//i下标后所有元素向前移动一位，i先减再加保持位置不变\n                size --;//数组大小减一\n            }\n            return size;\n        }\n};\n```\n\n###  双指针法\n\n通过一个快指针和一个慢指针在一个for循环下完成两个for循环的工作\n\n* 快指针：寻找新数组的元素，新数组就是不包含目标值的数组\n* 慢指针：指向更新 新数组下标的位置\n\n```c++\nclass solution{\n    public:\n    \tint removeElement(vector<int>& nums,int val){\n            int slowIndex = 0;\n            for(int fastIndex = 0;fastIndex < nums.size();fastIndex ++){\n                if(nums[fastIndex] != val){//快指针指向新数组值\n                    nums[slowIndex] = nums[fastIndex];//将值赋给慢指针所指下标\n                    slowIndex ++;//慢指针向右移动一位\n                }\n            }\n            return slowIndex;//删除完毕后慢指针下标所指值正好为新数组大小\n        }\n};\n```\n\n\n\n### 三、有序数组的平方\n\n给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\n\n示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]\n\n示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]\n\n暴力解法：(每个数平方之后排序)\n\n```c++\nclass solution{\n    public:\n    \tvector<int> sortedSquare(vector<int>& nums){\n            for(int i = 0;i < nums.size();i ++){\n                nums[i] *= nums[i];\n            }\n            sort(nums.begin(),nums.end());\n            return nums;\n        }\n};\n```\n\n#### 双指针法\n\n```c++\nclass solution{\n    public:\n    \tvector<int> sortSquare(vector<int>& nums){\n            int size = nums.size();\n            vector<int> result(size,0);\n            int k = size - 1;\n            \n            for(int i = 0,j = size - 1;i <= j;){\n                if(nums[i] * nums[i] < nums[j] * nums[j]){\n                    result[k --] = nums[j] * nums[j];\n                    j --;\n                }else{\n                    result[k --] = nums[i] * nums[i];\n                    i ++;\n                }\n            }\n            return result;\n        }\n};\n```\n\n\n\n### 四、长度最小的子数组\n\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n暴力解法：\n\n两层for循环，找到符合条件的子序列\n\n```c++\nclass solution{\n    public:\n    \tminSubArrayLen(vector<int>& nums,int s){\n            int size = nums.size();\n            int result = INT_MAX;//记录最终结果\n           \tint subLen = 0;//记录子数组的长度\n            int sum = 0;//记录子数组和\n            for(int i = 0;i < size;i ++){//子数组初始位置i\n                sum = 0;//新子数组和要清零\n                for(int j = i;j < size;j ++){//子数组终止位置j\n                    sum += nums[j];\n                    if(sum >= s){\n                        subLen = j - i + 1;//子数组长度终止-初始+1\n                        result = result < subLen ? result : subLen;//保持结果长度最小\n                        break;\n                    }\n                }\n            }\n            return result == INT_MAX ? 0 : result;//result未被赋值则返回0\n        }\n};\n```\n\n#### 滑动窗口\n\n所谓滑动窗口，**就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果**。\n\n窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。\n\n窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。\n\n窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。\n\n\n\n动态调整子数组的初始位置：\n\n```c++\nwhile(sum >= s){\n\tsubLen = j - i + 1;//子数组长度\n    result = result < subLen ? result : subLen;\n    sum -= nums[i ++];//不断变更i（子数组的初始位置）\n}\n```\n\n```c++\nclass solution{\n    public:\n    \tint minSubArrayLen(vector<int>& nums,int s){\n            int result = INT_MAX;\n            int subLen = 0;\n            int sum = 0;\n            for(int i = 0,j = 0;j < nums.size();j ++){\n                sum += nums[j];//和<s，向新数组加元素\n                while(sum >= s){\n                    subLen = j - i + 1;//子数组长度\n                    result = result < subLen ? result : subLen;\n                    sum -= nums[i ++];//不断变更i（子数组的初始位置）\n                }\n            }\n            return result == INT_MAX ? 0 : result;\n        }\n};\n```\n\n\n\n### 螺旋矩阵\n\n给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。\n\n示例:\n\n输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]\n\n遵循循环不变量原则\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> generateMatrix(int n){\n            vector<vector<int>> res(n,vector<int>(n,0));\n            int startx = 0,starty = 0;\n            int loop = n / 2;\n            int mid = n / 2;\n            int count = 1;\n            int offset = 1;\n            int i,j;\n            while(loop --){\n                for(j = starty;j < n - offset;j ++){\n                    res[startx][j] = count ++;\n                }\n                \n                for(i = startx;i < n - offset;i ++){\n                    res[i][j] = count ++;\n                }\n                \n                for(;j > starty;j --){\n                    res[i][j] = count ++;\n                }\n                \n                for(;i > startx;i --){\n                    res[i][j] = count ++;\n                }\n                \n                startx ++;\n                starty ++;\n                offset ++;\n            }\n            if(n % 2 == 1){\n                res[mid][mid] = n * n;\n            }\n            return res;\n        }\n};\n```\n\n{% note default simple %}binary-tree{% endnote %}\n\n\n\n","source":"_posts/array.md","raw":"---\ntitle: array\ndate: 2023-8-19 22:19:00\nupdate: 2023-8-19 22:19:00\ndescription: 数组专题\ncover: https://images7.alphacoders.com/132/thumbbig-1320332.webp\ntags: \n    - 数据结构 \n    - 数组\n---\n\n数组是存放在连续内存空间上的相同类型数据的集合\n\nvector底层实现是array，严格讲vector是容器而不是数组\n\n数组元素不能删除，只能覆盖\n\nc++中二维数组在地址空间上是连续的\n\n\n\n### 一、二分查找\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n第一种写法：（左闭右闭）\n\n```c++\nclass solution{\n    public:\n    \tint search(vector<int>& nums,int target){\n            int left = 0;\n            int right = nums.size() - 1;\n            while(left <= right){//左闭右闭区间，允许left=right\n                int middle = (left + right) / 2;\n                if(nums[middle] > target){//target在左区间，[left,middle-1]\n                    right = middle - 1;\n                }else if(nums[middle] < target){//target在右区间,[middle+1,right]\n                    left = middle + 1;\n                }else{//target在middle处\n                    return middle;\n                }\n            }\n            return -1;//目标值不存在\n        }\n};\n```\n\n第二种写法：（左闭右开）\n\n```c++\nclass solution{\n    public:\n    \tint search(vector<int>& nums,int target){\n            int left = 0;\n            int right = nums.size() - 1;\n            while(left < right){\n                int middle = (left + right) / 2;\n                if(nums[middle] > target){\n                    right = middle;//唯一不同之处在于target位于[left,middle)\n                }else if(nums[middle] < target){//[middle+1,right)\n                    left = middle + 1; \n                }else{\n                    return middle;\n                }\n            }\n            return -1;\n        }\n};\n```\n\n区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。\n\n\n\n### 二、移除元素\n\n给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n暴力解法：\n\n```c++\nclass solution{\n    public:\n    \tint removeElement(vector<int>& nums,int val){\n            int size = nums.size();\n            for(int i = 0;i < size;i ++){//遍历数组\n                if(nums[i] == val){\n                    for(int j = i;j < size - 1;j ++){//执行移动操作\n                        nums[j] = nums[j + 1];//后面元素覆盖前一个元素\n                    }\n                }\n                i --;//i下标后所有元素向前移动一位，i先减再加保持位置不变\n                size --;//数组大小减一\n            }\n            return size;\n        }\n};\n```\n\n###  双指针法\n\n通过一个快指针和一个慢指针在一个for循环下完成两个for循环的工作\n\n* 快指针：寻找新数组的元素，新数组就是不包含目标值的数组\n* 慢指针：指向更新 新数组下标的位置\n\n```c++\nclass solution{\n    public:\n    \tint removeElement(vector<int>& nums,int val){\n            int slowIndex = 0;\n            for(int fastIndex = 0;fastIndex < nums.size();fastIndex ++){\n                if(nums[fastIndex] != val){//快指针指向新数组值\n                    nums[slowIndex] = nums[fastIndex];//将值赋给慢指针所指下标\n                    slowIndex ++;//慢指针向右移动一位\n                }\n            }\n            return slowIndex;//删除完毕后慢指针下标所指值正好为新数组大小\n        }\n};\n```\n\n\n\n### 三、有序数组的平方\n\n给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\n\n示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]\n\n示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]\n\n暴力解法：(每个数平方之后排序)\n\n```c++\nclass solution{\n    public:\n    \tvector<int> sortedSquare(vector<int>& nums){\n            for(int i = 0;i < nums.size();i ++){\n                nums[i] *= nums[i];\n            }\n            sort(nums.begin(),nums.end());\n            return nums;\n        }\n};\n```\n\n#### 双指针法\n\n```c++\nclass solution{\n    public:\n    \tvector<int> sortSquare(vector<int>& nums){\n            int size = nums.size();\n            vector<int> result(size,0);\n            int k = size - 1;\n            \n            for(int i = 0,j = size - 1;i <= j;){\n                if(nums[i] * nums[i] < nums[j] * nums[j]){\n                    result[k --] = nums[j] * nums[j];\n                    j --;\n                }else{\n                    result[k --] = nums[i] * nums[i];\n                    i ++;\n                }\n            }\n            return result;\n        }\n};\n```\n\n\n\n### 四、长度最小的子数组\n\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n暴力解法：\n\n两层for循环，找到符合条件的子序列\n\n```c++\nclass solution{\n    public:\n    \tminSubArrayLen(vector<int>& nums,int s){\n            int size = nums.size();\n            int result = INT_MAX;//记录最终结果\n           \tint subLen = 0;//记录子数组的长度\n            int sum = 0;//记录子数组和\n            for(int i = 0;i < size;i ++){//子数组初始位置i\n                sum = 0;//新子数组和要清零\n                for(int j = i;j < size;j ++){//子数组终止位置j\n                    sum += nums[j];\n                    if(sum >= s){\n                        subLen = j - i + 1;//子数组长度终止-初始+1\n                        result = result < subLen ? result : subLen;//保持结果长度最小\n                        break;\n                    }\n                }\n            }\n            return result == INT_MAX ? 0 : result;//result未被赋值则返回0\n        }\n};\n```\n\n#### 滑动窗口\n\n所谓滑动窗口，**就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果**。\n\n窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。\n\n窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。\n\n窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。\n\n\n\n动态调整子数组的初始位置：\n\n```c++\nwhile(sum >= s){\n\tsubLen = j - i + 1;//子数组长度\n    result = result < subLen ? result : subLen;\n    sum -= nums[i ++];//不断变更i（子数组的初始位置）\n}\n```\n\n```c++\nclass solution{\n    public:\n    \tint minSubArrayLen(vector<int>& nums,int s){\n            int result = INT_MAX;\n            int subLen = 0;\n            int sum = 0;\n            for(int i = 0,j = 0;j < nums.size();j ++){\n                sum += nums[j];//和<s，向新数组加元素\n                while(sum >= s){\n                    subLen = j - i + 1;//子数组长度\n                    result = result < subLen ? result : subLen;\n                    sum -= nums[i ++];//不断变更i（子数组的初始位置）\n                }\n            }\n            return result == INT_MAX ? 0 : result;\n        }\n};\n```\n\n\n\n### 螺旋矩阵\n\n给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。\n\n示例:\n\n输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]\n\n遵循循环不变量原则\n\n```c++\nclass solution{\n    public:\n    \tvector<vector<int>> generateMatrix(int n){\n            vector<vector<int>> res(n,vector<int>(n,0));\n            int startx = 0,starty = 0;\n            int loop = n / 2;\n            int mid = n / 2;\n            int count = 1;\n            int offset = 1;\n            int i,j;\n            while(loop --){\n                for(j = starty;j < n - offset;j ++){\n                    res[startx][j] = count ++;\n                }\n                \n                for(i = startx;i < n - offset;i ++){\n                    res[i][j] = count ++;\n                }\n                \n                for(;j > starty;j --){\n                    res[i][j] = count ++;\n                }\n                \n                for(;i > startx;i --){\n                    res[i][j] = count ++;\n                }\n                \n                startx ++;\n                starty ++;\n                offset ++;\n            }\n            if(n % 2 == 1){\n                res[mid][mid] = n * n;\n            }\n            return res;\n        }\n};\n```\n\n{% note default simple %}binary-tree{% endnote %}\n\n\n\n","slug":"array","published":1,"updated":"2023-08-25T01:16:40.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsow000gy0vm4njchbj8","content":"<p>数组是存放在连续内存空间上的相同类型数据的集合</p>\n<p>vector底层实现是array，严格讲vector是容器而不是数组</p>\n<p>数组元素不能删除，只能覆盖</p>\n<p>c++中二维数组在地址空间上是连续的</p>\n<h3 id=\"一、二分查找\"><a href=\"#一、二分查找\" class=\"headerlink\" title=\"一、二分查找\"></a>一、二分查找</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>第一种写法：（左闭右闭）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//左闭右闭区间，允许left=right</span></span><br><span class=\"line\">                <span class=\"type\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[middle] &gt; target)&#123;<span class=\"comment\">//target在左区间，[left,middle-1]</span></span><br><span class=\"line\">                    right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;<span class=\"comment\">//target在右区间,[middle+1,right]</span></span><br><span class=\"line\">                    left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//target在middle处</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//目标值不存在</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第二种写法：（左闭右开）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[middle] &gt; target)&#123;</span><br><span class=\"line\">                    right = middle;<span class=\"comment\">//唯一不同之处在于target位于[left,middle)</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;<span class=\"comment\">//[middle+1,right)</span></span><br><span class=\"line\">                    left = middle + <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p>\n<h3 id=\"二、移除元素\"><a href=\"#二、移除元素\" class=\"headerlink\" title=\"二、移除元素\"></a>二、移除元素</h3><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>暴力解法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;<span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] == val)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; size - <span class=\"number\">1</span>;j ++)&#123;<span class=\"comment\">//执行移动操作</span></span><br><span class=\"line\">                        nums[j] = nums[j + <span class=\"number\">1</span>];<span class=\"comment\">//后面元素覆盖前一个元素</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i --;<span class=\"comment\">//i下标后所有元素向前移动一位，i先减再加保持位置不变</span></span><br><span class=\"line\">                size --;<span class=\"comment\">//数组大小减一</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h3><p>通过一个快指针和一个慢指针在一个for循环下完成两个for循环的工作</p>\n<ul>\n<li>快指针：寻找新数组的元素，新数组就是不包含目标值的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> slowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> fastIndex = <span class=\"number\">0</span>;fastIndex &lt; nums.<span class=\"built_in\">size</span>();fastIndex ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[fastIndex] != val)&#123;<span class=\"comment\">//快指针指向新数组值</span></span><br><span class=\"line\">                    nums[slowIndex] = nums[fastIndex];<span class=\"comment\">//将值赋给慢指针所指下标</span></span><br><span class=\"line\">                    slowIndex ++;<span class=\"comment\">//慢指针向右移动一位</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> slowIndex;<span class=\"comment\">//删除完毕后慢指针下标所指值正好为新数组大小</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、有序数组的平方\"><a href=\"#三、有序数组的平方\" class=\"headerlink\" title=\"三、有序数组的平方\"></a>三、有序数组的平方</h3><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>\n<p>示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p>\n<p>示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p>\n<p>暴力解法：(每个数平方之后排序)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortedSquare</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">                nums[i] *= nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双指针法-1\"><a href=\"#双指针法-1\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortSquare</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(size,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>,j = size - <span class=\"number\">1</span>;i &lt;= j;)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] * nums[i] &lt; nums[j] * nums[j])&#123;</span><br><span class=\"line\">                    result[k --] = nums[j] * nums[j];</span><br><span class=\"line\">                    j --;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    result[k --] = nums[i] * nums[i];</span><br><span class=\"line\">                    i ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、长度最小的子数组\"><a href=\"#四、长度最小的子数组\" class=\"headerlink\" title=\"四、长度最小的子数组\"></a>四、长度最小的子数组</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p>暴力解法：</p>\n<p>两层for循环，找到符合条件的子序列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"built_in\">minSubArrayLen</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> s)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> result = INT_MAX;<span class=\"comment\">//记录最终结果</span></span><br><span class=\"line\">           \t<span class=\"type\">int</span> subLen = <span class=\"number\">0</span>;<span class=\"comment\">//记录子数组的长度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//记录子数组和</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;<span class=\"comment\">//子数组初始位置i</span></span><br><span class=\"line\">                sum = <span class=\"number\">0</span>;<span class=\"comment\">//新子数组和要清零</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; size;j ++)&#123;<span class=\"comment\">//子数组终止位置j</span></span><br><span class=\"line\">                    sum += nums[j];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">                        subLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度终止-初始+1</span></span><br><span class=\"line\">                        result = result &lt; subLen ? result : subLen;<span class=\"comment\">//保持结果长度最小</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result == INT_MAX ? <span class=\"number\">0</span> : result;<span class=\"comment\">//result未被赋值则返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p>\n<p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p>\n<p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p>\n<p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p>\n<p>动态调整子数组的初始位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">\tsubLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度</span></span><br><span class=\"line\">    result = result &lt; subLen ? result : subLen;</span><br><span class=\"line\">    sum -= nums[i ++];<span class=\"comment\">//不断变更i（子数组的初始位置）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> result = INT_MAX;</span><br><span class=\"line\">            <span class=\"type\">int</span> subLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>,j = <span class=\"number\">0</span>;j &lt; nums.<span class=\"built_in\">size</span>();j ++)&#123;</span><br><span class=\"line\">                sum += nums[j];<span class=\"comment\">//和&lt;s，向新数组加元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">                    subLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度</span></span><br><span class=\"line\">                    result = result &lt; subLen ? result : subLen;</span><br><span class=\"line\">                    sum -= nums[i ++];<span class=\"comment\">//不断变更i（子数组的初始位置）</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result == INT_MAX ? <span class=\"number\">0</span> : result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"螺旋矩阵\"><a href=\"#螺旋矩阵\" class=\"headerlink\" title=\"螺旋矩阵\"></a>螺旋矩阵</h3><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>\n<p>示例:</p>\n<p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p>\n<p>遵循循环不变量原则</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n)&#123;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n,<span class=\"number\">0</span>));</span><br><span class=\"line\">            <span class=\"type\">int</span> startx = <span class=\"number\">0</span>,starty = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> loop = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> offset = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> i,j;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(loop --)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j = starty;j &lt; n - offset;j ++)&#123;</span><br><span class=\"line\">                    res[startx][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(i = startx;i &lt; n - offset;i ++)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(;j &gt; starty;j --)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(;i &gt; startx;i --)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                startx ++;</span><br><span class=\"line\">                starty ++;</span><br><span class=\"line\">                offset ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                res[mid][mid] = n * n;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note default simple\"><p>binary-tree</p>\n</div>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<p>数组是存放在连续内存空间上的相同类型数据的集合</p>\n<p>vector底层实现是array，严格讲vector是容器而不是数组</p>\n<p>数组元素不能删除，只能覆盖</p>\n<p>c++中二维数组在地址空间上是连续的</p>\n<h3 id=\"一、二分查找\"><a href=\"#一、二分查找\" class=\"headerlink\" title=\"一、二分查找\"></a>一、二分查找</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>第一种写法：（左闭右闭）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//左闭右闭区间，允许left=right</span></span><br><span class=\"line\">                <span class=\"type\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[middle] &gt; target)&#123;<span class=\"comment\">//target在左区间，[left,middle-1]</span></span><br><span class=\"line\">                    right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;<span class=\"comment\">//target在右区间,[middle+1,right]</span></span><br><span class=\"line\">                    left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//target在middle处</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//目标值不存在</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第二种写法：（左闭右开）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[middle] &gt; target)&#123;</span><br><span class=\"line\">                    right = middle;<span class=\"comment\">//唯一不同之处在于target位于[left,middle)</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[middle] &lt; target)&#123;<span class=\"comment\">//[middle+1,right)</span></span><br><span class=\"line\">                    left = middle + <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>区间的定义就是不变量，那么在循环中坚持根据查找区间的定义来做边界处理，就是循环不变量规则。</p>\n<h3 id=\"二、移除元素\"><a href=\"#二、移除元素\" class=\"headerlink\" title=\"二、移除元素\"></a>二、移除元素</h3><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>暴力解法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;<span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] == val)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; size - <span class=\"number\">1</span>;j ++)&#123;<span class=\"comment\">//执行移动操作</span></span><br><span class=\"line\">                        nums[j] = nums[j + <span class=\"number\">1</span>];<span class=\"comment\">//后面元素覆盖前一个元素</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i --;<span class=\"comment\">//i下标后所有元素向前移动一位，i先减再加保持位置不变</span></span><br><span class=\"line\">                size --;<span class=\"comment\">//数组大小减一</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双指针法\"><a href=\"#双指针法\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h3><p>通过一个快指针和一个慢指针在一个for循环下完成两个for循环的工作</p>\n<ul>\n<li>快指针：寻找新数组的元素，新数组就是不包含目标值的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> slowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> fastIndex = <span class=\"number\">0</span>;fastIndex &lt; nums.<span class=\"built_in\">size</span>();fastIndex ++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[fastIndex] != val)&#123;<span class=\"comment\">//快指针指向新数组值</span></span><br><span class=\"line\">                    nums[slowIndex] = nums[fastIndex];<span class=\"comment\">//将值赋给慢指针所指下标</span></span><br><span class=\"line\">                    slowIndex ++;<span class=\"comment\">//慢指针向右移动一位</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> slowIndex;<span class=\"comment\">//删除完毕后慢指针下标所指值正好为新数组大小</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、有序数组的平方\"><a href=\"#三、有序数组的平方\" class=\"headerlink\" title=\"三、有序数组的平方\"></a>三、有序数组的平方</h3><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>\n<p>示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p>\n<p>示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p>\n<p>暴力解法：(每个数平方之后排序)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortedSquare</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; nums.<span class=\"built_in\">size</span>();i ++)&#123;</span><br><span class=\"line\">                nums[i] *= nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(),nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双指针法-1\"><a href=\"#双指针法-1\" class=\"headerlink\" title=\"双指针法\"></a>双指针法</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortSquare</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">result</span><span class=\"params\">(size,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>,j = size - <span class=\"number\">1</span>;i &lt;= j;)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] * nums[i] &lt; nums[j] * nums[j])&#123;</span><br><span class=\"line\">                    result[k --] = nums[j] * nums[j];</span><br><span class=\"line\">                    j --;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    result[k --] = nums[i] * nums[i];</span><br><span class=\"line\">                    i ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、长度最小的子数组\"><a href=\"#四、长度最小的子数组\" class=\"headerlink\" title=\"四、长度最小的子数组\"></a>四、长度最小的子数组</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p>暴力解法：</p>\n<p>两层for循环，找到符合条件的子序列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"built_in\">minSubArrayLen</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> s)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> size = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> result = INT_MAX;<span class=\"comment\">//记录最终结果</span></span><br><span class=\"line\">           \t<span class=\"type\">int</span> subLen = <span class=\"number\">0</span>;<span class=\"comment\">//记录子数组的长度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;<span class=\"comment\">//记录子数组和</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; size;i ++)&#123;<span class=\"comment\">//子数组初始位置i</span></span><br><span class=\"line\">                sum = <span class=\"number\">0</span>;<span class=\"comment\">//新子数组和要清零</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j &lt; size;j ++)&#123;<span class=\"comment\">//子数组终止位置j</span></span><br><span class=\"line\">                    sum += nums[j];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">                        subLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度终止-初始+1</span></span><br><span class=\"line\">                        result = result &lt; subLen ? result : subLen;<span class=\"comment\">//保持结果长度最小</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result == INT_MAX ? <span class=\"number\">0</span> : result;<span class=\"comment\">//result未被赋值则返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p>\n<p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p>\n<p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p>\n<p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p>\n<p>动态调整子数组的初始位置：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">\tsubLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度</span></span><br><span class=\"line\">    result = result &lt; subLen ? result : subLen;</span><br><span class=\"line\">    sum -= nums[i ++];<span class=\"comment\">//不断变更i（子数组的初始位置）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums,<span class=\"type\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> result = INT_MAX;</span><br><span class=\"line\">            <span class=\"type\">int</span> subLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>,j = <span class=\"number\">0</span>;j &lt; nums.<span class=\"built_in\">size</span>();j ++)&#123;</span><br><span class=\"line\">                sum += nums[j];<span class=\"comment\">//和&lt;s，向新数组加元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(sum &gt;= s)&#123;</span><br><span class=\"line\">                    subLen = j - i + <span class=\"number\">1</span>;<span class=\"comment\">//子数组长度</span></span><br><span class=\"line\">                    result = result &lt; subLen ? result : subLen;</span><br><span class=\"line\">                    sum -= nums[i ++];<span class=\"comment\">//不断变更i（子数组的初始位置）</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result == INT_MAX ? <span class=\"number\">0</span> : result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"螺旋矩阵\"><a href=\"#螺旋矩阵\" class=\"headerlink\" title=\"螺旋矩阵\"></a>螺旋矩阵</h3><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>\n<p>示例:</p>\n<p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p>\n<p>遵循循环不变量原则</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">generateMatrix</span>(<span class=\"type\">int</span> n)&#123;</span><br><span class=\"line\">            vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">res</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n,<span class=\"number\">0</span>));</span><br><span class=\"line\">            <span class=\"type\">int</span> startx = <span class=\"number\">0</span>,starty = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> loop = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> offset = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> i,j;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(loop --)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(j = starty;j &lt; n - offset;j ++)&#123;</span><br><span class=\"line\">                    res[startx][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(i = startx;i &lt; n - offset;i ++)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(;j &gt; starty;j --)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">for</span>(;i &gt; startx;i --)&#123;</span><br><span class=\"line\">                    res[i][j] = count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                startx ++;</span><br><span class=\"line\">                starty ++;</span><br><span class=\"line\">                offset ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                res[mid][mid] = n * n;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div class=\"note default simple\"><p>binary-tree</p>\n</div>\n"},{"title":"操作系统原理笔记（一）——操作系统概述","date":"2023-08-25T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"# 前言\n操作系统笔记系列文章旨在记录学习操作系统的一些收获和感悟。《操作系统》是一门课程内容繁多且非常具有挑战性的一门课程，在这门课的学习中，抽出一些时间把王道书和《操作系统概念》书上的内容记录下来，这是为了让自己今后更好的回顾，也是为了分享给更多有需要的人。总之加油吧！  \n（os笔记分为原理和实验两个部分）\n***\n# 1、什么是操作系统\n## 1.1 操作系统的定义\n- An operating system acts an intermediary between user of a computer and the computer hardware.\n    - 操作系统充当计算机用户和计算机硬件之间的中介\n- The purpose of an operating system is to provide an environment in which a user can execute programs in a convenient and efficient manner.\n    - 操作系统的目的是提供一个用户可以方便和有效地执行程序的环境\n- An operating system is software that manages the computer hardware.\n    - 操作系统是管理计算机硬件的软件\n\n综上所述，操作系统是指控制和管理整个计算机系统硬件与软件资源，合理地组织、调度计算机的工作和资源分配，进而为用户和其他软件提供方便接口与环境的程序集合。操作系统是计算机系统中最基本的系统软件。\n\n## 1.2 操作系统能做什么\n- **从用户角度**\n    - 提供良好的用户界面\n    - 标准的函数库\n    - 使得编程更加方便并且不容易出错\n- **从系统角度**\n    - 管理资源\n        - 硬件资源（处理机，存储器，设备）\n        - 信息资源（文件）\n    - 解决申请资源时产生的冲突\n    - 阻止错误的产生和对计算机不正确的使用\n\n## 1.3 操作系统的特征\n1、并发\n操作系统的并发性是指计算机系统中同时存在多个运行的程序，因此它具有处理和调度多个程序同时执行的能力。\n在操作系统中，引入进程的目的是使程序能并发执行。\n注意并发（同一时间间隔）和并行（同一时刻）的区别。操作系统的并发性是通过分时得以实现。在多道程序环境下，一段时间内，宏观上有多道程序在同时执行，而在每个时刻，单处理机环境下实际仅能有一道程序执行，因此微观上这些程序仍是分时交替执行。而并行性是指操作系统具有同时进行运算或操作的特性，在同一时刻能完成两种或以上的工作。并行性需要硬件的支持，如多流水线或多处理机硬件环境。  \n\n2、共享\n系统中的资源可供内存中多个并发执行的进程共同使用。\n- 共享方式\n    - 互斥共享方式：一段时间内只允许一个进程访问某资源\n    - 同时访问方式：某类资源允许在一段时间内由多个进程“同时”访问（宏观上）。\n\n3、虚拟\n指把一个物理上的实体变为若干逻辑上的对应物。操作系统中利用了多种虚拟处理技术来实现虚拟处理器、虚拟内存和虚拟外部设备等。操作系统的虚拟技术可归纳为：时分复用技术、空分复用技术。\n\n4、异步\n多道程序环境下，资源有限，进程的执行并不是一贯到底的，而是走走停停，已不可知的速度向前推进。\n***\n# 2、计算机系统组成\n## 2.1、计算机系统的架构\n![computer system organization](/post_img/1.png \"计算机操作系统的架构\")\n\n现代通用计算机系统包括一个或多个CPU和若干设备控制器，通过公用总线相连而成，该总线提供了共享内存的的访问。每个设备控制器负责一类特定的设备（如磁盘驱动、音频设备或视频显示器）。CPU与设备控制器可以并发执行，并且竞争访问内存。为了确保有序访问共享内存，需要内存控制器来协调访问内存。\n\n## 2.2、硬盘\n硬盘内部结构包括**盘片**、**主轴**、**磁臂**、**磁头**。当磁头要读写盘片数据时，磁臂移动到指定的磁道，等待要访问的数据点旋转到磁头下方。\n盘片：磁性数据载体，分单面和双面\n磁道：能被磁头访问的一组同心圆\n扇区：数据存放的基本单位\n柱面：所有盘片相同磁道构成的立体面  \n读操作：将从磁盘上读到的磁性转化为0或1  \n写操作：将0或1转化为相应的磁性写入磁盘\n\n## 2.3、存储系统（storage system）\nCPU负责将指令从内存读入，所以程序必须在内存中才能执行。\n内存以字节为存储单位，每个字节都有一个地址与之对应，通过load/store指令即可访问指定地址的内存数据。\n![存储层次图](/post_img/2.png)\n\n## 2.4、I/O结构\n存储器属于I/O设备的一种，IO设备是计算机体系结构中种类最丰富的设备类型，具有很强的扩展性。\n操作系统中有专门管理IO设备的一个专门的IO子系统。\n![IO](/post_img/3.png)\n***\n# 3、计算机系统体系结构\n## 3.1、单处理器系统（single-processor system）\n只有一颗主CPU，执行通用指令集。带有其他专用处理器，为特定设备服务，如磁盘、键盘、图形控制器等（能够执行的指令有限，不处理用户进程，操作系统会向它们发出任务，监控状态）。\n\n## 3.2、多处理器系统（multiprocessor/multicore system）\n有两个或多个紧密通信的CPU，共享计算机的总线、时钟、内存和外设等。\n分为非对称处理和对称处理。\n\n## 3.3、集群系统（clustered system）\n该系统由若干节点（node）通过网络连接在一起，每个节点可为单处理器系统或多处理器系统，节点之间是松耦合关系。\n具有高可用性和高性能计算的特点。\n***\n# 4、操作系统结构\n## 4.1、单道批处理系统\n系统对作业的处理是成批进行的，但内存中始终保持一道作业。\n- **特征**\n    - 自动性：一批作业能自动逐个进行，无需人工干预\n    - 顺序性：先调入内存的作业先完成\n    - 单道性：内存中仅有一道作业完成\n面临的问题：内存每次仅存放一道作业，每当它在运行期间发出I/O请求后,CPU便处于等待I/O完成的状态。为了进一步提高资源的利用率和系统的吞吐量，引入了多道程序技术。\n\n## 4.2、多道批处理系统\n多道程序设计技术允许多个程序同时进入内存并允许它们在CPU中交替运行，这些程序共享系统中的各种资源。当一道程序因I/O请求而暂停运行时，CPU立即转去运行另一道程序。实现系统各部件之间的并行工作，使其整体在单位时间内的效率翻倍。当然，多道批处理系统的设计与实现要比单道批处理系统复杂很多。\n- **特征**\n    - 多道：内存中同时存放多道相互独立的程序\n    - 宏观上并行：同时进入系统的多道程序都处于运行过程中\n    - 微观上串行：内存中的多道程序轮流占用CPU，交替执行\n优点：资源利用率高，系统吞吐量大，缺点：用户响应时间较长；不提供人机交互能力，即用户不能了解程序的运行情况，也不能控制计算机。\n\n## 4.3、分时系统（time sharing）\n分时系统，也叫多任务系统（multitasking），是多道程序设计的自然延伸。\n- **允许多个用户共享一台计算机**\n    - 用户只有输入和输出设备\n    - 分时系统为每个用户轮流分配等量的CPU时间\n    - 用户从发出指令到得到即时结果的时间称为响应时间\n\n- **特征**\n    - 同时性：允许多个用户同时使用一台计算机\n    - 交互性：用户通过终端同程序进行交互\n    - 独立性：系统多个用户之间可以彼此独立操作，互不干扰\n    - 及时性：用户能在很短时间内获得响应\n***\n# 5、操作系统的服务\n## 5.1、操作系统提供的服务\n![service](/post_img/4.png)\n- Almost all operating system have an user interface(UI).It offers a way of users to interface with OS.\n    - CLI(Command Line Interface)\n        - command interpreter(shell)\n    - GUI(Graphic User Interface)\n        - A user friendly graphical user interface.\n    - Batch\n        - It is a flie which contains commands and directives.\n        \n## 5.2、双重模式（Dual Mode）\n现代计算机系统有一个特殊的硬件，用于划分系统的运行状态，至少需要两种单独运行模式\n- 用户模式(user mode)：执行用户级代码（应用级）\n- 内核模式(kernel mode)：执行操作系统级代码\n实现方式：用一个硬件模式位来表示当前模式，0表示内核模式，1表示用户模式\n\n## 5.3、系统调用（System Calls）\n系统调用提供了访问和使用操作系统所提供的服务的接口。系统调用的实现代码是操作系统级的，接口通常面向程序员。\nAPI（Application Programming Interface）：指明了参数和返回值的一组函数。\n通过API可以间接访问系统调用。\n\n- **系统调用按功能分类**\n    - 设备管理：完成设备的请求或释放，以及设备启动等功能\n    - 文件管理：完成文件的读、写、创建及删除等功能\n    - 进程管理：完成进程的创建、撤销、阻塞和唤醒的功能\n    - 进程通信：完成进程之间的消息传递或信号传递等功能\n    - 内存管理：完成内存的分配、回收以及获取作业占用内存区大小及始址等功能\n\n系统调用的实现机制：每个系统调用都有一个唯一的数字编号，称为**系统调用号**。用户代码调用API时，API向系统调用接口指明其所要用的系统调用号，操作系统内核中维护了一张索引表，可以根据它来找到系统调用代码在操作系统中的位置。\n![trap mechanism](/post_img/5.png)\n\n\n\n\n","source":"_posts/操作系统1.md","raw":"---\ntitle: 操作系统原理笔记（一）——操作系统概述\ndate: 2023-8-25 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: 操作系统\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n# 前言\n操作系统笔记系列文章旨在记录学习操作系统的一些收获和感悟。《操作系统》是一门课程内容繁多且非常具有挑战性的一门课程，在这门课的学习中，抽出一些时间把王道书和《操作系统概念》书上的内容记录下来，这是为了让自己今后更好的回顾，也是为了分享给更多有需要的人。总之加油吧！  \n（os笔记分为原理和实验两个部分）\n***\n# 1、什么是操作系统\n## 1.1 操作系统的定义\n- An operating system acts an intermediary between user of a computer and the computer hardware.\n    - 操作系统充当计算机用户和计算机硬件之间的中介\n- The purpose of an operating system is to provide an environment in which a user can execute programs in a convenient and efficient manner.\n    - 操作系统的目的是提供一个用户可以方便和有效地执行程序的环境\n- An operating system is software that manages the computer hardware.\n    - 操作系统是管理计算机硬件的软件\n\n综上所述，操作系统是指控制和管理整个计算机系统硬件与软件资源，合理地组织、调度计算机的工作和资源分配，进而为用户和其他软件提供方便接口与环境的程序集合。操作系统是计算机系统中最基本的系统软件。\n\n## 1.2 操作系统能做什么\n- **从用户角度**\n    - 提供良好的用户界面\n    - 标准的函数库\n    - 使得编程更加方便并且不容易出错\n- **从系统角度**\n    - 管理资源\n        - 硬件资源（处理机，存储器，设备）\n        - 信息资源（文件）\n    - 解决申请资源时产生的冲突\n    - 阻止错误的产生和对计算机不正确的使用\n\n## 1.3 操作系统的特征\n1、并发\n操作系统的并发性是指计算机系统中同时存在多个运行的程序，因此它具有处理和调度多个程序同时执行的能力。\n在操作系统中，引入进程的目的是使程序能并发执行。\n注意并发（同一时间间隔）和并行（同一时刻）的区别。操作系统的并发性是通过分时得以实现。在多道程序环境下，一段时间内，宏观上有多道程序在同时执行，而在每个时刻，单处理机环境下实际仅能有一道程序执行，因此微观上这些程序仍是分时交替执行。而并行性是指操作系统具有同时进行运算或操作的特性，在同一时刻能完成两种或以上的工作。并行性需要硬件的支持，如多流水线或多处理机硬件环境。  \n\n2、共享\n系统中的资源可供内存中多个并发执行的进程共同使用。\n- 共享方式\n    - 互斥共享方式：一段时间内只允许一个进程访问某资源\n    - 同时访问方式：某类资源允许在一段时间内由多个进程“同时”访问（宏观上）。\n\n3、虚拟\n指把一个物理上的实体变为若干逻辑上的对应物。操作系统中利用了多种虚拟处理技术来实现虚拟处理器、虚拟内存和虚拟外部设备等。操作系统的虚拟技术可归纳为：时分复用技术、空分复用技术。\n\n4、异步\n多道程序环境下，资源有限，进程的执行并不是一贯到底的，而是走走停停，已不可知的速度向前推进。\n***\n# 2、计算机系统组成\n## 2.1、计算机系统的架构\n![computer system organization](/post_img/1.png \"计算机操作系统的架构\")\n\n现代通用计算机系统包括一个或多个CPU和若干设备控制器，通过公用总线相连而成，该总线提供了共享内存的的访问。每个设备控制器负责一类特定的设备（如磁盘驱动、音频设备或视频显示器）。CPU与设备控制器可以并发执行，并且竞争访问内存。为了确保有序访问共享内存，需要内存控制器来协调访问内存。\n\n## 2.2、硬盘\n硬盘内部结构包括**盘片**、**主轴**、**磁臂**、**磁头**。当磁头要读写盘片数据时，磁臂移动到指定的磁道，等待要访问的数据点旋转到磁头下方。\n盘片：磁性数据载体，分单面和双面\n磁道：能被磁头访问的一组同心圆\n扇区：数据存放的基本单位\n柱面：所有盘片相同磁道构成的立体面  \n读操作：将从磁盘上读到的磁性转化为0或1  \n写操作：将0或1转化为相应的磁性写入磁盘\n\n## 2.3、存储系统（storage system）\nCPU负责将指令从内存读入，所以程序必须在内存中才能执行。\n内存以字节为存储单位，每个字节都有一个地址与之对应，通过load/store指令即可访问指定地址的内存数据。\n![存储层次图](/post_img/2.png)\n\n## 2.4、I/O结构\n存储器属于I/O设备的一种，IO设备是计算机体系结构中种类最丰富的设备类型，具有很强的扩展性。\n操作系统中有专门管理IO设备的一个专门的IO子系统。\n![IO](/post_img/3.png)\n***\n# 3、计算机系统体系结构\n## 3.1、单处理器系统（single-processor system）\n只有一颗主CPU，执行通用指令集。带有其他专用处理器，为特定设备服务，如磁盘、键盘、图形控制器等（能够执行的指令有限，不处理用户进程，操作系统会向它们发出任务，监控状态）。\n\n## 3.2、多处理器系统（multiprocessor/multicore system）\n有两个或多个紧密通信的CPU，共享计算机的总线、时钟、内存和外设等。\n分为非对称处理和对称处理。\n\n## 3.3、集群系统（clustered system）\n该系统由若干节点（node）通过网络连接在一起，每个节点可为单处理器系统或多处理器系统，节点之间是松耦合关系。\n具有高可用性和高性能计算的特点。\n***\n# 4、操作系统结构\n## 4.1、单道批处理系统\n系统对作业的处理是成批进行的，但内存中始终保持一道作业。\n- **特征**\n    - 自动性：一批作业能自动逐个进行，无需人工干预\n    - 顺序性：先调入内存的作业先完成\n    - 单道性：内存中仅有一道作业完成\n面临的问题：内存每次仅存放一道作业，每当它在运行期间发出I/O请求后,CPU便处于等待I/O完成的状态。为了进一步提高资源的利用率和系统的吞吐量，引入了多道程序技术。\n\n## 4.2、多道批处理系统\n多道程序设计技术允许多个程序同时进入内存并允许它们在CPU中交替运行，这些程序共享系统中的各种资源。当一道程序因I/O请求而暂停运行时，CPU立即转去运行另一道程序。实现系统各部件之间的并行工作，使其整体在单位时间内的效率翻倍。当然，多道批处理系统的设计与实现要比单道批处理系统复杂很多。\n- **特征**\n    - 多道：内存中同时存放多道相互独立的程序\n    - 宏观上并行：同时进入系统的多道程序都处于运行过程中\n    - 微观上串行：内存中的多道程序轮流占用CPU，交替执行\n优点：资源利用率高，系统吞吐量大，缺点：用户响应时间较长；不提供人机交互能力，即用户不能了解程序的运行情况，也不能控制计算机。\n\n## 4.3、分时系统（time sharing）\n分时系统，也叫多任务系统（multitasking），是多道程序设计的自然延伸。\n- **允许多个用户共享一台计算机**\n    - 用户只有输入和输出设备\n    - 分时系统为每个用户轮流分配等量的CPU时间\n    - 用户从发出指令到得到即时结果的时间称为响应时间\n\n- **特征**\n    - 同时性：允许多个用户同时使用一台计算机\n    - 交互性：用户通过终端同程序进行交互\n    - 独立性：系统多个用户之间可以彼此独立操作，互不干扰\n    - 及时性：用户能在很短时间内获得响应\n***\n# 5、操作系统的服务\n## 5.1、操作系统提供的服务\n![service](/post_img/4.png)\n- Almost all operating system have an user interface(UI).It offers a way of users to interface with OS.\n    - CLI(Command Line Interface)\n        - command interpreter(shell)\n    - GUI(Graphic User Interface)\n        - A user friendly graphical user interface.\n    - Batch\n        - It is a flie which contains commands and directives.\n        \n## 5.2、双重模式（Dual Mode）\n现代计算机系统有一个特殊的硬件，用于划分系统的运行状态，至少需要两种单独运行模式\n- 用户模式(user mode)：执行用户级代码（应用级）\n- 内核模式(kernel mode)：执行操作系统级代码\n实现方式：用一个硬件模式位来表示当前模式，0表示内核模式，1表示用户模式\n\n## 5.3、系统调用（System Calls）\n系统调用提供了访问和使用操作系统所提供的服务的接口。系统调用的实现代码是操作系统级的，接口通常面向程序员。\nAPI（Application Programming Interface）：指明了参数和返回值的一组函数。\n通过API可以间接访问系统调用。\n\n- **系统调用按功能分类**\n    - 设备管理：完成设备的请求或释放，以及设备启动等功能\n    - 文件管理：完成文件的读、写、创建及删除等功能\n    - 进程管理：完成进程的创建、撤销、阻塞和唤醒的功能\n    - 进程通信：完成进程之间的消息传递或信号传递等功能\n    - 内存管理：完成内存的分配、回收以及获取作业占用内存区大小及始址等功能\n\n系统调用的实现机制：每个系统调用都有一个唯一的数字编号，称为**系统调用号**。用户代码调用API时，API向系统调用接口指明其所要用的系统调用号，操作系统内核中维护了一张索引表，可以根据它来找到系统调用代码在操作系统中的位置。\n![trap mechanism](/post_img/5.png)\n\n\n\n\n","slug":"操作系统1","published":1,"updated":"2023-08-25T17:10:25.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsoz000ky0vmebzo1q1i","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>操作系统笔记系列文章旨在记录学习操作系统的一些收获和感悟。《操作系统》是一门课程内容繁多且非常具有挑战性的一门课程，在这门课的学习中，抽出一些时间把王道书和《操作系统概念》书上的内容记录下来，这是为了让自己今后更好的回顾，也是为了分享给更多有需要的人。总之加油吧！<br>（os笔记分为原理和实验两个部分）</p>\n<hr>\n<h1 id=\"1、什么是操作系统\"><a href=\"#1、什么是操作系统\" class=\"headerlink\" title=\"1、什么是操作系统\"></a>1、什么是操作系统</h1><h2 id=\"1-1-操作系统的定义\"><a href=\"#1-1-操作系统的定义\" class=\"headerlink\" title=\"1.1 操作系统的定义\"></a>1.1 操作系统的定义</h2><ul>\n<li>An operating system acts an intermediary between user of a computer and the computer hardware.<ul>\n<li>操作系统充当计算机用户和计算机硬件之间的中介</li>\n</ul>\n</li>\n<li>The purpose of an operating system is to provide an environment in which a user can execute programs in a convenient and efficient manner.<ul>\n<li>操作系统的目的是提供一个用户可以方便和有效地执行程序的环境</li>\n</ul>\n</li>\n<li>An operating system is software that manages the computer hardware.<ul>\n<li>操作系统是管理计算机硬件的软件</li>\n</ul>\n</li>\n</ul>\n<p>综上所述，操作系统是指控制和管理整个计算机系统硬件与软件资源，合理地组织、调度计算机的工作和资源分配，进而为用户和其他软件提供方便接口与环境的程序集合。操作系统是计算机系统中最基本的系统软件。</p>\n<h2 id=\"1-2-操作系统能做什么\"><a href=\"#1-2-操作系统能做什么\" class=\"headerlink\" title=\"1.2 操作系统能做什么\"></a>1.2 操作系统能做什么</h2><ul>\n<li><strong>从用户角度</strong><ul>\n<li>提供良好的用户界面</li>\n<li>标准的函数库</li>\n<li>使得编程更加方便并且不容易出错</li>\n</ul>\n</li>\n<li><strong>从系统角度</strong><ul>\n<li>管理资源<ul>\n<li>硬件资源（处理机，存储器，设备）</li>\n<li>信息资源（文件）</li>\n</ul>\n</li>\n<li>解决申请资源时产生的冲突</li>\n<li>阻止错误的产生和对计算机不正确的使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-3-操作系统的特征\"><a href=\"#1-3-操作系统的特征\" class=\"headerlink\" title=\"1.3 操作系统的特征\"></a>1.3 操作系统的特征</h2><p>1、并发<br>操作系统的并发性是指计算机系统中同时存在多个运行的程序，因此它具有处理和调度多个程序同时执行的能力。<br>在操作系统中，引入进程的目的是使程序能并发执行。<br>注意并发（同一时间间隔）和并行（同一时刻）的区别。操作系统的并发性是通过分时得以实现。在多道程序环境下，一段时间内，宏观上有多道程序在同时执行，而在每个时刻，单处理机环境下实际仅能有一道程序执行，因此微观上这些程序仍是分时交替执行。而并行性是指操作系统具有同时进行运算或操作的特性，在同一时刻能完成两种或以上的工作。并行性需要硬件的支持，如多流水线或多处理机硬件环境。  </p>\n<p>2、共享<br>系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n<ul>\n<li>共享方式<ul>\n<li>互斥共享方式：一段时间内只允许一个进程访问某资源</li>\n<li>同时访问方式：某类资源允许在一段时间内由多个进程“同时”访问（宏观上）。</li>\n</ul>\n</li>\n</ul>\n<p>3、虚拟<br>指把一个物理上的实体变为若干逻辑上的对应物。操作系统中利用了多种虚拟处理技术来实现虚拟处理器、虚拟内存和虚拟外部设备等。操作系统的虚拟技术可归纳为：时分复用技术、空分复用技术。</p>\n<p>4、异步<br>多道程序环境下，资源有限，进程的执行并不是一贯到底的，而是走走停停，已不可知的速度向前推进。</p>\n<hr>\n<h1 id=\"2、计算机系统组成\"><a href=\"#2、计算机系统组成\" class=\"headerlink\" title=\"2、计算机系统组成\"></a>2、计算机系统组成</h1><h2 id=\"2-1、计算机系统的架构\"><a href=\"#2-1、计算机系统的架构\" class=\"headerlink\" title=\"2.1、计算机系统的架构\"></a>2.1、计算机系统的架构</h2><p><img src=\"/post_img/1.png\" alt=\"computer system organization\" title=\"计算机操作系统的架构\"></p>\n<p>现代通用计算机系统包括一个或多个CPU和若干设备控制器，通过公用总线相连而成，该总线提供了共享内存的的访问。每个设备控制器负责一类特定的设备（如磁盘驱动、音频设备或视频显示器）。CPU与设备控制器可以并发执行，并且竞争访问内存。为了确保有序访问共享内存，需要内存控制器来协调访问内存。</p>\n<h2 id=\"2-2、硬盘\"><a href=\"#2-2、硬盘\" class=\"headerlink\" title=\"2.2、硬盘\"></a>2.2、硬盘</h2><p>硬盘内部结构包括<strong>盘片</strong>、<strong>主轴</strong>、<strong>磁臂</strong>、<strong>磁头</strong>。当磁头要读写盘片数据时，磁臂移动到指定的磁道，等待要访问的数据点旋转到磁头下方。<br>盘片：磁性数据载体，分单面和双面<br>磁道：能被磁头访问的一组同心圆<br>扇区：数据存放的基本单位<br>柱面：所有盘片相同磁道构成的立体面<br>读操作：将从磁盘上读到的磁性转化为0或1<br>写操作：将0或1转化为相应的磁性写入磁盘</p>\n<h2 id=\"2-3、存储系统（storage-system）\"><a href=\"#2-3、存储系统（storage-system）\" class=\"headerlink\" title=\"2.3、存储系统（storage system）\"></a>2.3、存储系统（storage system）</h2><p>CPU负责将指令从内存读入，所以程序必须在内存中才能执行。<br>内存以字节为存储单位，每个字节都有一个地址与之对应，通过load/store指令即可访问指定地址的内存数据。<br><img src=\"/post_img/2.png\" alt=\"存储层次图\"></p>\n<h2 id=\"2-4、I-O结构\"><a href=\"#2-4、I-O结构\" class=\"headerlink\" title=\"2.4、I/O结构\"></a>2.4、I/O结构</h2><p>存储器属于I/O设备的一种，IO设备是计算机体系结构中种类最丰富的设备类型，具有很强的扩展性。<br>操作系统中有专门管理IO设备的一个专门的IO子系统。<br><img src=\"/post_img/3.png\" alt=\"IO\"></p>\n<hr>\n<h1 id=\"3、计算机系统体系结构\"><a href=\"#3、计算机系统体系结构\" class=\"headerlink\" title=\"3、计算机系统体系结构\"></a>3、计算机系统体系结构</h1><h2 id=\"3-1、单处理器系统（single-processor-system）\"><a href=\"#3-1、单处理器系统（single-processor-system）\" class=\"headerlink\" title=\"3.1、单处理器系统（single-processor system）\"></a>3.1、单处理器系统（single-processor system）</h2><p>只有一颗主CPU，执行通用指令集。带有其他专用处理器，为特定设备服务，如磁盘、键盘、图形控制器等（能够执行的指令有限，不处理用户进程，操作系统会向它们发出任务，监控状态）。</p>\n<h2 id=\"3-2、多处理器系统（multiprocessor-multicore-system）\"><a href=\"#3-2、多处理器系统（multiprocessor-multicore-system）\" class=\"headerlink\" title=\"3.2、多处理器系统（multiprocessor/multicore system）\"></a>3.2、多处理器系统（multiprocessor/multicore system）</h2><p>有两个或多个紧密通信的CPU，共享计算机的总线、时钟、内存和外设等。<br>分为非对称处理和对称处理。</p>\n<h2 id=\"3-3、集群系统（clustered-system）\"><a href=\"#3-3、集群系统（clustered-system）\" class=\"headerlink\" title=\"3.3、集群系统（clustered system）\"></a>3.3、集群系统（clustered system）</h2><p>该系统由若干节点（node）通过网络连接在一起，每个节点可为单处理器系统或多处理器系统，节点之间是松耦合关系。<br>具有高可用性和高性能计算的特点。</p>\n<hr>\n<h1 id=\"4、操作系统结构\"><a href=\"#4、操作系统结构\" class=\"headerlink\" title=\"4、操作系统结构\"></a>4、操作系统结构</h1><h2 id=\"4-1、单道批处理系统\"><a href=\"#4-1、单道批处理系统\" class=\"headerlink\" title=\"4.1、单道批处理系统\"></a>4.1、单道批处理系统</h2><p>系统对作业的处理是成批进行的，但内存中始终保持一道作业。</p>\n<ul>\n<li><strong>特征</strong><ul>\n<li>自动性：一批作业能自动逐个进行，无需人工干预</li>\n<li>顺序性：先调入内存的作业先完成</li>\n<li>单道性：内存中仅有一道作业完成<br>面临的问题：内存每次仅存放一道作业，每当它在运行期间发出I/O请求后,CPU便处于等待I/O完成的状态。为了进一步提高资源的利用率和系统的吞吐量，引入了多道程序技术。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-2、多道批处理系统\"><a href=\"#4-2、多道批处理系统\" class=\"headerlink\" title=\"4.2、多道批处理系统\"></a>4.2、多道批处理系统</h2><p>多道程序设计技术允许多个程序同时进入内存并允许它们在CPU中交替运行，这些程序共享系统中的各种资源。当一道程序因I/O请求而暂停运行时，CPU立即转去运行另一道程序。实现系统各部件之间的并行工作，使其整体在单位时间内的效率翻倍。当然，多道批处理系统的设计与实现要比单道批处理系统复杂很多。</p>\n<ul>\n<li><strong>特征</strong><ul>\n<li>多道：内存中同时存放多道相互独立的程序</li>\n<li>宏观上并行：同时进入系统的多道程序都处于运行过程中</li>\n<li>微观上串行：内存中的多道程序轮流占用CPU，交替执行<br>优点：资源利用率高，系统吞吐量大，缺点：用户响应时间较长；不提供人机交互能力，即用户不能了解程序的运行情况，也不能控制计算机。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-3、分时系统（time-sharing）\"><a href=\"#4-3、分时系统（time-sharing）\" class=\"headerlink\" title=\"4.3、分时系统（time sharing）\"></a>4.3、分时系统（time sharing）</h2><p>分时系统，也叫多任务系统（multitasking），是多道程序设计的自然延伸。</p>\n<ul>\n<li><p><strong>允许多个用户共享一台计算机</strong></p>\n<ul>\n<li>用户只有输入和输出设备</li>\n<li>分时系统为每个用户轮流分配等量的CPU时间</li>\n<li>用户从发出指令到得到即时结果的时间称为响应时间</li>\n</ul>\n</li>\n<li><p><strong>特征</strong></p>\n<ul>\n<li>同时性：允许多个用户同时使用一台计算机</li>\n<li>交互性：用户通过终端同程序进行交互</li>\n<li>独立性：系统多个用户之间可以彼此独立操作，互不干扰</li>\n<li>及时性：用户能在很短时间内获得响应</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"5、操作系统的服务\"><a href=\"#5、操作系统的服务\" class=\"headerlink\" title=\"5、操作系统的服务\"></a>5、操作系统的服务</h1><h2 id=\"5-1、操作系统提供的服务\"><a href=\"#5-1、操作系统提供的服务\" class=\"headerlink\" title=\"5.1、操作系统提供的服务\"></a>5.1、操作系统提供的服务</h2><p><img src=\"/post_img/4.png\" alt=\"service\"></p>\n<ul>\n<li>Almost all operating system have an user interface(UI).It offers a way of users to interface with OS.<ul>\n<li>CLI(Command Line Interface)<ul>\n<li>command interpreter(shell)</li>\n</ul>\n</li>\n<li>GUI(Graphic User Interface)<ul>\n<li>A user friendly graphical user interface.</li>\n</ul>\n</li>\n<li>Batch<ul>\n<li>It is a flie which contains commands and directives.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-2、双重模式（Dual-Mode）\"><a href=\"#5-2、双重模式（Dual-Mode）\" class=\"headerlink\" title=\"5.2、双重模式（Dual Mode）\"></a>5.2、双重模式（Dual Mode）</h2><p>现代计算机系统有一个特殊的硬件，用于划分系统的运行状态，至少需要两种单独运行模式</p>\n<ul>\n<li>用户模式(user mode)：执行用户级代码（应用级）</li>\n<li>内核模式(kernel mode)：执行操作系统级代码<br>实现方式：用一个硬件模式位来表示当前模式，0表示内核模式，1表示用户模式</li>\n</ul>\n<h2 id=\"5-3、系统调用（System-Calls）\"><a href=\"#5-3、系统调用（System-Calls）\" class=\"headerlink\" title=\"5.3、系统调用（System Calls）\"></a>5.3、系统调用（System Calls）</h2><p>系统调用提供了访问和使用操作系统所提供的服务的接口。系统调用的实现代码是操作系统级的，接口通常面向程序员。<br>API（Application Programming Interface）：指明了参数和返回值的一组函数。<br>通过API可以间接访问系统调用。</p>\n<ul>\n<li><strong>系统调用按功能分类</strong><ul>\n<li>设备管理：完成设备的请求或释放，以及设备启动等功能</li>\n<li>文件管理：完成文件的读、写、创建及删除等功能</li>\n<li>进程管理：完成进程的创建、撤销、阻塞和唤醒的功能</li>\n<li>进程通信：完成进程之间的消息传递或信号传递等功能</li>\n<li>内存管理：完成内存的分配、回收以及获取作业占用内存区大小及始址等功能</li>\n</ul>\n</li>\n</ul>\n<p>系统调用的实现机制：每个系统调用都有一个唯一的数字编号，称为<strong>系统调用号</strong>。用户代码调用API时，API向系统调用接口指明其所要用的系统调用号，操作系统内核中维护了一张索引表，可以根据它来找到系统调用代码在操作系统中的位置。<br><img src=\"/post_img/5.png\" alt=\"trap mechanism\"></p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>操作系统笔记系列文章旨在记录学习操作系统的一些收获和感悟。《操作系统》是一门课程内容繁多且非常具有挑战性的一门课程，在这门课的学习中，抽出一些时间把王道书和《操作系统概念》书上的内容记录下来，这是为了让自己今后更好的回顾，也是为了分享给更多有需要的人。总之加油吧！<br>（os笔记分为原理和实验两个部分）</p>\n<hr>\n<h1 id=\"1、什么是操作系统\"><a href=\"#1、什么是操作系统\" class=\"headerlink\" title=\"1、什么是操作系统\"></a>1、什么是操作系统</h1><h2 id=\"1-1-操作系统的定义\"><a href=\"#1-1-操作系统的定义\" class=\"headerlink\" title=\"1.1 操作系统的定义\"></a>1.1 操作系统的定义</h2><ul>\n<li>An operating system acts an intermediary between user of a computer and the computer hardware.<ul>\n<li>操作系统充当计算机用户和计算机硬件之间的中介</li>\n</ul>\n</li>\n<li>The purpose of an operating system is to provide an environment in which a user can execute programs in a convenient and efficient manner.<ul>\n<li>操作系统的目的是提供一个用户可以方便和有效地执行程序的环境</li>\n</ul>\n</li>\n<li>An operating system is software that manages the computer hardware.<ul>\n<li>操作系统是管理计算机硬件的软件</li>\n</ul>\n</li>\n</ul>\n<p>综上所述，操作系统是指控制和管理整个计算机系统硬件与软件资源，合理地组织、调度计算机的工作和资源分配，进而为用户和其他软件提供方便接口与环境的程序集合。操作系统是计算机系统中最基本的系统软件。</p>\n<h2 id=\"1-2-操作系统能做什么\"><a href=\"#1-2-操作系统能做什么\" class=\"headerlink\" title=\"1.2 操作系统能做什么\"></a>1.2 操作系统能做什么</h2><ul>\n<li><strong>从用户角度</strong><ul>\n<li>提供良好的用户界面</li>\n<li>标准的函数库</li>\n<li>使得编程更加方便并且不容易出错</li>\n</ul>\n</li>\n<li><strong>从系统角度</strong><ul>\n<li>管理资源<ul>\n<li>硬件资源（处理机，存储器，设备）</li>\n<li>信息资源（文件）</li>\n</ul>\n</li>\n<li>解决申请资源时产生的冲突</li>\n<li>阻止错误的产生和对计算机不正确的使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-3-操作系统的特征\"><a href=\"#1-3-操作系统的特征\" class=\"headerlink\" title=\"1.3 操作系统的特征\"></a>1.3 操作系统的特征</h2><p>1、并发<br>操作系统的并发性是指计算机系统中同时存在多个运行的程序，因此它具有处理和调度多个程序同时执行的能力。<br>在操作系统中，引入进程的目的是使程序能并发执行。<br>注意并发（同一时间间隔）和并行（同一时刻）的区别。操作系统的并发性是通过分时得以实现。在多道程序环境下，一段时间内，宏观上有多道程序在同时执行，而在每个时刻，单处理机环境下实际仅能有一道程序执行，因此微观上这些程序仍是分时交替执行。而并行性是指操作系统具有同时进行运算或操作的特性，在同一时刻能完成两种或以上的工作。并行性需要硬件的支持，如多流水线或多处理机硬件环境。  </p>\n<p>2、共享<br>系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n<ul>\n<li>共享方式<ul>\n<li>互斥共享方式：一段时间内只允许一个进程访问某资源</li>\n<li>同时访问方式：某类资源允许在一段时间内由多个进程“同时”访问（宏观上）。</li>\n</ul>\n</li>\n</ul>\n<p>3、虚拟<br>指把一个物理上的实体变为若干逻辑上的对应物。操作系统中利用了多种虚拟处理技术来实现虚拟处理器、虚拟内存和虚拟外部设备等。操作系统的虚拟技术可归纳为：时分复用技术、空分复用技术。</p>\n<p>4、异步<br>多道程序环境下，资源有限，进程的执行并不是一贯到底的，而是走走停停，已不可知的速度向前推进。</p>\n<hr>\n<h1 id=\"2、计算机系统组成\"><a href=\"#2、计算机系统组成\" class=\"headerlink\" title=\"2、计算机系统组成\"></a>2、计算机系统组成</h1><h2 id=\"2-1、计算机系统的架构\"><a href=\"#2-1、计算机系统的架构\" class=\"headerlink\" title=\"2.1、计算机系统的架构\"></a>2.1、计算机系统的架构</h2><p><img src=\"/post_img/1.png\" alt=\"computer system organization\" title=\"计算机操作系统的架构\"></p>\n<p>现代通用计算机系统包括一个或多个CPU和若干设备控制器，通过公用总线相连而成，该总线提供了共享内存的的访问。每个设备控制器负责一类特定的设备（如磁盘驱动、音频设备或视频显示器）。CPU与设备控制器可以并发执行，并且竞争访问内存。为了确保有序访问共享内存，需要内存控制器来协调访问内存。</p>\n<h2 id=\"2-2、硬盘\"><a href=\"#2-2、硬盘\" class=\"headerlink\" title=\"2.2、硬盘\"></a>2.2、硬盘</h2><p>硬盘内部结构包括<strong>盘片</strong>、<strong>主轴</strong>、<strong>磁臂</strong>、<strong>磁头</strong>。当磁头要读写盘片数据时，磁臂移动到指定的磁道，等待要访问的数据点旋转到磁头下方。<br>盘片：磁性数据载体，分单面和双面<br>磁道：能被磁头访问的一组同心圆<br>扇区：数据存放的基本单位<br>柱面：所有盘片相同磁道构成的立体面<br>读操作：将从磁盘上读到的磁性转化为0或1<br>写操作：将0或1转化为相应的磁性写入磁盘</p>\n<h2 id=\"2-3、存储系统（storage-system）\"><a href=\"#2-3、存储系统（storage-system）\" class=\"headerlink\" title=\"2.3、存储系统（storage system）\"></a>2.3、存储系统（storage system）</h2><p>CPU负责将指令从内存读入，所以程序必须在内存中才能执行。<br>内存以字节为存储单位，每个字节都有一个地址与之对应，通过load/store指令即可访问指定地址的内存数据。<br><img src=\"/post_img/2.png\" alt=\"存储层次图\"></p>\n<h2 id=\"2-4、I-O结构\"><a href=\"#2-4、I-O结构\" class=\"headerlink\" title=\"2.4、I/O结构\"></a>2.4、I/O结构</h2><p>存储器属于I/O设备的一种，IO设备是计算机体系结构中种类最丰富的设备类型，具有很强的扩展性。<br>操作系统中有专门管理IO设备的一个专门的IO子系统。<br><img src=\"/post_img/3.png\" alt=\"IO\"></p>\n<hr>\n<h1 id=\"3、计算机系统体系结构\"><a href=\"#3、计算机系统体系结构\" class=\"headerlink\" title=\"3、计算机系统体系结构\"></a>3、计算机系统体系结构</h1><h2 id=\"3-1、单处理器系统（single-processor-system）\"><a href=\"#3-1、单处理器系统（single-processor-system）\" class=\"headerlink\" title=\"3.1、单处理器系统（single-processor system）\"></a>3.1、单处理器系统（single-processor system）</h2><p>只有一颗主CPU，执行通用指令集。带有其他专用处理器，为特定设备服务，如磁盘、键盘、图形控制器等（能够执行的指令有限，不处理用户进程，操作系统会向它们发出任务，监控状态）。</p>\n<h2 id=\"3-2、多处理器系统（multiprocessor-multicore-system）\"><a href=\"#3-2、多处理器系统（multiprocessor-multicore-system）\" class=\"headerlink\" title=\"3.2、多处理器系统（multiprocessor/multicore system）\"></a>3.2、多处理器系统（multiprocessor/multicore system）</h2><p>有两个或多个紧密通信的CPU，共享计算机的总线、时钟、内存和外设等。<br>分为非对称处理和对称处理。</p>\n<h2 id=\"3-3、集群系统（clustered-system）\"><a href=\"#3-3、集群系统（clustered-system）\" class=\"headerlink\" title=\"3.3、集群系统（clustered system）\"></a>3.3、集群系统（clustered system）</h2><p>该系统由若干节点（node）通过网络连接在一起，每个节点可为单处理器系统或多处理器系统，节点之间是松耦合关系。<br>具有高可用性和高性能计算的特点。</p>\n<hr>\n<h1 id=\"4、操作系统结构\"><a href=\"#4、操作系统结构\" class=\"headerlink\" title=\"4、操作系统结构\"></a>4、操作系统结构</h1><h2 id=\"4-1、单道批处理系统\"><a href=\"#4-1、单道批处理系统\" class=\"headerlink\" title=\"4.1、单道批处理系统\"></a>4.1、单道批处理系统</h2><p>系统对作业的处理是成批进行的，但内存中始终保持一道作业。</p>\n<ul>\n<li><strong>特征</strong><ul>\n<li>自动性：一批作业能自动逐个进行，无需人工干预</li>\n<li>顺序性：先调入内存的作业先完成</li>\n<li>单道性：内存中仅有一道作业完成<br>面临的问题：内存每次仅存放一道作业，每当它在运行期间发出I/O请求后,CPU便处于等待I/O完成的状态。为了进一步提高资源的利用率和系统的吞吐量，引入了多道程序技术。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-2、多道批处理系统\"><a href=\"#4-2、多道批处理系统\" class=\"headerlink\" title=\"4.2、多道批处理系统\"></a>4.2、多道批处理系统</h2><p>多道程序设计技术允许多个程序同时进入内存并允许它们在CPU中交替运行，这些程序共享系统中的各种资源。当一道程序因I/O请求而暂停运行时，CPU立即转去运行另一道程序。实现系统各部件之间的并行工作，使其整体在单位时间内的效率翻倍。当然，多道批处理系统的设计与实现要比单道批处理系统复杂很多。</p>\n<ul>\n<li><strong>特征</strong><ul>\n<li>多道：内存中同时存放多道相互独立的程序</li>\n<li>宏观上并行：同时进入系统的多道程序都处于运行过程中</li>\n<li>微观上串行：内存中的多道程序轮流占用CPU，交替执行<br>优点：资源利用率高，系统吞吐量大，缺点：用户响应时间较长；不提供人机交互能力，即用户不能了解程序的运行情况，也不能控制计算机。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-3、分时系统（time-sharing）\"><a href=\"#4-3、分时系统（time-sharing）\" class=\"headerlink\" title=\"4.3、分时系统（time sharing）\"></a>4.3、分时系统（time sharing）</h2><p>分时系统，也叫多任务系统（multitasking），是多道程序设计的自然延伸。</p>\n<ul>\n<li><p><strong>允许多个用户共享一台计算机</strong></p>\n<ul>\n<li>用户只有输入和输出设备</li>\n<li>分时系统为每个用户轮流分配等量的CPU时间</li>\n<li>用户从发出指令到得到即时结果的时间称为响应时间</li>\n</ul>\n</li>\n<li><p><strong>特征</strong></p>\n<ul>\n<li>同时性：允许多个用户同时使用一台计算机</li>\n<li>交互性：用户通过终端同程序进行交互</li>\n<li>独立性：系统多个用户之间可以彼此独立操作，互不干扰</li>\n<li>及时性：用户能在很短时间内获得响应</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"5、操作系统的服务\"><a href=\"#5、操作系统的服务\" class=\"headerlink\" title=\"5、操作系统的服务\"></a>5、操作系统的服务</h1><h2 id=\"5-1、操作系统提供的服务\"><a href=\"#5-1、操作系统提供的服务\" class=\"headerlink\" title=\"5.1、操作系统提供的服务\"></a>5.1、操作系统提供的服务</h2><p><img src=\"/post_img/4.png\" alt=\"service\"></p>\n<ul>\n<li>Almost all operating system have an user interface(UI).It offers a way of users to interface with OS.<ul>\n<li>CLI(Command Line Interface)<ul>\n<li>command interpreter(shell)</li>\n</ul>\n</li>\n<li>GUI(Graphic User Interface)<ul>\n<li>A user friendly graphical user interface.</li>\n</ul>\n</li>\n<li>Batch<ul>\n<li>It is a flie which contains commands and directives.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-2、双重模式（Dual-Mode）\"><a href=\"#5-2、双重模式（Dual-Mode）\" class=\"headerlink\" title=\"5.2、双重模式（Dual Mode）\"></a>5.2、双重模式（Dual Mode）</h2><p>现代计算机系统有一个特殊的硬件，用于划分系统的运行状态，至少需要两种单独运行模式</p>\n<ul>\n<li>用户模式(user mode)：执行用户级代码（应用级）</li>\n<li>内核模式(kernel mode)：执行操作系统级代码<br>实现方式：用一个硬件模式位来表示当前模式，0表示内核模式，1表示用户模式</li>\n</ul>\n<h2 id=\"5-3、系统调用（System-Calls）\"><a href=\"#5-3、系统调用（System-Calls）\" class=\"headerlink\" title=\"5.3、系统调用（System Calls）\"></a>5.3、系统调用（System Calls）</h2><p>系统调用提供了访问和使用操作系统所提供的服务的接口。系统调用的实现代码是操作系统级的，接口通常面向程序员。<br>API（Application Programming Interface）：指明了参数和返回值的一组函数。<br>通过API可以间接访问系统调用。</p>\n<ul>\n<li><strong>系统调用按功能分类</strong><ul>\n<li>设备管理：完成设备的请求或释放，以及设备启动等功能</li>\n<li>文件管理：完成文件的读、写、创建及删除等功能</li>\n<li>进程管理：完成进程的创建、撤销、阻塞和唤醒的功能</li>\n<li>进程通信：完成进程之间的消息传递或信号传递等功能</li>\n<li>内存管理：完成内存的分配、回收以及获取作业占用内存区大小及始址等功能</li>\n</ul>\n</li>\n</ul>\n<p>系统调用的实现机制：每个系统调用都有一个唯一的数字编号，称为<strong>系统调用号</strong>。用户代码调用API时，API向系统调用接口指明其所要用的系统调用号，操作系统内核中维护了一张索引表，可以根据它来找到系统调用代码在操作系统中的位置。<br><img src=\"/post_img/5.png\" alt=\"trap mechanism\"></p>\n"},{"title":"东软云his技术栈总结","date":"2023-12-10T13:05:00.000Z","update":"2023-12-10T13:05:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n# 前言\n本篇文章旨在记录大四小组实习实训期间项目所使用的技术栈，以及所使用的框架，框架的优缺点，以及框架的原理。同时对于在开发项目的过程中所遇到的问题和一些解决方案，以及一些技术点进行总结。\n\n# 1、项目主要技术栈以及开发工具\n## 1.1、前端技术栈\n前端主要使用vue技术栈，vue技术栈的优点在于组件化，组件化使得代码可复用性高，组件化使得代码可维护性高，组件化使得代码可扩展性高。\n\n## 1.2、后端技术栈\n后端开发语言选择java，并主要使用springboot技术栈，springboot技术栈的优点在于快速开发，快速开发使得开发效率高，快速开发使得部署效率高，快速开发使得维护效率高。\n\n## 1.3、数据库     \n数据库使用mysql，mysql的优点在于开源，免费，使用成本低，mysql的缺点在于性能差，mysql的缺点在于数据量大的时候性能差。但对于该项目而言，mysql的优点大于缺点，已足够使用。\n\n## 1.4、开发工具\n开发工具使用：IntelliJ IDEA 2023.2.3，vscode，MySQL Workbench等。\n***\n# 2、架构设计\n## 2.1、前后端分离架构设计\n前后端分离架构设计，前端使用vue技术栈，后端使用springboot技术栈，前端和后端通过接口进行交互。\n\n## 2.2、业务架构设计\n业务架构设计，主要分为一下几个部分：\n- 用户管理模块\n- 患者管理模块\n- 医生管理模块\n- 科室管理模块\n- 挂号管理模块\n- 处方管理模块\n- 药房管理模块\n具体就是分为基础信息维护、门诊挂号收费、门诊医生工作站、门诊医技工作站、门诊财务管理等。\n***\n# 3、模块说明\n## 3.1、 前端模块说明\n- 使用多种vue组件，实现了上述功能\n- 引入动态路由，实现不同角色的权限分离，每个身份对应不用的Vue组件和路由\n- 添加路由卫士，实现所有路由数据均由后端返回\n\n## 3.2、 后端模块说明\n- config:配置跨域支持，并且添加了MyBatis-Plus的分页插件，以便在数据库查询中使用分页功能\n- controller: 控制层包括医生、医技、动态菜单等业务逻辑的实现\n- entity: 实体层包括项目涉及到的所有类的定义\n- mapper: 数据层，用于与数据库的操作\n- service: 实现与前端交互\n- util: 一些自定义的工具类\n***\n# 4、实现细节\n## 4.1、 前端主要部分举例\n### 4.1.1、 路由\n1、导入模块。\n\"Vue\"和\"VueRouter\"分别是Vue.js核心库和Vue Router库\naxios是一个用于发起HTTP请求的库，axios支持Promise，能轻松实现异步请求。store是VueX的数据存储仓库。\nqs是一个用于序列化和解析URL参数的库。\n\n2、使用插件\n使用 VueRouter 插件，使 Vue 应用具备路由功能。\n将 qs 库挂载到 Vue 原型上，以便在组件中使用。\n```javascript\nVue.use(VueRouter)\nVue.prototype.$qs = qs;\n```\n\n3、定义路由\n定义一些路由规则，包括默认重定向、主页路径和登录路径。\n```javascript\nconst routes = [\n  // ... (路由配置)\n]\n```\n\n4、创建路由实例\n创建一个路由示例\n```javascript\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n```\n\n5、路由守卫\n使用 beforeEach 路由守卫，用于在切换路由前执行一些逻辑。\n在这里，判断是否有路由，如果没有，则从后端获取用户权限信息，并动态添加路由。\n```javascript\nrouter.beforeEach((to, from, next) => {\n  // ... (路由守卫的逻辑)\n})\n```\n\n6、导航转为路由\n定义了一个函数 menuToRoute 用于将菜单项转换为路由。\n```javascript\nconst menuToRoute = (menu) => {\n  // ... (导航转成路由的逻辑)}\n```\n\n7、导出路由示例\n导出创建好的路由实例，以便在 Vue 应用中使用。\n```javascript\nexport default router\n```\n\n### 4.1.2、 登录界面\n使用Vue.js结合Element UI实现了用户登录功能。通过Vue.js和Element UI提供的组件和功能，实现了用户登录的表单验证和提交功能。Axios用于和后端进行数据交互，而Vuex则用于管理全局状态，包括用户Token信息。通过路由守卫实现了在用户登录成功后进行路由跳转。\n\n### 4.1.3、 主页\n基于Vue.js和Element UI的前端页面，主要用于展示医疗系统的主界面，包括侧边栏、头部导航、用户信息和主体内容。\n使用Vue.js构建前端单页面应用。利用Element UI组件库，例如el-container、el-aside、el-header、el-main等，来构建页面布局和各种UI元素。\n利用Vue.js的组件化开发思想，将页面划分为多个组件，例如SideMenu、Tabs等，提高了代码的可维护性和可读性。\n利用Vue Router进行前端路由管理，通过<router-view>标签动态加载视图组件。\n使用Vuex进行状态管理，存储和管理全局状态，如用户信息。利用Element UI的栅格系统进行响应式布局，确保在不同屏幕尺寸下能够正常显示。\n\n### 4.1.4、 侧边栏菜单\n1、**模板部分**\n使用了el-menu组件，设置了一些样式和属性，包括默认激活的菜单项、文本颜色、背景颜色等。\n使用v-for指令遍历menuList，生成侧边栏菜单。menuList从Vuex中获取，即this.$store.state.menus.menuList。\n使用router-link包裹el-menu-item，实现点击菜单项跳转到相应的路由。\n\n2、**脚本部分**\n组件的名称为SideMenu。\n在computed中使用计算属性menuList获取菜单列表，该菜单列表存储在Vuex的menus模块中的menuList属性中。\n\n3、**方法部分**\nselectMenu方法用于处理菜单项的点击事件，通过$store.commit调用addTab mutation，将点击的菜单项添加到标签页中。\n总体而言，实现了基于Element UI的垂直侧边栏菜单。菜单项来自于Vuex中的menuList，并且支持点击菜单项后在主体区域打开相应的路由页面。通过这种模块化的设计，可以方便地扩展和管理系统的菜单功能。\n\n### 4.1.5、 标签页\n1、**模板部分**\n使用了el-tabs组件，设置了一些属性，包括标签页的类型为card卡片形式、可关闭标签页、监听标签页的关闭事件（@tab-remove）和标签页的点击事件（@tab-click）。\n使用v-for指令遍历editableTabs数组，生成可编辑的标签页。\n\n2、**脚本部分**\n组件的名称为Tabs。\n在data中没有声明任何局部状态，数据都是通过computed属性来获取和设置，这些数据来自于Vuex中的menus模块的editableTabs和editableTabsValue属性。\n提供了两个计算属性：editableTabs和editableTabsValue，分别获取和设置Vuex中的相关数据。\n\n3、**方法部分**\nremoveTab方法用于处理标签页的关闭事件。在关闭标签页时，会更新editableTabs和editableTabsValue的值，并通过this.$router.push方法跳转到对应的路由页面。若关闭的是首页（'Index'），则直接返回不做任何操作。\nclickTab方法用于处理标签页的点击事件。在点击标签页时，同样会通过this.$router.push方法跳转到对应的路由页面。\n\n总体而言，实现了展示可编辑的标签页，标签页的内容由el-tab-pane组件承载，与路由进行关联，通过Vuex中的状态管理实现了标签页的动态增删和路由切换。\n\n这里只节选部分功能进行说明。\n\n## 4.2 后端主要部分举例\n### 4.2.1、 登录Controller\n这个控制器主要处理用户登录和登出的请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。\n\n1、注解和依赖注入\n@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。@Autowired：自动注入UserService实例。\n\n2、RequestMapping注解\n@RequestMapping(\"/login\")：映射处理来自前端的/login请求。\n@RequestMapping(\"/logout\")：映射处理来自前端的/logout请求。\n\n3、login方法\n处理用户登录请求。\n使用@RequestMapping(\"/login\")注解，接收前端传递的User对象参数。\n打印接收到的前端数据和执行了登录的提示信息。\n调用UserService的login方法，返回登录用户的信息。\n判断登录用户是否为null，如果不为null，返回登录成功的结果；否则返回登录失败的结果。\n\n4、logout方法\n处理用户登出请求。\n使用@RequestMapping(\"/logout\")注解，接收前端传递的参数。\n直接返回登出成功的结果。\n\n5、返回方法\n使用ResultUtil类构建返回结果，其中包括响应码（EnumCode）和消息。\n登录成功时返回用户信息，登录失败和登出成功时只返回消息。\n\n### 4.2.2、 用户Controller\n这个控制器主要处理关于用户信息的查询请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。这样的设计使得代码更加模块化，实现了前后端的分离。\n\n1、注解和依赖注入\n@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。\n@Autowired：自动注入UserService实例。\n\n2、RequestMapping注解\n@RequestMapping(\"/queryUserAll\")：映射处理来自前端的/queryUserAll请求。\n@RequestMapping(\"/queryUserDeptByID\")：映射处理来自前端的/queryUserDeptByID请求。\n\n3、getUserAll方法\n处理查询所有用户信息的请求。\n使用@RequestMapping(\"/queryUserAll\")注解，接收前端传递的User对象参数。\n调用UserService的selectAll方法，返回所有用户的信息列表。\n判断用户列表是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。\n\n4、getUserDeptByID方法\n处理根据用户ID查询用户所在部门信息的请求。\n使用@RequestMapping(\"/queryUserDeptByID\")注解，接收前端传递的User对象参数。\n调用UserService的selectDeptByID方法，返回指定用户所在部门的信息。\n判断部门信息是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。\n\n这里也同样只挑出来一些比较有代表性的功能实现，还有其它一些功能这里就不再赘述了。\n***\n# 5、测试\n测试用浏览器：Chrome 113.0.5672.127\n测试工具：Selenium(用于自动化浏览器操作的工具集和库，主要用于Web应用程序的测试，支持多种浏览器和多种操作系统)\n测试报告框架：Allure(一种用于测试报告生成和测试结果可视化的开源测试报告框架)\n\n# 6、遇到的问题挑战\n小组各成员在项目初期均对java不够熟悉，同时对于各种前后端框架的使用也不熟悉，学习成本比较高，在此处花费了大量的时间。同时该项目比较考验小组的协作分工能力，在项目初期成员分工不明确，导致项目进度比较缓慢，后期成员分工比较明确，项目进展比较顺利。\n\n# 7、项目总结\n通过这次小组合作项目，我们学到了很多东西，包括前后端分离、SpringBoot、SpringMVC、MyBatis、MySQL、Maven、Ajax、JSON、Javascript等技术，也提高了我们团队协作的能力，同时锻炼了我们独立思考的能力，相信对小组的各成员今后成长都有益处。","source":"_posts/东软云his技术栈总结.md","raw":"---\ntitle: 东软云his技术栈总结\ndate: 2023-12-10 21:05:00\nupdate: 2023-12-10 21:05:00\ntags: java, vue, springboot, mybatis, mysql\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n# 前言\n本篇文章旨在记录大四小组实习实训期间项目所使用的技术栈，以及所使用的框架，框架的优缺点，以及框架的原理。同时对于在开发项目的过程中所遇到的问题和一些解决方案，以及一些技术点进行总结。\n\n# 1、项目主要技术栈以及开发工具\n## 1.1、前端技术栈\n前端主要使用vue技术栈，vue技术栈的优点在于组件化，组件化使得代码可复用性高，组件化使得代码可维护性高，组件化使得代码可扩展性高。\n\n## 1.2、后端技术栈\n后端开发语言选择java，并主要使用springboot技术栈，springboot技术栈的优点在于快速开发，快速开发使得开发效率高，快速开发使得部署效率高，快速开发使得维护效率高。\n\n## 1.3、数据库     \n数据库使用mysql，mysql的优点在于开源，免费，使用成本低，mysql的缺点在于性能差，mysql的缺点在于数据量大的时候性能差。但对于该项目而言，mysql的优点大于缺点，已足够使用。\n\n## 1.4、开发工具\n开发工具使用：IntelliJ IDEA 2023.2.3，vscode，MySQL Workbench等。\n***\n# 2、架构设计\n## 2.1、前后端分离架构设计\n前后端分离架构设计，前端使用vue技术栈，后端使用springboot技术栈，前端和后端通过接口进行交互。\n\n## 2.2、业务架构设计\n业务架构设计，主要分为一下几个部分：\n- 用户管理模块\n- 患者管理模块\n- 医生管理模块\n- 科室管理模块\n- 挂号管理模块\n- 处方管理模块\n- 药房管理模块\n具体就是分为基础信息维护、门诊挂号收费、门诊医生工作站、门诊医技工作站、门诊财务管理等。\n***\n# 3、模块说明\n## 3.1、 前端模块说明\n- 使用多种vue组件，实现了上述功能\n- 引入动态路由，实现不同角色的权限分离，每个身份对应不用的Vue组件和路由\n- 添加路由卫士，实现所有路由数据均由后端返回\n\n## 3.2、 后端模块说明\n- config:配置跨域支持，并且添加了MyBatis-Plus的分页插件，以便在数据库查询中使用分页功能\n- controller: 控制层包括医生、医技、动态菜单等业务逻辑的实现\n- entity: 实体层包括项目涉及到的所有类的定义\n- mapper: 数据层，用于与数据库的操作\n- service: 实现与前端交互\n- util: 一些自定义的工具类\n***\n# 4、实现细节\n## 4.1、 前端主要部分举例\n### 4.1.1、 路由\n1、导入模块。\n\"Vue\"和\"VueRouter\"分别是Vue.js核心库和Vue Router库\naxios是一个用于发起HTTP请求的库，axios支持Promise，能轻松实现异步请求。store是VueX的数据存储仓库。\nqs是一个用于序列化和解析URL参数的库。\n\n2、使用插件\n使用 VueRouter 插件，使 Vue 应用具备路由功能。\n将 qs 库挂载到 Vue 原型上，以便在组件中使用。\n```javascript\nVue.use(VueRouter)\nVue.prototype.$qs = qs;\n```\n\n3、定义路由\n定义一些路由规则，包括默认重定向、主页路径和登录路径。\n```javascript\nconst routes = [\n  // ... (路由配置)\n]\n```\n\n4、创建路由实例\n创建一个路由示例\n```javascript\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n```\n\n5、路由守卫\n使用 beforeEach 路由守卫，用于在切换路由前执行一些逻辑。\n在这里，判断是否有路由，如果没有，则从后端获取用户权限信息，并动态添加路由。\n```javascript\nrouter.beforeEach((to, from, next) => {\n  // ... (路由守卫的逻辑)\n})\n```\n\n6、导航转为路由\n定义了一个函数 menuToRoute 用于将菜单项转换为路由。\n```javascript\nconst menuToRoute = (menu) => {\n  // ... (导航转成路由的逻辑)}\n```\n\n7、导出路由示例\n导出创建好的路由实例，以便在 Vue 应用中使用。\n```javascript\nexport default router\n```\n\n### 4.1.2、 登录界面\n使用Vue.js结合Element UI实现了用户登录功能。通过Vue.js和Element UI提供的组件和功能，实现了用户登录的表单验证和提交功能。Axios用于和后端进行数据交互，而Vuex则用于管理全局状态，包括用户Token信息。通过路由守卫实现了在用户登录成功后进行路由跳转。\n\n### 4.1.3、 主页\n基于Vue.js和Element UI的前端页面，主要用于展示医疗系统的主界面，包括侧边栏、头部导航、用户信息和主体内容。\n使用Vue.js构建前端单页面应用。利用Element UI组件库，例如el-container、el-aside、el-header、el-main等，来构建页面布局和各种UI元素。\n利用Vue.js的组件化开发思想，将页面划分为多个组件，例如SideMenu、Tabs等，提高了代码的可维护性和可读性。\n利用Vue Router进行前端路由管理，通过<router-view>标签动态加载视图组件。\n使用Vuex进行状态管理，存储和管理全局状态，如用户信息。利用Element UI的栅格系统进行响应式布局，确保在不同屏幕尺寸下能够正常显示。\n\n### 4.1.4、 侧边栏菜单\n1、**模板部分**\n使用了el-menu组件，设置了一些样式和属性，包括默认激活的菜单项、文本颜色、背景颜色等。\n使用v-for指令遍历menuList，生成侧边栏菜单。menuList从Vuex中获取，即this.$store.state.menus.menuList。\n使用router-link包裹el-menu-item，实现点击菜单项跳转到相应的路由。\n\n2、**脚本部分**\n组件的名称为SideMenu。\n在computed中使用计算属性menuList获取菜单列表，该菜单列表存储在Vuex的menus模块中的menuList属性中。\n\n3、**方法部分**\nselectMenu方法用于处理菜单项的点击事件，通过$store.commit调用addTab mutation，将点击的菜单项添加到标签页中。\n总体而言，实现了基于Element UI的垂直侧边栏菜单。菜单项来自于Vuex中的menuList，并且支持点击菜单项后在主体区域打开相应的路由页面。通过这种模块化的设计，可以方便地扩展和管理系统的菜单功能。\n\n### 4.1.5、 标签页\n1、**模板部分**\n使用了el-tabs组件，设置了一些属性，包括标签页的类型为card卡片形式、可关闭标签页、监听标签页的关闭事件（@tab-remove）和标签页的点击事件（@tab-click）。\n使用v-for指令遍历editableTabs数组，生成可编辑的标签页。\n\n2、**脚本部分**\n组件的名称为Tabs。\n在data中没有声明任何局部状态，数据都是通过computed属性来获取和设置，这些数据来自于Vuex中的menus模块的editableTabs和editableTabsValue属性。\n提供了两个计算属性：editableTabs和editableTabsValue，分别获取和设置Vuex中的相关数据。\n\n3、**方法部分**\nremoveTab方法用于处理标签页的关闭事件。在关闭标签页时，会更新editableTabs和editableTabsValue的值，并通过this.$router.push方法跳转到对应的路由页面。若关闭的是首页（'Index'），则直接返回不做任何操作。\nclickTab方法用于处理标签页的点击事件。在点击标签页时，同样会通过this.$router.push方法跳转到对应的路由页面。\n\n总体而言，实现了展示可编辑的标签页，标签页的内容由el-tab-pane组件承载，与路由进行关联，通过Vuex中的状态管理实现了标签页的动态增删和路由切换。\n\n这里只节选部分功能进行说明。\n\n## 4.2 后端主要部分举例\n### 4.2.1、 登录Controller\n这个控制器主要处理用户登录和登出的请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。\n\n1、注解和依赖注入\n@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。@Autowired：自动注入UserService实例。\n\n2、RequestMapping注解\n@RequestMapping(\"/login\")：映射处理来自前端的/login请求。\n@RequestMapping(\"/logout\")：映射处理来自前端的/logout请求。\n\n3、login方法\n处理用户登录请求。\n使用@RequestMapping(\"/login\")注解，接收前端传递的User对象参数。\n打印接收到的前端数据和执行了登录的提示信息。\n调用UserService的login方法，返回登录用户的信息。\n判断登录用户是否为null，如果不为null，返回登录成功的结果；否则返回登录失败的结果。\n\n4、logout方法\n处理用户登出请求。\n使用@RequestMapping(\"/logout\")注解，接收前端传递的参数。\n直接返回登出成功的结果。\n\n5、返回方法\n使用ResultUtil类构建返回结果，其中包括响应码（EnumCode）和消息。\n登录成功时返回用户信息，登录失败和登出成功时只返回消息。\n\n### 4.2.2、 用户Controller\n这个控制器主要处理关于用户信息的查询请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。这样的设计使得代码更加模块化，实现了前后端的分离。\n\n1、注解和依赖注入\n@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。\n@Autowired：自动注入UserService实例。\n\n2、RequestMapping注解\n@RequestMapping(\"/queryUserAll\")：映射处理来自前端的/queryUserAll请求。\n@RequestMapping(\"/queryUserDeptByID\")：映射处理来自前端的/queryUserDeptByID请求。\n\n3、getUserAll方法\n处理查询所有用户信息的请求。\n使用@RequestMapping(\"/queryUserAll\")注解，接收前端传递的User对象参数。\n调用UserService的selectAll方法，返回所有用户的信息列表。\n判断用户列表是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。\n\n4、getUserDeptByID方法\n处理根据用户ID查询用户所在部门信息的请求。\n使用@RequestMapping(\"/queryUserDeptByID\")注解，接收前端传递的User对象参数。\n调用UserService的selectDeptByID方法，返回指定用户所在部门的信息。\n判断部门信息是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。\n\n这里也同样只挑出来一些比较有代表性的功能实现，还有其它一些功能这里就不再赘述了。\n***\n# 5、测试\n测试用浏览器：Chrome 113.0.5672.127\n测试工具：Selenium(用于自动化浏览器操作的工具集和库，主要用于Web应用程序的测试，支持多种浏览器和多种操作系统)\n测试报告框架：Allure(一种用于测试报告生成和测试结果可视化的开源测试报告框架)\n\n# 6、遇到的问题挑战\n小组各成员在项目初期均对java不够熟悉，同时对于各种前后端框架的使用也不熟悉，学习成本比较高，在此处花费了大量的时间。同时该项目比较考验小组的协作分工能力，在项目初期成员分工不明确，导致项目进度比较缓慢，后期成员分工比较明确，项目进展比较顺利。\n\n# 7、项目总结\n通过这次小组合作项目，我们学到了很多东西，包括前后端分离、SpringBoot、SpringMVC、MyBatis、MySQL、Maven、Ajax、JSON、Javascript等技术，也提高了我们团队协作的能力，同时锻炼了我们独立思考的能力，相信对小组的各成员今后成长都有益处。","slug":"东软云his技术栈总结","published":1,"updated":"2023-12-10T16:21:31.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsp0000my0vm39pi4uyj","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章旨在记录大四小组实习实训期间项目所使用的技术栈，以及所使用的框架，框架的优缺点，以及框架的原理。同时对于在开发项目的过程中所遇到的问题和一些解决方案，以及一些技术点进行总结。</p>\n<h1 id=\"1、项目主要技术栈以及开发工具\"><a href=\"#1、项目主要技术栈以及开发工具\" class=\"headerlink\" title=\"1、项目主要技术栈以及开发工具\"></a>1、项目主要技术栈以及开发工具</h1><h2 id=\"1-1、前端技术栈\"><a href=\"#1-1、前端技术栈\" class=\"headerlink\" title=\"1.1、前端技术栈\"></a>1.1、前端技术栈</h2><p>前端主要使用vue技术栈，vue技术栈的优点在于组件化，组件化使得代码可复用性高，组件化使得代码可维护性高，组件化使得代码可扩展性高。</p>\n<h2 id=\"1-2、后端技术栈\"><a href=\"#1-2、后端技术栈\" class=\"headerlink\" title=\"1.2、后端技术栈\"></a>1.2、后端技术栈</h2><p>后端开发语言选择java，并主要使用springboot技术栈，springboot技术栈的优点在于快速开发，快速开发使得开发效率高，快速开发使得部署效率高，快速开发使得维护效率高。</p>\n<h2 id=\"1-3、数据库\"><a href=\"#1-3、数据库\" class=\"headerlink\" title=\"1.3、数据库\"></a>1.3、数据库</h2><p>数据库使用mysql，mysql的优点在于开源，免费，使用成本低，mysql的缺点在于性能差，mysql的缺点在于数据量大的时候性能差。但对于该项目而言，mysql的优点大于缺点，已足够使用。</p>\n<h2 id=\"1-4、开发工具\"><a href=\"#1-4、开发工具\" class=\"headerlink\" title=\"1.4、开发工具\"></a>1.4、开发工具</h2><p>开发工具使用：IntelliJ IDEA 2023.2.3，vscode，MySQL Workbench等。</p>\n<hr>\n<h1 id=\"2、架构设计\"><a href=\"#2、架构设计\" class=\"headerlink\" title=\"2、架构设计\"></a>2、架构设计</h1><h2 id=\"2-1、前后端分离架构设计\"><a href=\"#2-1、前后端分离架构设计\" class=\"headerlink\" title=\"2.1、前后端分离架构设计\"></a>2.1、前后端分离架构设计</h2><p>前后端分离架构设计，前端使用vue技术栈，后端使用springboot技术栈，前端和后端通过接口进行交互。</p>\n<h2 id=\"2-2、业务架构设计\"><a href=\"#2-2、业务架构设计\" class=\"headerlink\" title=\"2.2、业务架构设计\"></a>2.2、业务架构设计</h2><p>业务架构设计，主要分为一下几个部分：</p>\n<ul>\n<li>用户管理模块</li>\n<li>患者管理模块</li>\n<li>医生管理模块</li>\n<li>科室管理模块</li>\n<li>挂号管理模块</li>\n<li>处方管理模块</li>\n<li>药房管理模块<br>具体就是分为基础信息维护、门诊挂号收费、门诊医生工作站、门诊医技工作站、门诊财务管理等。</li>\n</ul>\n<hr>\n<h1 id=\"3、模块说明\"><a href=\"#3、模块说明\" class=\"headerlink\" title=\"3、模块说明\"></a>3、模块说明</h1><h2 id=\"3-1、-前端模块说明\"><a href=\"#3-1、-前端模块说明\" class=\"headerlink\" title=\"3.1、 前端模块说明\"></a>3.1、 前端模块说明</h2><ul>\n<li>使用多种vue组件，实现了上述功能</li>\n<li>引入动态路由，实现不同角色的权限分离，每个身份对应不用的Vue组件和路由</li>\n<li>添加路由卫士，实现所有路由数据均由后端返回</li>\n</ul>\n<h2 id=\"3-2、-后端模块说明\"><a href=\"#3-2、-后端模块说明\" class=\"headerlink\" title=\"3.2、 后端模块说明\"></a>3.2、 后端模块说明</h2><ul>\n<li>config:配置跨域支持，并且添加了MyBatis-Plus的分页插件，以便在数据库查询中使用分页功能</li>\n<li>controller: 控制层包括医生、医技、动态菜单等业务逻辑的实现</li>\n<li>entity: 实体层包括项目涉及到的所有类的定义</li>\n<li>mapper: 数据层，用于与数据库的操作</li>\n<li>service: 实现与前端交互</li>\n<li>util: 一些自定义的工具类</li>\n</ul>\n<hr>\n<h1 id=\"4、实现细节\"><a href=\"#4、实现细节\" class=\"headerlink\" title=\"4、实现细节\"></a>4、实现细节</h1><h2 id=\"4-1、-前端主要部分举例\"><a href=\"#4-1、-前端主要部分举例\" class=\"headerlink\" title=\"4.1、 前端主要部分举例\"></a>4.1、 前端主要部分举例</h2><h3 id=\"4-1-1、-路由\"><a href=\"#4-1-1、-路由\" class=\"headerlink\" title=\"4.1.1、 路由\"></a>4.1.1、 路由</h3><p>1、导入模块。<br>“Vue”和”VueRouter”分别是Vue.js核心库和Vue Router库<br>axios是一个用于发起HTTP请求的库，axios支持Promise，能轻松实现异步请求。store是VueX的数据存储仓库。<br>qs是一个用于序列化和解析URL参数的库。</p>\n<p>2、使用插件<br>使用 VueRouter 插件，使 Vue 应用具备路由功能。<br>将 qs 库挂载到 Vue 原型上，以便在组件中使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$qs</span> = qs;</span><br></pre></td></tr></table></figure></p>\n<p>3、定义路由<br>定义一些路由规则，包括默认重定向、主页路径和登录路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  <span class=\"comment\">// ... (路由配置)</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>4、创建路由实例<br>创建一个路由示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">base</span>: process.<span class=\"property\">env</span>.<span class=\"property\">BASE_URL</span>,</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>5、路由守卫<br>使用 beforeEach 路由守卫，用于在切换路由前执行一些逻辑。<br>在这里，判断是否有路由，如果没有，则从后端获取用户权限信息，并动态添加路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... (路由守卫的逻辑)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>6、导航转为路由<br>定义了一个函数 menuToRoute 用于将菜单项转换为路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">menuToRoute</span> = (<span class=\"params\">menu</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... (导航转成路由的逻辑)&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>7、导出路由示例<br>导出创建好的路由实例，以便在 Vue 应用中使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-1-2、-登录界面\"><a href=\"#4-1-2、-登录界面\" class=\"headerlink\" title=\"4.1.2、 登录界面\"></a>4.1.2、 登录界面</h3><p>使用Vue.js结合Element UI实现了用户登录功能。通过Vue.js和Element UI提供的组件和功能，实现了用户登录的表单验证和提交功能。Axios用于和后端进行数据交互，而Vuex则用于管理全局状态，包括用户Token信息。通过路由守卫实现了在用户登录成功后进行路由跳转。</p>\n<h3 id=\"4-1-3、-主页\"><a href=\"#4-1-3、-主页\" class=\"headerlink\" title=\"4.1.3、 主页\"></a>4.1.3、 主页</h3><p>基于Vue.js和Element UI的前端页面，主要用于展示医疗系统的主界面，包括侧边栏、头部导航、用户信息和主体内容。<br>使用Vue.js构建前端单页面应用。利用Element UI组件库，例如el-container、el-aside、el-header、el-main等，来构建页面布局和各种UI元素。<br>利用Vue.js的组件化开发思想，将页面划分为多个组件，例如SideMenu、Tabs等，提高了代码的可维护性和可读性。<br>利用Vue Router进行前端路由管理，通过<router-view>标签动态加载视图组件。<br>使用Vuex进行状态管理，存储和管理全局状态，如用户信息。利用Element UI的栅格系统进行响应式布局，确保在不同屏幕尺寸下能够正常显示。</p>\n<h3 id=\"4-1-4、-侧边栏菜单\"><a href=\"#4-1-4、-侧边栏菜单\" class=\"headerlink\" title=\"4.1.4、 侧边栏菜单\"></a>4.1.4、 侧边栏菜单</h3><p>1、<strong>模板部分</strong><br>使用了el-menu组件，设置了一些样式和属性，包括默认激活的菜单项、文本颜色、背景颜色等。<br>使用v-for指令遍历menuList，生成侧边栏菜单。menuList从Vuex中获取，即this.$store.state.menus.menuList。<br>使用router-link包裹el-menu-item，实现点击菜单项跳转到相应的路由。</p>\n<p>2、<strong>脚本部分</strong><br>组件的名称为SideMenu。<br>在computed中使用计算属性menuList获取菜单列表，该菜单列表存储在Vuex的menus模块中的menuList属性中。</p>\n<p>3、<strong>方法部分</strong><br>selectMenu方法用于处理菜单项的点击事件，通过$store.commit调用addTab mutation，将点击的菜单项添加到标签页中。<br>总体而言，实现了基于Element UI的垂直侧边栏菜单。菜单项来自于Vuex中的menuList，并且支持点击菜单项后在主体区域打开相应的路由页面。通过这种模块化的设计，可以方便地扩展和管理系统的菜单功能。</p>\n<h3 id=\"4-1-5、-标签页\"><a href=\"#4-1-5、-标签页\" class=\"headerlink\" title=\"4.1.5、 标签页\"></a>4.1.5、 标签页</h3><p>1、<strong>模板部分</strong><br>使用了el-tabs组件，设置了一些属性，包括标签页的类型为card卡片形式、可关闭标签页、监听标签页的关闭事件（@tab-remove）和标签页的点击事件（@tab-click）。<br>使用v-for指令遍历editableTabs数组，生成可编辑的标签页。</p>\n<p>2、<strong>脚本部分</strong><br>组件的名称为Tabs。<br>在data中没有声明任何局部状态，数据都是通过computed属性来获取和设置，这些数据来自于Vuex中的menus模块的editableTabs和editableTabsValue属性。<br>提供了两个计算属性：editableTabs和editableTabsValue，分别获取和设置Vuex中的相关数据。</p>\n<p>3、<strong>方法部分</strong><br>removeTab方法用于处理标签页的关闭事件。在关闭标签页时，会更新editableTabs和editableTabsValue的值，并通过this.$router.push方法跳转到对应的路由页面。若关闭的是首页（’Index’），则直接返回不做任何操作。<br>clickTab方法用于处理标签页的点击事件。在点击标签页时，同样会通过this.$router.push方法跳转到对应的路由页面。</p>\n<p>总体而言，实现了展示可编辑的标签页，标签页的内容由el-tab-pane组件承载，与路由进行关联，通过Vuex中的状态管理实现了标签页的动态增删和路由切换。</p>\n<p>这里只节选部分功能进行说明。</p>\n<h2 id=\"4-2-后端主要部分举例\"><a href=\"#4-2-后端主要部分举例\" class=\"headerlink\" title=\"4.2 后端主要部分举例\"></a>4.2 后端主要部分举例</h2><h3 id=\"4-2-1、-登录Controller\"><a href=\"#4-2-1、-登录Controller\" class=\"headerlink\" title=\"4.2.1、 登录Controller\"></a>4.2.1、 登录Controller</h3><p>这个控制器主要处理用户登录和登出的请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。</p>\n<p>1、注解和依赖注入<br>@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。@Autowired：自动注入UserService实例。</p>\n<p>2、RequestMapping注解<br>@RequestMapping(“/login”)：映射处理来自前端的/login请求。<br>@RequestMapping(“/logout”)：映射处理来自前端的/logout请求。</p>\n<p>3、login方法<br>处理用户登录请求。<br>使用@RequestMapping(“/login”)注解，接收前端传递的User对象参数。<br>打印接收到的前端数据和执行了登录的提示信息。<br>调用UserService的login方法，返回登录用户的信息。<br>判断登录用户是否为null，如果不为null，返回登录成功的结果；否则返回登录失败的结果。</p>\n<p>4、logout方法<br>处理用户登出请求。<br>使用@RequestMapping(“/logout”)注解，接收前端传递的参数。<br>直接返回登出成功的结果。</p>\n<p>5、返回方法<br>使用ResultUtil类构建返回结果，其中包括响应码（EnumCode）和消息。<br>登录成功时返回用户信息，登录失败和登出成功时只返回消息。</p>\n<h3 id=\"4-2-2、-用户Controller\"><a href=\"#4-2-2、-用户Controller\" class=\"headerlink\" title=\"4.2.2、 用户Controller\"></a>4.2.2、 用户Controller</h3><p>这个控制器主要处理关于用户信息的查询请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。这样的设计使得代码更加模块化，实现了前后端的分离。</p>\n<p>1、注解和依赖注入<br>@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。<br>@Autowired：自动注入UserService实例。</p>\n<p>2、RequestMapping注解<br>@RequestMapping(“/queryUserAll”)：映射处理来自前端的/queryUserAll请求。<br>@RequestMapping(“/queryUserDeptByID”)：映射处理来自前端的/queryUserDeptByID请求。</p>\n<p>3、getUserAll方法<br>处理查询所有用户信息的请求。<br>使用@RequestMapping(“/queryUserAll”)注解，接收前端传递的User对象参数。<br>调用UserService的selectAll方法，返回所有用户的信息列表。<br>判断用户列表是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。</p>\n<p>4、getUserDeptByID方法<br>处理根据用户ID查询用户所在部门信息的请求。<br>使用@RequestMapping(“/queryUserDeptByID”)注解，接收前端传递的User对象参数。<br>调用UserService的selectDeptByID方法，返回指定用户所在部门的信息。<br>判断部门信息是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。</p>\n<p>这里也同样只挑出来一些比较有代表性的功能实现，还有其它一些功能这里就不再赘述了。</p>\n<hr>\n<h1 id=\"5、测试\"><a href=\"#5、测试\" class=\"headerlink\" title=\"5、测试\"></a>5、测试</h1><p>测试用浏览器：Chrome 113.0.5672.127<br>测试工具：Selenium(用于自动化浏览器操作的工具集和库，主要用于Web应用程序的测试，支持多种浏览器和多种操作系统)<br>测试报告框架：Allure(一种用于测试报告生成和测试结果可视化的开源测试报告框架)</p>\n<h1 id=\"6、遇到的问题挑战\"><a href=\"#6、遇到的问题挑战\" class=\"headerlink\" title=\"6、遇到的问题挑战\"></a>6、遇到的问题挑战</h1><p>小组各成员在项目初期均对java不够熟悉，同时对于各种前后端框架的使用也不熟悉，学习成本比较高，在此处花费了大量的时间。同时该项目比较考验小组的协作分工能力，在项目初期成员分工不明确，导致项目进度比较缓慢，后期成员分工比较明确，项目进展比较顺利。</p>\n<h1 id=\"7、项目总结\"><a href=\"#7、项目总结\" class=\"headerlink\" title=\"7、项目总结\"></a>7、项目总结</h1><p>通过这次小组合作项目，我们学到了很多东西，包括前后端分离、SpringBoot、SpringMVC、MyBatis、MySQL、Maven、Ajax、JSON、Javascript等技术，也提高了我们团队协作的能力，同时锻炼了我们独立思考的能力，相信对小组的各成员今后成长都有益处。</p>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章旨在记录大四小组实习实训期间项目所使用的技术栈，以及所使用的框架，框架的优缺点，以及框架的原理。同时对于在开发项目的过程中所遇到的问题和一些解决方案，以及一些技术点进行总结。</p>\n<h1 id=\"1、项目主要技术栈以及开发工具\"><a href=\"#1、项目主要技术栈以及开发工具\" class=\"headerlink\" title=\"1、项目主要技术栈以及开发工具\"></a>1、项目主要技术栈以及开发工具</h1><h2 id=\"1-1、前端技术栈\"><a href=\"#1-1、前端技术栈\" class=\"headerlink\" title=\"1.1、前端技术栈\"></a>1.1、前端技术栈</h2><p>前端主要使用vue技术栈，vue技术栈的优点在于组件化，组件化使得代码可复用性高，组件化使得代码可维护性高，组件化使得代码可扩展性高。</p>\n<h2 id=\"1-2、后端技术栈\"><a href=\"#1-2、后端技术栈\" class=\"headerlink\" title=\"1.2、后端技术栈\"></a>1.2、后端技术栈</h2><p>后端开发语言选择java，并主要使用springboot技术栈，springboot技术栈的优点在于快速开发，快速开发使得开发效率高，快速开发使得部署效率高，快速开发使得维护效率高。</p>\n<h2 id=\"1-3、数据库\"><a href=\"#1-3、数据库\" class=\"headerlink\" title=\"1.3、数据库\"></a>1.3、数据库</h2><p>数据库使用mysql，mysql的优点在于开源，免费，使用成本低，mysql的缺点在于性能差，mysql的缺点在于数据量大的时候性能差。但对于该项目而言，mysql的优点大于缺点，已足够使用。</p>\n<h2 id=\"1-4、开发工具\"><a href=\"#1-4、开发工具\" class=\"headerlink\" title=\"1.4、开发工具\"></a>1.4、开发工具</h2><p>开发工具使用：IntelliJ IDEA 2023.2.3，vscode，MySQL Workbench等。</p>\n<hr>\n<h1 id=\"2、架构设计\"><a href=\"#2、架构设计\" class=\"headerlink\" title=\"2、架构设计\"></a>2、架构设计</h1><h2 id=\"2-1、前后端分离架构设计\"><a href=\"#2-1、前后端分离架构设计\" class=\"headerlink\" title=\"2.1、前后端分离架构设计\"></a>2.1、前后端分离架构设计</h2><p>前后端分离架构设计，前端使用vue技术栈，后端使用springboot技术栈，前端和后端通过接口进行交互。</p>\n<h2 id=\"2-2、业务架构设计\"><a href=\"#2-2、业务架构设计\" class=\"headerlink\" title=\"2.2、业务架构设计\"></a>2.2、业务架构设计</h2><p>业务架构设计，主要分为一下几个部分：</p>\n<ul>\n<li>用户管理模块</li>\n<li>患者管理模块</li>\n<li>医生管理模块</li>\n<li>科室管理模块</li>\n<li>挂号管理模块</li>\n<li>处方管理模块</li>\n<li>药房管理模块<br>具体就是分为基础信息维护、门诊挂号收费、门诊医生工作站、门诊医技工作站、门诊财务管理等。</li>\n</ul>\n<hr>\n<h1 id=\"3、模块说明\"><a href=\"#3、模块说明\" class=\"headerlink\" title=\"3、模块说明\"></a>3、模块说明</h1><h2 id=\"3-1、-前端模块说明\"><a href=\"#3-1、-前端模块说明\" class=\"headerlink\" title=\"3.1、 前端模块说明\"></a>3.1、 前端模块说明</h2><ul>\n<li>使用多种vue组件，实现了上述功能</li>\n<li>引入动态路由，实现不同角色的权限分离，每个身份对应不用的Vue组件和路由</li>\n<li>添加路由卫士，实现所有路由数据均由后端返回</li>\n</ul>\n<h2 id=\"3-2、-后端模块说明\"><a href=\"#3-2、-后端模块说明\" class=\"headerlink\" title=\"3.2、 后端模块说明\"></a>3.2、 后端模块说明</h2><ul>\n<li>config:配置跨域支持，并且添加了MyBatis-Plus的分页插件，以便在数据库查询中使用分页功能</li>\n<li>controller: 控制层包括医生、医技、动态菜单等业务逻辑的实现</li>\n<li>entity: 实体层包括项目涉及到的所有类的定义</li>\n<li>mapper: 数据层，用于与数据库的操作</li>\n<li>service: 实现与前端交互</li>\n<li>util: 一些自定义的工具类</li>\n</ul>\n<hr>\n<h1 id=\"4、实现细节\"><a href=\"#4、实现细节\" class=\"headerlink\" title=\"4、实现细节\"></a>4、实现细节</h1><h2 id=\"4-1、-前端主要部分举例\"><a href=\"#4-1、-前端主要部分举例\" class=\"headerlink\" title=\"4.1、 前端主要部分举例\"></a>4.1、 前端主要部分举例</h2><h3 id=\"4-1-1、-路由\"><a href=\"#4-1-1、-路由\" class=\"headerlink\" title=\"4.1.1、 路由\"></a>4.1.1、 路由</h3><p>1、导入模块。<br>“Vue”和”VueRouter”分别是Vue.js核心库和Vue Router库<br>axios是一个用于发起HTTP请求的库，axios支持Promise，能轻松实现异步请求。store是VueX的数据存储仓库。<br>qs是一个用于序列化和解析URL参数的库。</p>\n<p>2、使用插件<br>使用 VueRouter 插件，使 Vue 应用具备路由功能。<br>将 qs 库挂载到 Vue 原型上，以便在组件中使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$qs</span> = qs;</span><br></pre></td></tr></table></figure></p>\n<p>3、定义路由<br>定义一些路由规则，包括默认重定向、主页路径和登录路径。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  <span class=\"comment\">// ... (路由配置)</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>4、创建路由实例<br>创建一个路由示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">base</span>: process.<span class=\"property\">env</span>.<span class=\"property\">BASE_URL</span>,</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>5、路由守卫<br>使用 beforeEach 路由守卫，用于在切换路由前执行一些逻辑。<br>在这里，判断是否有路由，如果没有，则从后端获取用户权限信息，并动态添加路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... (路由守卫的逻辑)</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>6、导航转为路由<br>定义了一个函数 menuToRoute 用于将菜单项转换为路由。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">menuToRoute</span> = (<span class=\"params\">menu</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... (导航转成路由的逻辑)&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>7、导出路由示例<br>导出创建好的路由实例，以便在 Vue 应用中使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-1-2、-登录界面\"><a href=\"#4-1-2、-登录界面\" class=\"headerlink\" title=\"4.1.2、 登录界面\"></a>4.1.2、 登录界面</h3><p>使用Vue.js结合Element UI实现了用户登录功能。通过Vue.js和Element UI提供的组件和功能，实现了用户登录的表单验证和提交功能。Axios用于和后端进行数据交互，而Vuex则用于管理全局状态，包括用户Token信息。通过路由守卫实现了在用户登录成功后进行路由跳转。</p>\n<h3 id=\"4-1-3、-主页\"><a href=\"#4-1-3、-主页\" class=\"headerlink\" title=\"4.1.3、 主页\"></a>4.1.3、 主页</h3><p>基于Vue.js和Element UI的前端页面，主要用于展示医疗系统的主界面，包括侧边栏、头部导航、用户信息和主体内容。<br>使用Vue.js构建前端单页面应用。利用Element UI组件库，例如el-container、el-aside、el-header、el-main等，来构建页面布局和各种UI元素。<br>利用Vue.js的组件化开发思想，将页面划分为多个组件，例如SideMenu、Tabs等，提高了代码的可维护性和可读性。<br>利用Vue Router进行前端路由管理，通过<router-view>标签动态加载视图组件。<br>使用Vuex进行状态管理，存储和管理全局状态，如用户信息。利用Element UI的栅格系统进行响应式布局，确保在不同屏幕尺寸下能够正常显示。</p>\n<h3 id=\"4-1-4、-侧边栏菜单\"><a href=\"#4-1-4、-侧边栏菜单\" class=\"headerlink\" title=\"4.1.4、 侧边栏菜单\"></a>4.1.4、 侧边栏菜单</h3><p>1、<strong>模板部分</strong><br>使用了el-menu组件，设置了一些样式和属性，包括默认激活的菜单项、文本颜色、背景颜色等。<br>使用v-for指令遍历menuList，生成侧边栏菜单。menuList从Vuex中获取，即this.$store.state.menus.menuList。<br>使用router-link包裹el-menu-item，实现点击菜单项跳转到相应的路由。</p>\n<p>2、<strong>脚本部分</strong><br>组件的名称为SideMenu。<br>在computed中使用计算属性menuList获取菜单列表，该菜单列表存储在Vuex的menus模块中的menuList属性中。</p>\n<p>3、<strong>方法部分</strong><br>selectMenu方法用于处理菜单项的点击事件，通过$store.commit调用addTab mutation，将点击的菜单项添加到标签页中。<br>总体而言，实现了基于Element UI的垂直侧边栏菜单。菜单项来自于Vuex中的menuList，并且支持点击菜单项后在主体区域打开相应的路由页面。通过这种模块化的设计，可以方便地扩展和管理系统的菜单功能。</p>\n<h3 id=\"4-1-5、-标签页\"><a href=\"#4-1-5、-标签页\" class=\"headerlink\" title=\"4.1.5、 标签页\"></a>4.1.5、 标签页</h3><p>1、<strong>模板部分</strong><br>使用了el-tabs组件，设置了一些属性，包括标签页的类型为card卡片形式、可关闭标签页、监听标签页的关闭事件（@tab-remove）和标签页的点击事件（@tab-click）。<br>使用v-for指令遍历editableTabs数组，生成可编辑的标签页。</p>\n<p>2、<strong>脚本部分</strong><br>组件的名称为Tabs。<br>在data中没有声明任何局部状态，数据都是通过computed属性来获取和设置，这些数据来自于Vuex中的menus模块的editableTabs和editableTabsValue属性。<br>提供了两个计算属性：editableTabs和editableTabsValue，分别获取和设置Vuex中的相关数据。</p>\n<p>3、<strong>方法部分</strong><br>removeTab方法用于处理标签页的关闭事件。在关闭标签页时，会更新editableTabs和editableTabsValue的值，并通过this.$router.push方法跳转到对应的路由页面。若关闭的是首页（’Index’），则直接返回不做任何操作。<br>clickTab方法用于处理标签页的点击事件。在点击标签页时，同样会通过this.$router.push方法跳转到对应的路由页面。</p>\n<p>总体而言，实现了展示可编辑的标签页，标签页的内容由el-tab-pane组件承载，与路由进行关联，通过Vuex中的状态管理实现了标签页的动态增删和路由切换。</p>\n<p>这里只节选部分功能进行说明。</p>\n<h2 id=\"4-2-后端主要部分举例\"><a href=\"#4-2-后端主要部分举例\" class=\"headerlink\" title=\"4.2 后端主要部分举例\"></a>4.2 后端主要部分举例</h2><h3 id=\"4-2-1、-登录Controller\"><a href=\"#4-2-1、-登录Controller\" class=\"headerlink\" title=\"4.2.1、 登录Controller\"></a>4.2.1、 登录Controller</h3><p>这个控制器主要处理用户登录和登出的请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。</p>\n<p>1、注解和依赖注入<br>@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。@Autowired：自动注入UserService实例。</p>\n<p>2、RequestMapping注解<br>@RequestMapping(“/login”)：映射处理来自前端的/login请求。<br>@RequestMapping(“/logout”)：映射处理来自前端的/logout请求。</p>\n<p>3、login方法<br>处理用户登录请求。<br>使用@RequestMapping(“/login”)注解，接收前端传递的User对象参数。<br>打印接收到的前端数据和执行了登录的提示信息。<br>调用UserService的login方法，返回登录用户的信息。<br>判断登录用户是否为null，如果不为null，返回登录成功的结果；否则返回登录失败的结果。</p>\n<p>4、logout方法<br>处理用户登出请求。<br>使用@RequestMapping(“/logout”)注解，接收前端传递的参数。<br>直接返回登出成功的结果。</p>\n<p>5、返回方法<br>使用ResultUtil类构建返回结果，其中包括响应码（EnumCode）和消息。<br>登录成功时返回用户信息，登录失败和登出成功时只返回消息。</p>\n<h3 id=\"4-2-2、-用户Controller\"><a href=\"#4-2-2、-用户Controller\" class=\"headerlink\" title=\"4.2.2、 用户Controller\"></a>4.2.2、 用户Controller</h3><p>这个控制器主要处理关于用户信息的查询请求，通过注解映射相应的URL，并调用UserService处理业务逻辑，返回相应的结果给前端。这样的设计使得代码更加模块化，实现了前后端的分离。</p>\n<p>1、注解和依赖注入<br>@RestController：表明这是一个RESTful风格的控制器，返回的数据都是以JSON格式。<br>@Autowired：自动注入UserService实例。</p>\n<p>2、RequestMapping注解<br>@RequestMapping(“/queryUserAll”)：映射处理来自前端的/queryUserAll请求。<br>@RequestMapping(“/queryUserDeptByID”)：映射处理来自前端的/queryUserDeptByID请求。</p>\n<p>3、getUserAll方法<br>处理查询所有用户信息的请求。<br>使用@RequestMapping(“/queryUserAll”)注解，接收前端传递的User对象参数。<br>调用UserService的selectAll方法，返回所有用户的信息列表。<br>判断用户列表是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。</p>\n<p>4、getUserDeptByID方法<br>处理根据用户ID查询用户所在部门信息的请求。<br>使用@RequestMapping(“/queryUserDeptByID”)注解，接收前端传递的User对象参数。<br>调用UserService的selectDeptByID方法，返回指定用户所在部门的信息。<br>判断部门信息是否为null，如果不为null，返回查询成功的结果；否则返回查询失败的结果。</p>\n<p>这里也同样只挑出来一些比较有代表性的功能实现，还有其它一些功能这里就不再赘述了。</p>\n<hr>\n<h1 id=\"5、测试\"><a href=\"#5、测试\" class=\"headerlink\" title=\"5、测试\"></a>5、测试</h1><p>测试用浏览器：Chrome 113.0.5672.127<br>测试工具：Selenium(用于自动化浏览器操作的工具集和库，主要用于Web应用程序的测试，支持多种浏览器和多种操作系统)<br>测试报告框架：Allure(一种用于测试报告生成和测试结果可视化的开源测试报告框架)</p>\n<h1 id=\"6、遇到的问题挑战\"><a href=\"#6、遇到的问题挑战\" class=\"headerlink\" title=\"6、遇到的问题挑战\"></a>6、遇到的问题挑战</h1><p>小组各成员在项目初期均对java不够熟悉，同时对于各种前后端框架的使用也不熟悉，学习成本比较高，在此处花费了大量的时间。同时该项目比较考验小组的协作分工能力，在项目初期成员分工不明确，导致项目进度比较缓慢，后期成员分工比较明确，项目进展比较顺利。</p>\n<h1 id=\"7、项目总结\"><a href=\"#7、项目总结\" class=\"headerlink\" title=\"7、项目总结\"></a>7、项目总结</h1><p>通过这次小组合作项目，我们学到了很多东西，包括前后端分离、SpringBoot、SpringMVC、MyBatis、MySQL、Maven、Ajax、JSON、Javascript等技术，也提高了我们团队协作的能力，同时锻炼了我们独立思考的能力，相信对小组的各成员今后成长都有益处。</p>\n"},{"title":"linux常用命令","date":"2024-01-05T07:43:00.000Z","update":"2024-01-05T07:43:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n# 相对路径和绝对路径和特殊路径\nlinux中/的含义有两种：一是根目录，二是表示层次\n\n- 绝对路径：从根目录开始，以根目录为起点，逐级往下\n- 相对路径：从当前目录开始，以当前目录为起点，逐级往下\n- 特殊路径：.代表当前目录，..代表上一级目录，~代表用户的home目录\n\n***\n# ls\nls不使用参数，代表列出当前目录下的内容\n-a,即all,代表列出全部文件(包含隐藏的文件或文件夹)(linux系统中前边为.的表示隐藏文件或文件夹)\n-l,表示以竖向列表的形式展示当前目录下的内容，并且展示更多信息\n-h,需要搭配-l一起使用，表示以人性化的方式展示文件大小\n\n以上三个命令选项是可以组合使用的\n```\nls [-a -l -h] [linux路径]\n```\n***\n\n# cd\ncd代表change directory，即改变当前工作目录\ncd命令无需选项，只需参数，表示要切换到哪个目录下，cd命令不写参数，代表切换到用户的home目录\n```\ncd [linux路径]\n```\n***\n\n# pwd\npwd代表print work directory，即打印当前工作目录\npwd命令无需选项，只需参数，表示要打印哪个目录的路径\n```\npwd \n```\n***\n\n# mkdir\nmkdir代表make directory，即创建目录\n```\nmkdir [-p] linux路径\n```\n-p,即parent,表示如果需要创建多层级的目录，则创建所有父目录\n***\n\n# touch\n可以通过touch命令创建文件\n```\ntouch linux路径\n```\ntouch命令无需选项，只需参数（表示创建的文件的路径）\n***\n\n# cat\n准备好文件内容后可以通过cat命令查看文件内容\n```\ncat linux路径\n```\ncat命令无需选项，只需参数（表示要查看的文件的路径）\n***\n\n# more\nmore命令可以以分页的形式查看文件内容，如果文件内容过多可以一页页的展示\n```\nmore linux路径\n```\n通过more查看文件内容的过程中，可以通过空格键翻页，通过q键退出查看文件内容的界面\n***\n\n# cp\ncp代表copy，即复制文件或目录\n```\ncp [-r] 参数一 参数二\n```\n-r,即recursive,表示递归复制，即复制目录时，复制目录下的所有内容(复制文件夹时使用)\n参数一：表示要复制的文件或目录的路径\n参数二：表示要复制到的路径\n***\n\n# mv\nmv代表move，即移动文件或目录\n```\nmove 参数一 参数二\n```\n参数一：表示要移动的文件或目录的路径\n参数二：表示要移动到的路径（如果目标不存在，则起到改名的效果）\n***\n\n# rm\nrm代表remove，即删除文件或目录\n```\nrm [-r -f] 参数(可以有多个)   \n```\n-r,即recursive,表示递归删除，即删除目录时，删除目录下的所有内容(删除文件夹时使用)\n-f,即force,表示强制删除，即不询问直接删除(不会弹出提示确认信息)，普通用户删除内容后不会弹出提示，只有root管理员删除内容时会有提示，一般不同用户使用不到-f选项\n参数：表示要删除的文件或目录的路径（多个参数之间用空格隔开）\n***\n\n# which\nlinux命令本质上是一个个二进制可执行程序\nwhich命令可以查看某个命令（即命令所对应的程序文件）的路径\n```\nwhich 要查找的命令\n```\n***\n\n# find\nfind命令用于搜索指定的文件\n```\nfind 起始路径 -name \"要搜索的文件名\"(按文件名)\nfind 起始路径 -size +|-n[kMG](按大小)\n```\n***\n\n\n\n","source":"_posts/linux常用命令.md","raw":"---\ntitle: linux常用命令\ndate: 2024-1-5 15:43:00\nupdate: 2024-1-5 15:43:00\ntags: linux\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n# 相对路径和绝对路径和特殊路径\nlinux中/的含义有两种：一是根目录，二是表示层次\n\n- 绝对路径：从根目录开始，以根目录为起点，逐级往下\n- 相对路径：从当前目录开始，以当前目录为起点，逐级往下\n- 特殊路径：.代表当前目录，..代表上一级目录，~代表用户的home目录\n\n***\n# ls\nls不使用参数，代表列出当前目录下的内容\n-a,即all,代表列出全部文件(包含隐藏的文件或文件夹)(linux系统中前边为.的表示隐藏文件或文件夹)\n-l,表示以竖向列表的形式展示当前目录下的内容，并且展示更多信息\n-h,需要搭配-l一起使用，表示以人性化的方式展示文件大小\n\n以上三个命令选项是可以组合使用的\n```\nls [-a -l -h] [linux路径]\n```\n***\n\n# cd\ncd代表change directory，即改变当前工作目录\ncd命令无需选项，只需参数，表示要切换到哪个目录下，cd命令不写参数，代表切换到用户的home目录\n```\ncd [linux路径]\n```\n***\n\n# pwd\npwd代表print work directory，即打印当前工作目录\npwd命令无需选项，只需参数，表示要打印哪个目录的路径\n```\npwd \n```\n***\n\n# mkdir\nmkdir代表make directory，即创建目录\n```\nmkdir [-p] linux路径\n```\n-p,即parent,表示如果需要创建多层级的目录，则创建所有父目录\n***\n\n# touch\n可以通过touch命令创建文件\n```\ntouch linux路径\n```\ntouch命令无需选项，只需参数（表示创建的文件的路径）\n***\n\n# cat\n准备好文件内容后可以通过cat命令查看文件内容\n```\ncat linux路径\n```\ncat命令无需选项，只需参数（表示要查看的文件的路径）\n***\n\n# more\nmore命令可以以分页的形式查看文件内容，如果文件内容过多可以一页页的展示\n```\nmore linux路径\n```\n通过more查看文件内容的过程中，可以通过空格键翻页，通过q键退出查看文件内容的界面\n***\n\n# cp\ncp代表copy，即复制文件或目录\n```\ncp [-r] 参数一 参数二\n```\n-r,即recursive,表示递归复制，即复制目录时，复制目录下的所有内容(复制文件夹时使用)\n参数一：表示要复制的文件或目录的路径\n参数二：表示要复制到的路径\n***\n\n# mv\nmv代表move，即移动文件或目录\n```\nmove 参数一 参数二\n```\n参数一：表示要移动的文件或目录的路径\n参数二：表示要移动到的路径（如果目标不存在，则起到改名的效果）\n***\n\n# rm\nrm代表remove，即删除文件或目录\n```\nrm [-r -f] 参数(可以有多个)   \n```\n-r,即recursive,表示递归删除，即删除目录时，删除目录下的所有内容(删除文件夹时使用)\n-f,即force,表示强制删除，即不询问直接删除(不会弹出提示确认信息)，普通用户删除内容后不会弹出提示，只有root管理员删除内容时会有提示，一般不同用户使用不到-f选项\n参数：表示要删除的文件或目录的路径（多个参数之间用空格隔开）\n***\n\n# which\nlinux命令本质上是一个个二进制可执行程序\nwhich命令可以查看某个命令（即命令所对应的程序文件）的路径\n```\nwhich 要查找的命令\n```\n***\n\n# find\nfind命令用于搜索指定的文件\n```\nfind 起始路径 -name \"要搜索的文件名\"(按文件名)\nfind 起始路径 -size +|-n[kMG](按大小)\n```\n***\n\n\n\n","slug":"linux常用命令","published":1,"updated":"2024-01-05T16:32:53.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsp2000py0vm10pman0n","content":"<h1 id=\"相对路径和绝对路径和特殊路径\"><a href=\"#相对路径和绝对路径和特殊路径\" class=\"headerlink\" title=\"相对路径和绝对路径和特殊路径\"></a>相对路径和绝对路径和特殊路径</h1><p>linux中/的含义有两种：一是根目录，二是表示层次</p>\n<ul>\n<li>绝对路径：从根目录开始，以根目录为起点，逐级往下</li>\n<li>相对路径：从当前目录开始，以当前目录为起点，逐级往下</li>\n<li>特殊路径：.代表当前目录，..代表上一级目录，~代表用户的home目录</li>\n</ul>\n<hr>\n<h1 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h1><p>ls不使用参数，代表列出当前目录下的内容<br>-a,即all,代表列出全部文件(包含隐藏的文件或文件夹)(linux系统中前边为.的表示隐藏文件或文件夹)<br>-l,表示以竖向列表的形式展示当前目录下的内容，并且展示更多信息<br>-h,需要搭配-l一起使用，表示以人性化的方式展示文件大小</p>\n<p>以上三个命令选项是可以组合使用的<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h1><p>cd代表change directory，即改变当前工作目录<br>cd命令无需选项，只需参数，表示要切换到哪个目录下，cd命令不写参数，代表切换到用户的home目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [linux路径]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h1><p>pwd代表print work directory，即打印当前工作目录<br>pwd命令无需选项，只需参数，表示要打印哪个目录的路径<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd </span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h1><p>mkdir代表make directory，即创建目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [-p] linux路径</span><br></pre></td></tr></table></figure><br>-p,即parent,表示如果需要创建多层级的目录，则创建所有父目录</p>\n<hr>\n<h1 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h1><p>可以通过touch命令创建文件<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch linux路径</span><br></pre></td></tr></table></figure><br>touch命令无需选项，只需参数（表示创建的文件的路径）</p>\n<hr>\n<h1 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h1><p>准备好文件内容后可以通过cat命令查看文件内容<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat linux路径</span><br></pre></td></tr></table></figure><br>cat命令无需选项，只需参数（表示要查看的文件的路径）</p>\n<hr>\n<h1 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h1><p>more命令可以以分页的形式查看文件内容，如果文件内容过多可以一页页的展示<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more linux路径</span><br></pre></td></tr></table></figure><br>通过more查看文件内容的过程中，可以通过空格键翻页，通过q键退出查看文件内容的界面</p>\n<hr>\n<h1 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h1><p>cp代表copy，即复制文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [-r] 参数一 参数二</span><br></pre></td></tr></table></figure><br>-r,即recursive,表示递归复制，即复制目录时，复制目录下的所有内容(复制文件夹时使用)<br>参数一：表示要复制的文件或目录的路径<br>参数二：表示要复制到的路径</p>\n<hr>\n<h1 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h1><p>mv代表move，即移动文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move 参数一 参数二</span><br></pre></td></tr></table></figure><br>参数一：表示要移动的文件或目录的路径<br>参数二：表示要移动到的路径（如果目标不存在，则起到改名的效果）</p>\n<hr>\n<h1 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h1><p>rm代表remove，即删除文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [-r -f] 参数(可以有多个)   </span><br></pre></td></tr></table></figure><br>-r,即recursive,表示递归删除，即删除目录时，删除目录下的所有内容(删除文件夹时使用)<br>-f,即force,表示强制删除，即不询问直接删除(不会弹出提示确认信息)，普通用户删除内容后不会弹出提示，只有root管理员删除内容时会有提示，一般不同用户使用不到-f选项<br>参数：表示要删除的文件或目录的路径（多个参数之间用空格隔开）</p>\n<hr>\n<h1 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h1><p>linux命令本质上是一个个二进制可执行程序<br>which命令可以查看某个命令（即命令所对应的程序文件）的路径<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which 要查找的命令</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h1><p>find命令用于搜索指定的文件<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find 起始路径 -name &quot;要搜索的文件名&quot;(按文件名)</span><br><span class=\"line\">find 起始路径 -size +|-n[kMG](按大小)</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h1 id=\"相对路径和绝对路径和特殊路径\"><a href=\"#相对路径和绝对路径和特殊路径\" class=\"headerlink\" title=\"相对路径和绝对路径和特殊路径\"></a>相对路径和绝对路径和特殊路径</h1><p>linux中/的含义有两种：一是根目录，二是表示层次</p>\n<ul>\n<li>绝对路径：从根目录开始，以根目录为起点，逐级往下</li>\n<li>相对路径：从当前目录开始，以当前目录为起点，逐级往下</li>\n<li>特殊路径：.代表当前目录，..代表上一级目录，~代表用户的home目录</li>\n</ul>\n<hr>\n<h1 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h1><p>ls不使用参数，代表列出当前目录下的内容<br>-a,即all,代表列出全部文件(包含隐藏的文件或文件夹)(linux系统中前边为.的表示隐藏文件或文件夹)<br>-l,表示以竖向列表的形式展示当前目录下的内容，并且展示更多信息<br>-h,需要搭配-l一起使用，表示以人性化的方式展示文件大小</p>\n<p>以上三个命令选项是可以组合使用的<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h1><p>cd代表change directory，即改变当前工作目录<br>cd命令无需选项，只需参数，表示要切换到哪个目录下，cd命令不写参数，代表切换到用户的home目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd [linux路径]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h1><p>pwd代表print work directory，即打印当前工作目录<br>pwd命令无需选项，只需参数，表示要打印哪个目录的路径<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd </span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h1><p>mkdir代表make directory，即创建目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir [-p] linux路径</span><br></pre></td></tr></table></figure><br>-p,即parent,表示如果需要创建多层级的目录，则创建所有父目录</p>\n<hr>\n<h1 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h1><p>可以通过touch命令创建文件<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch linux路径</span><br></pre></td></tr></table></figure><br>touch命令无需选项，只需参数（表示创建的文件的路径）</p>\n<hr>\n<h1 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h1><p>准备好文件内容后可以通过cat命令查看文件内容<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat linux路径</span><br></pre></td></tr></table></figure><br>cat命令无需选项，只需参数（表示要查看的文件的路径）</p>\n<hr>\n<h1 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h1><p>more命令可以以分页的形式查看文件内容，如果文件内容过多可以一页页的展示<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more linux路径</span><br></pre></td></tr></table></figure><br>通过more查看文件内容的过程中，可以通过空格键翻页，通过q键退出查看文件内容的界面</p>\n<hr>\n<h1 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h1><p>cp代表copy，即复制文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [-r] 参数一 参数二</span><br></pre></td></tr></table></figure><br>-r,即recursive,表示递归复制，即复制目录时，复制目录下的所有内容(复制文件夹时使用)<br>参数一：表示要复制的文件或目录的路径<br>参数二：表示要复制到的路径</p>\n<hr>\n<h1 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h1><p>mv代表move，即移动文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move 参数一 参数二</span><br></pre></td></tr></table></figure><br>参数一：表示要移动的文件或目录的路径<br>参数二：表示要移动到的路径（如果目标不存在，则起到改名的效果）</p>\n<hr>\n<h1 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h1><p>rm代表remove，即删除文件或目录<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm [-r -f] 参数(可以有多个)   </span><br></pre></td></tr></table></figure><br>-r,即recursive,表示递归删除，即删除目录时，删除目录下的所有内容(删除文件夹时使用)<br>-f,即force,表示强制删除，即不询问直接删除(不会弹出提示确认信息)，普通用户删除内容后不会弹出提示，只有root管理员删除内容时会有提示，一般不同用户使用不到-f选项<br>参数：表示要删除的文件或目录的路径（多个参数之间用空格隔开）</p>\n<hr>\n<h1 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h1><p>linux命令本质上是一个个二进制可执行程序<br>which命令可以查看某个命令（即命令所对应的程序文件）的路径<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which 要查找的命令</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h1><p>find命令用于搜索指定的文件<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find 起始路径 -name &quot;要搜索的文件名&quot;(按文件名)</span><br><span class=\"line\">find 起始路径 -size +|-n[kMG](按大小)</span><br></pre></td></tr></table></figure></p>\n<hr>\n"},{"title":"计算机网络知识点回顾","date":"2024-02-01T00:25:00.000Z","update":"2023-08-25T00:25:00.000Z","cover":"https://images5.alphacoders.com/124/thumbbig-1240551.webp","_content":"\n# 一、基础篇\n## TCP/IP四层模型\n应用层 --> 传输层 --> 网络层 --> 网络接口层\n\n1、应用层\n\n应用层专注为用户提供应用功能，如HTTP、FTP、Telnet、DNS、SMTP等。应用层工作在用户态下，而以下层工作在内核态下。\n\n2、传输层\n\nTCP/UDP就位于传输层。\n\nTCP是可靠传输，有流量控制，超时重传，拥塞控制等特性；UDP是不可靠传输，只负责发送数据包，不保证其是否能安全抵达，因此其实时性更好、传输效率更高。\n\n当应用层传来的数据超过MSS时，就要对数据进行分段，在TCP中，每一个称为TCP Segment。这样即使有分段丢失，可以重新传送，不用重发整个数据包。同时，当传输层要往应用层传数据时，用端口号将不同应用区分。特定的服务一般有特定的端口号，而浏览器中的每一个标签都是一个单独的进程，os会为这些进程临时分配端口号。\n\n3、网络层\n\n网络层通常使用的是IP协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。\n\nIP地址分为两部分：网络号 + 主机号。将IP地址和子网掩码进行按位与运算，可以得到网络号，将子网掩码取反后，再和IP地址按位与，可以得到主机号。\n\n寻址过程中，先找到对应的子网，再在对应子网下查找主机。\n\nIP还有一个能力就是路由。在网络中，两个设备之间可能要通过很多网关、路由器、交换机联系在一起。当数据包到达一个网络节点，就要根据路由算法来决定下一个目的地。\n\n4、网络接口层\n\n在IP头部前再加上MAC头，形成数据帧，发送到网络上。\n\nMAC头部是以太网使用的头部，包含收发双方的MAC地址，可以通过ARP协议获得对方的MAC地址。\n\n网络接口层主要为网络层提供链路级别的传输服务，负责在以太网、WiFi这种底层网络上传输数据，工作在网卡这个层次，使用MAC地址来标识网络上的设备。\n\n# 二、TCP篇\n## TCP三次握手\n- 一开始，客户端和服务端都处于CLOSE状态，先是服务端主动监听某个端口，处于LISTEN状态。\n- 客户端随机初始化序列号client-isn，将序号置于TCP首部，然后将TCP首部中的SYN标志置为1，接着发送第一个SYN包给服务端，表示发起连接，之后客户端处于SYN-SENT状态。\n- 服务端收到来自客户端的SYN包后，首先服务端也随机初始化序列号server-isn，将序号置于TCP首部，然后把TCP首部中的确认号的字段中填入client-isn + 1，并将ACK和SYN标志置为1，然后把该报文发送给客户端，服务端进入SYN-RCVD状态。\n- 客户端收到来自服务端的报文后，将TCP首部中的ACK标志置为1，且在确认字段中填入server-isn + 1，最后把报文发送给服务端，这次的报文可以携带从客户到服务端的数据，之后客户端处于ESTABLISHED状态。\n- 服务端收到应答报文后，也进入ESTABLISHED状态。\n\n从上述过程中可以发现，第三次握手是可以携带数据的，前两次握手不携带数据。\n\n## TCP四次挥手\n","source":"_posts/计算机网络知识点回顾.md","raw":"---\ntitle: 计算机网络知识点回顾\ndate: 2024-2-1 8:25:00\nupdate: 2023-8-25 8:25:00\ntags: 计算机网络\ncover: https://images5.alphacoders.com/124/thumbbig-1240551.webp\n---\n\n# 一、基础篇\n## TCP/IP四层模型\n应用层 --> 传输层 --> 网络层 --> 网络接口层\n\n1、应用层\n\n应用层专注为用户提供应用功能，如HTTP、FTP、Telnet、DNS、SMTP等。应用层工作在用户态下，而以下层工作在内核态下。\n\n2、传输层\n\nTCP/UDP就位于传输层。\n\nTCP是可靠传输，有流量控制，超时重传，拥塞控制等特性；UDP是不可靠传输，只负责发送数据包，不保证其是否能安全抵达，因此其实时性更好、传输效率更高。\n\n当应用层传来的数据超过MSS时，就要对数据进行分段，在TCP中，每一个称为TCP Segment。这样即使有分段丢失，可以重新传送，不用重发整个数据包。同时，当传输层要往应用层传数据时，用端口号将不同应用区分。特定的服务一般有特定的端口号，而浏览器中的每一个标签都是一个单独的进程，os会为这些进程临时分配端口号。\n\n3、网络层\n\n网络层通常使用的是IP协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。\n\nIP地址分为两部分：网络号 + 主机号。将IP地址和子网掩码进行按位与运算，可以得到网络号，将子网掩码取反后，再和IP地址按位与，可以得到主机号。\n\n寻址过程中，先找到对应的子网，再在对应子网下查找主机。\n\nIP还有一个能力就是路由。在网络中，两个设备之间可能要通过很多网关、路由器、交换机联系在一起。当数据包到达一个网络节点，就要根据路由算法来决定下一个目的地。\n\n4、网络接口层\n\n在IP头部前再加上MAC头，形成数据帧，发送到网络上。\n\nMAC头部是以太网使用的头部，包含收发双方的MAC地址，可以通过ARP协议获得对方的MAC地址。\n\n网络接口层主要为网络层提供链路级别的传输服务，负责在以太网、WiFi这种底层网络上传输数据，工作在网卡这个层次，使用MAC地址来标识网络上的设备。\n\n# 二、TCP篇\n## TCP三次握手\n- 一开始，客户端和服务端都处于CLOSE状态，先是服务端主动监听某个端口，处于LISTEN状态。\n- 客户端随机初始化序列号client-isn，将序号置于TCP首部，然后将TCP首部中的SYN标志置为1，接着发送第一个SYN包给服务端，表示发起连接，之后客户端处于SYN-SENT状态。\n- 服务端收到来自客户端的SYN包后，首先服务端也随机初始化序列号server-isn，将序号置于TCP首部，然后把TCP首部中的确认号的字段中填入client-isn + 1，并将ACK和SYN标志置为1，然后把该报文发送给客户端，服务端进入SYN-RCVD状态。\n- 客户端收到来自服务端的报文后，将TCP首部中的ACK标志置为1，且在确认字段中填入server-isn + 1，最后把报文发送给服务端，这次的报文可以携带从客户到服务端的数据，之后客户端处于ESTABLISHED状态。\n- 服务端收到应答报文后，也进入ESTABLISHED状态。\n\n从上述过程中可以发现，第三次握手是可以携带数据的，前两次握手不携带数据。\n\n## TCP四次挥手\n","slug":"计算机网络知识点回顾","published":1,"updated":"2024-03-13T10:36:41.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyzgbsp4000ry0vm5wsv37it","content":"<h1 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a>一、基础篇</h1><h2 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h2><p>应用层 —&gt; 传输层 —&gt; 网络层 —&gt; 网络接口层</p>\n<p>1、应用层</p>\n<p>应用层专注为用户提供应用功能，如HTTP、FTP、Telnet、DNS、SMTP等。应用层工作在用户态下，而以下层工作在内核态下。</p>\n<p>2、传输层</p>\n<p>TCP/UDP就位于传输层。</p>\n<p>TCP是可靠传输，有流量控制，超时重传，拥塞控制等特性；UDP是不可靠传输，只负责发送数据包，不保证其是否能安全抵达，因此其实时性更好、传输效率更高。</p>\n<p>当应用层传来的数据超过MSS时，就要对数据进行分段，在TCP中，每一个称为TCP Segment。这样即使有分段丢失，可以重新传送，不用重发整个数据包。同时，当传输层要往应用层传数据时，用端口号将不同应用区分。特定的服务一般有特定的端口号，而浏览器中的每一个标签都是一个单独的进程，os会为这些进程临时分配端口号。</p>\n<p>3、网络层</p>\n<p>网络层通常使用的是IP协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p>\n<p>IP地址分为两部分：网络号 + 主机号。将IP地址和子网掩码进行按位与运算，可以得到网络号，将子网掩码取反后，再和IP地址按位与，可以得到主机号。</p>\n<p>寻址过程中，先找到对应的子网，再在对应子网下查找主机。</p>\n<p>IP还有一个能力就是路由。在网络中，两个设备之间可能要通过很多网关、路由器、交换机联系在一起。当数据包到达一个网络节点，就要根据路由算法来决定下一个目的地。</p>\n<p>4、网络接口层</p>\n<p>在IP头部前再加上MAC头，形成数据帧，发送到网络上。</p>\n<p>MAC头部是以太网使用的头部，包含收发双方的MAC地址，可以通过ARP协议获得对方的MAC地址。</p>\n<p>网络接口层主要为网络层提供链路级别的传输服务，负责在以太网、WiFi这种底层网络上传输数据，工作在网卡这个层次，使用MAC地址来标识网络上的设备。</p>\n<h1 id=\"二、TCP篇\"><a href=\"#二、TCP篇\" class=\"headerlink\" title=\"二、TCP篇\"></a>二、TCP篇</h1><h2 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h2><ul>\n<li>一开始，客户端和服务端都处于CLOSE状态，先是服务端主动监听某个端口，处于LISTEN状态。</li>\n<li>客户端随机初始化序列号client-isn，将序号置于TCP首部，然后将TCP首部中的SYN标志置为1，接着发送第一个SYN包给服务端，表示发起连接，之后客户端处于SYN-SENT状态。</li>\n<li>服务端收到来自客户端的SYN包后，首先服务端也随机初始化序列号server-isn，将序号置于TCP首部，然后把TCP首部中的确认号的字段中填入client-isn + 1，并将ACK和SYN标志置为1，然后把该报文发送给客户端，服务端进入SYN-RCVD状态。</li>\n<li>客户端收到来自服务端的报文后，将TCP首部中的ACK标志置为1，且在确认字段中填入server-isn + 1，最后把报文发送给服务端，这次的报文可以携带从客户到服务端的数据，之后客户端处于ESTABLISHED状态。</li>\n<li>服务端收到应答报文后，也进入ESTABLISHED状态。</li>\n</ul>\n<p>从上述过程中可以发现，第三次握手是可以携带数据的，前两次握手不携带数据。</p>\n<h2 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h2>","site":{"data":{"link":[{"class_name":"1.技术支持","class_desc":"本网站的搭建由以下开源作者提供技术支持","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架","siteshot":"https://source.fomal.cc/siteshot/hexo.io.jpg"}]},{"class_name":"2.友情链接","class_desc":"一些好朋友~~","link_list":[{"name":"Fomalhaut🥝","link":"https://fomal.cc/","avatar":"/assets/head.jpg","descr":"Future is now 🍭🍭🍭","siteshot":"https://source.fomal.cc/siteshot/www.fomal.cn.jpg"}]}],"widget":{"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div id=\"newYear-main\"><div class=\"mask\"></div> <p class=\"title\"></p> <div class=\"newYear-time\"></div> <p class=\"today\" style=\"text-align: right;\"></p> </div>"}]}}},"cover_type":"img","excerpt":"","more":"<h1 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a>一、基础篇</h1><h2 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h2><p>应用层 —&gt; 传输层 —&gt; 网络层 —&gt; 网络接口层</p>\n<p>1、应用层</p>\n<p>应用层专注为用户提供应用功能，如HTTP、FTP、Telnet、DNS、SMTP等。应用层工作在用户态下，而以下层工作在内核态下。</p>\n<p>2、传输层</p>\n<p>TCP/UDP就位于传输层。</p>\n<p>TCP是可靠传输，有流量控制，超时重传，拥塞控制等特性；UDP是不可靠传输，只负责发送数据包，不保证其是否能安全抵达，因此其实时性更好、传输效率更高。</p>\n<p>当应用层传来的数据超过MSS时，就要对数据进行分段，在TCP中，每一个称为TCP Segment。这样即使有分段丢失，可以重新传送，不用重发整个数据包。同时，当传输层要往应用层传数据时，用端口号将不同应用区分。特定的服务一般有特定的端口号，而浏览器中的每一个标签都是一个单独的进程，os会为这些进程临时分配端口号。</p>\n<p>3、网络层</p>\n<p>网络层通常使用的是IP协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p>\n<p>IP地址分为两部分：网络号 + 主机号。将IP地址和子网掩码进行按位与运算，可以得到网络号，将子网掩码取反后，再和IP地址按位与，可以得到主机号。</p>\n<p>寻址过程中，先找到对应的子网，再在对应子网下查找主机。</p>\n<p>IP还有一个能力就是路由。在网络中，两个设备之间可能要通过很多网关、路由器、交换机联系在一起。当数据包到达一个网络节点，就要根据路由算法来决定下一个目的地。</p>\n<p>4、网络接口层</p>\n<p>在IP头部前再加上MAC头，形成数据帧，发送到网络上。</p>\n<p>MAC头部是以太网使用的头部，包含收发双方的MAC地址，可以通过ARP协议获得对方的MAC地址。</p>\n<p>网络接口层主要为网络层提供链路级别的传输服务，负责在以太网、WiFi这种底层网络上传输数据，工作在网卡这个层次，使用MAC地址来标识网络上的设备。</p>\n<h1 id=\"二、TCP篇\"><a href=\"#二、TCP篇\" class=\"headerlink\" title=\"二、TCP篇\"></a>二、TCP篇</h1><h2 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h2><ul>\n<li>一开始，客户端和服务端都处于CLOSE状态，先是服务端主动监听某个端口，处于LISTEN状态。</li>\n<li>客户端随机初始化序列号client-isn，将序号置于TCP首部，然后将TCP首部中的SYN标志置为1，接着发送第一个SYN包给服务端，表示发起连接，之后客户端处于SYN-SENT状态。</li>\n<li>服务端收到来自客户端的SYN包后，首先服务端也随机初始化序列号server-isn，将序号置于TCP首部，然后把TCP首部中的确认号的字段中填入client-isn + 1，并将ACK和SYN标志置为1，然后把该报文发送给客户端，服务端进入SYN-RCVD状态。</li>\n<li>客户端收到来自服务端的报文后，将TCP首部中的ACK标志置为1，且在确认字段中填入server-isn + 1，最后把报文发送给服务端，这次的报文可以携带从客户到服务端的数据，之后客户端处于ESTABLISHED状态。</li>\n<li>服务端收到应答报文后，也进入ESTABLISHED状态。</li>\n</ul>\n<p>从上述过程中可以发现，第三次握手是可以携带数据的，前两次握手不携带数据。</p>\n<h2 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clyzgbsog0001y0vmf5ec28a4","tag_id":"clyzgbson0004y0vmcsrq5jj0","_id":"clyzgbsou000cy0vm0v0d14jl"},{"post_id":"clyzgbsol0003y0vm6tayblk2","tag_id":"clyzgbson0004y0vmcsrq5jj0","_id":"clyzgbsoy000iy0vmg7171gtt"},{"post_id":"clyzgbsop0006y0vm7wukc994","tag_id":"clyzgbsoy000hy0vm9qrjgsos","_id":"clyzgbsp5000uy0vm6f852oh3"},{"post_id":"clyzgbsop0006y0vm7wukc994","tag_id":"clyzgbsp1000ny0vm7tvf7xov","_id":"clyzgbsp5000wy0vm9imxc1k4"},{"post_id":"clyzgbsoq0008y0vmcr2u75kz","tag_id":"clyzgbsp4000sy0vmc63l0ghw","_id":"clyzgbsp9000zy0vm22dffmpp"},{"post_id":"clyzgbsos000ay0vmd1pqbu7z","tag_id":"clyzgbsp4000sy0vmc63l0ghw","_id":"clyzgbspb0013y0vm2yief50n"},{"post_id":"clyzgbsou000ey0vma1i7dknx","tag_id":"clyzgbspa0011y0vmcdnya73u","_id":"clyzgbspc0017y0vmdk0tf1lg"},{"post_id":"clyzgbsow000gy0vm4njchbj8","tag_id":"clyzgbsoy000hy0vm9qrjgsos","_id":"clyzgbspd001by0vmazed7u2u"},{"post_id":"clyzgbsow000gy0vm4njchbj8","tag_id":"clyzgbspc0019y0vmg8xnhs4e","_id":"clyzgbspd001cy0vm7cfg2diu"},{"post_id":"clyzgbsoz000ky0vmebzo1q1i","tag_id":"clyzgbspd001ay0vmb6sc49xd","_id":"clyzgbspd001ey0vm11fob5na"},{"post_id":"clyzgbsp0000my0vm39pi4uyj","tag_id":"clyzgbspd001dy0vm1g1q3k21","_id":"clyzgbspe001gy0vm0slt2zm4"},{"post_id":"clyzgbsp2000py0vm10pman0n","tag_id":"clyzgbspd001fy0vmenhpce7p","_id":"clyzgbspe001iy0vmhmebbvyl"},{"post_id":"clyzgbsp4000ry0vm5wsv37it","tag_id":"clyzgbspe001hy0vmdjfjhnsg","_id":"clyzgbspe001jy0vmbnf5hvfg"}],"Tag":[{"name":"C++","_id":"clyzgbson0004y0vmcsrq5jj0"},{"name":"数据结构","_id":"clyzgbsoy000hy0vm9qrjgsos"},{"name":"二叉树","_id":"clyzgbsp1000ny0vm7tvf7xov"},{"name":"redis","_id":"clyzgbsp4000sy0vmc63l0ghw"},{"name":"分布式系统、一致性算法","_id":"clyzgbspa0011y0vmcdnya73u"},{"name":"数组","_id":"clyzgbspc0019y0vmg8xnhs4e"},{"name":"操作系统","_id":"clyzgbspd001ay0vmb6sc49xd"},{"name":"java, vue, springboot, mybatis, mysql","_id":"clyzgbspd001dy0vm1g1q3k21"},{"name":"linux","_id":"clyzgbspd001fy0vmenhpce7p"},{"name":"计算机网络","_id":"clyzgbspe001hy0vmdjfjhnsg"}]}}